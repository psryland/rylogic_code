//***********************************************************************
// Example file for Line Drawer
//***********************************************************************
//
//	Separator characters: ' ', ';', ','
//	Colours: AARRGGBB
//	Object Types:				Listable
//		*Point						Y
//		*Line						Y
//		*LineD						Y
//		*LineNL						Y
//		*LineList					N
//		*Rectangle					Y
//		*RectangleLU				Y
//		*RectangleWHZ				Y
//		*Triangle					Y
//		*Quad						Y
//		*QuadLU						Y
//		*QuadWHZ					Y
//		*CircleR					Y
//		*CircleRxRyZ				Y
//		*BoxLU						Y
//		*BoxWHD						Y
//		*BoxList					Y
//		*CylinderHR					N
//		*CylinderHRxRy				N
//		*SphereR					N
//		*SphereRxRyRz				N
//		*Polytope					N
//		*FrustumWHNF				N
//		*FrustumATNF				N
//		*GridWH						N
//		*SurfaceWHD					N
//		*Matrix3x3					Y
//		*Matrix4x4					Y
//		*Mesh						N
//		*File						N
//		*Group						Y
//		*GroupCyclic				N
//
//	Optionals:				Requires a section
//		*Transform					Y				- 4x4 transform
//		*Position					Y				- *Position {x y z}
//		*Direction					Y				- axis number (0-2) then direction for that axis. e.g. *Direction { 2 1 1 1 } = z along x=y=z
//		*Orientation				Y				- quaternion
//		*Euler						Y				- angles in degrees
//		*Scale						Y
//		*Animation					Y
//		*Hidden						N
//		*Colour						N				- overrides the colour for all child objects
//		*ColourMask					N				- applies a colour mask to all child objects
//		*Wireframe					N
//			[all objects]
//		*Normalise					N				- normalise the lines
//		*Parametric t0 t1			N				- adjust the previous line using parametric values
//			[all lines]
//		*VertexColoured				N				- each vertex has a colour (FFFFFFFF) 
//			[Triangle, Quad]
//		*Texture "filename"			N				- apply a texture to an object
//			[Quad, QuadLU, QuadWHZ, SphereR, SphereRxRyRz]
//		*Divisions n				N				- faceting of a sphere
//			[CircleR, CircleRxRyZ, SphereR, SphereRxRyRz]
//		*GenerateNormals			N				- generate normals for the object
//			[Mesh, File]
//		*Frame						N				- select a frame out of an xfile
//			[File]
//	Control sections:
//		*Delimiters " ,\t\n{"						- a C-style string containing the delimiter characters to use
//		*Camera
//***********************************************************************
/*
	Block Comments should also work
*/

// Tips:
// Holding down shift when selecting a file from the recent files list opens the file additively
// Pressing space in the data list window toggles the visibility of the selected object. Holding down shift
//  as well toggles the visibility of the object and all of its children.
// '#include' is supported.

//*****
// Camera view. These are the default values:
//	*Position	{0 0 10}
//	*LookAt		{0 0 0}	- This can be the focus point
//	*Up			{0 1 0}	- Dosn't need to be normalised
//	*FOV		0.4
//	*Aspect		1.0
//	*Near		0.1
//	*Far		100.0
//	*AlignX, *AlignY, *AlignZ	- turn on camera aligning
//	*PositionX, *PositionY, *PositionZ	- set one coordinate of the camera position only
// If a keyword is not given the default is used. The camera block must be
// at the top level. If multiple camera blocks are given the last is the one used.
*Camera
{
	*Position	{-5.3 3.3 7.9}
	*LookAt		{0 0 0}
	*Up			{0.2 0.9 -0.2}
	*Near		0.1
	*Far		100.0
}

//*****
// Lock. Lock camera translation or rotation
//	*TransX
//	*TransY
//	*TransZ
//	*RotX
//	*RotY
//	*RotZ
//	*CameraRelative
// If a keyword is not given it is assumed not locked
*Lock
{
	*TransY
}

//*****
// Point
// Syntax: Point name colour { x y z }
*Point MyPoint FFFF0000
{
	1 1 1
}

//*****
// Line
// Syntax: Line name colour { x1 y1 z1 x2 y2 z2 }
*Line MyLine  FF00FF00
{
	0 0 0 1 1 1
	*Parametric 0.2 0.9
	*Point MyChildPoint FF00FF00 { 0.5 0.5 0.5 }
}

//*******
// LineD
// Syntax: LineD name colour { x1 y1 z1 dx dy dz }
*LineD MyLine  FF00FF00
{
	0 1 0 1 0 1
}

//*****
// LineNL
// Syntax: LineNL name colour { x1 y1 z1 nx ny nz l }
*LineNL MyLine  FF00FF00
{
	1 1 1 0 -1 0 3
}

//*****
// LineList
// Syntax: LineList name colour { x1 y1 z1 x2 y2 z2 x3 y3 z3 ... }
*LineList MyLineList FF00FF00
{
	0 0 0
	0 0 1
	0 1 1
	1 1 1
	1 1 0
	1 0 0
}

//*****
// Rectangle
// Syntax: Rectangle name colour { TLx TLy TLz  BLx BLy BLz  BRx BRy BRz  TRx TRy TRz }
*Rectangle MyRectangle FFFF00FF
{
	-1  1  0
	-1 -1  0
	 1 -1  0
	 1  1  0
}

//*****
// RectangleLU
// Syntax: RectangleLU name colour { lx ly lz ux uy uz }
*RectangleLU MyRectangleLU FF0000FF
{
	0 0 0 1 1 1
}

//*****
// RectangleWHZ
// Syntax: RectangleWHZ name colour { w h z }
*RectangleWHZ MyRectangleWHZ FF00FFFF
{
	2 3 1
}

//*****
// Triangle
// Syntax: Triangle name colour { x0 y0 z0 x1 y1 z1 x2 y2 z2 }
*Triangle MyTriangle FF00FF00
{
	0 0 0
	1 1 1
	0 1 0
}

//*****
// Quad
// Vertex order is: 0, 1, 2, 0, 2, 3
// Syntax: Quad name colour { x0 y0 z0 x1 y1 z1 x2 y2 z2 x3 y3 z3 }
*Quad MyQuad FFF0F00F
{
	0 0 0
	1 0 0
	1 1 0
	0 1 0
}

//*****
// QuadLU
// Syntax: QuadLU name colour { lx ly lz ux uy uz }
*QuadLU MyQuadLU FF0FF00F
{
	0 0 0 
	-1 -1 -1
}

//*****
// QuadWHZ
// Syntax: QuadWHZ name colour { w h z }
*QuadWHZ MyQuadWHZ FF0FF00F
{
	2 1 -5
}

//*****
// CircleR
// Syntax: CircleR name colour { r }
*CircleR MyCircleR FFFFFF00
{
	1
}

//*****
// CircleRxRyZ
// Syntax: CircleRxRyZ name colour { rx ry z }
*CircleRxRyZ MyCircleRxRyZ FF808080
{
	3 2 -1
}

//*****
// BoxLU
// Syntax: BoxLU name colour { lx ly lz ux uy uz }
*BoxLU MyBoxLU FF008080
{
	-1 -1 -1 1 1 1
	*Animation
	{
		3			// Style: one of: NoAnimation = 0, PlayOnce = 1, PlayReverse = 2, PingPong = 3, PlayContinuous = 4
		2.0			// Period in seconds
		0 1 0		// Linear velocity in m/s
		1 0 0		// Axis of rotation
		3.0			// Angular speed in rad/s
	}
}

//*****
// BoxWHD
// Syntax: BoxWHD name colour { w h d }
*BoxWHD MyBoxWHD FFFFFF00
{
	1 1.5 2
	*Euler
	{
		40			// Pitch (in degrees)
		0			// Yaw   (in degrees)
		0			// Roll  (in degrees)
	}
}

//*****
// BoxList
// Syntax:  *BoxList name colour { size x y z  size x y z  size x y z ... }
//  or		*BoxList name colour { *Size size  x y z x y z x y z ... }
*BoxList MyBoxList FFFF0000
{
	0.02 1 1 1
	0.02 1 0 1
	0.02 0 0 1
	0.02 0 0 1
}

//*****
// CylinderHR
// Syntax: CylinderHR name colour { h r }
*CylinderHR MyCylinderHR FFFF007F
{
	2 0.5
}

//*****
// CylinderHRxRy
// Syntax: CylinderHRxRy name colour { h rx ry }
*CylinderHRxRy MyCylinderHRxRy FF7F7FFF
{
	2 0.5 0.75
}

//*****
// SphereR
// Syntax: SphereR name colour { r }
*SphereR MySphereR FFFF7F7F
{
	2
}

//*****
// SphereRxRyRz 
// Syntax: SphereRxRyRz name colour { rx ry rz }
*SphereRxRyRz MySphereRxRyRz FF007FFF
{
	0.25 0.5 0.75
}

//*****
// Polytope
// Syntax: Polytope name colour { x y z x y z ... }
*Polytope MyPolytope FFFF0080
{
	 1  0  0
	 0  1  0
	-1  0  0
	 0 -1  0
	 1  1  1
	-1 -1 -1
	1 1 0
}

//*****
// FrustumWHNF
// Syntax: FrustumWHNF name colour { w h n f }
*FrustumWHNF MyFrustumWHNF 707F00FF
{
	1 1 1 2
}

//*****
// FrustumATNF
// Syntax: FrustumATNF name colour { a t n f }
*FrustumATNF MyFrustumATNF 707FFF00
{
	45 45 1 2.5
}

//*****
// GridWH
// Syntax: GridWH name colour { w h div_w div_h }
*GridWH MyGridWH FF7F7FFF
{
	5	5
	10 10
}

//*****
// SurfaceWHD
// Syntax: SurfaceWHD name colour { w d point point ... }
*SurfaceWHD MySurfaceWHD FF7F7FFF
{
	5	5
	0	0	1.000000	
	1	0	-1.000000	
	2	0	1.000000	
	3	0	-1.000000	
	4	0	1.000000	
	0	1	0.707100	
	1	1	-0.707100	
	2	1	0.707100	
	3	1	-0.707100	
	4	1	0.707100	
	0	2	0.224733	
	1	2	-0.224733	
	2	2	0.224733	
	3	2	-0.224733	
	4	2	0.224733	
	0	3	-0.317851	
	1	3	0.317851	
	2	3	-0.317851	
	3	3	0.317851	
	4	3	-0.317851	
	0	4	-0.775267	
	1	4	0.775267	
	2	4	-0.775267	
	3	4	0.775267	
	4	4	-0.775267	
}

//*****
// Matrix3x3
// Syntax: Matrix3x3 name colour { x_axis y_axis z_axis ... }
*Matrix3x3 MyMatrix3x3 FFFFFFFF
{
	 0.707107 0.707107 0
	-0.707107 0.707107 0
	0 0 1
	*Position { 0 5 0 }
	//*Transpose
	//*Inverse
}

//*****
// Matrix3x3
// Syntax: Matrix3x3 name colour { x_axis y_axis z_axis ... }
*Matrix4x4 MyMatrix4x4 FFFFFFFF
{
	0.707107 -0.707107 0 0
	0.707107  0.707107 0 0
	0         0        1 0
	4         0        0 1
	*Scale { 2 2 2 }
	//*Transpose
	//*Inverse
}

//*****
// Mesh
// Syntax:
//	*Mesh name colour
//	{
//		*Verts { x y z ... }
//		[*Normals { nx ny nz ... }]								// One per vertex
//		[GenerateNormals]										// Only works for faces or tetras
//		*Faces { f00 f01 f02  f10 f11 f12  f20 f21 f22  ...}	// Indices of faces
//		*Lines { l00 l01  l10 l11  l20 l21  l30 l31 ...}		// Indices of lines
//		*Tetra { t00 t01 t02 t03  t10 t11 t12 t13 ...}			// Indices of tetrahedra
//	}
*Mesh MyMesh FFFFFF00
{ 
	*Verts
	{
		1.087695 -2.175121 0.600000
		1.087695  3.726199 0.600000
		2.899199 -2.175121 0.600000
		2.899199  3.726199 0.600000
		1.087695  3.726199 0.721147
		1.087695 -2.175121 0.721147
		2.899199 -2.175121 0.721147
		2.899199  3.726199 0.721147
		1.087695  3.726199 0.721147
		1.087695  3.726199 0.600000
		1.087695 -2.175121 0.600000
		1.087695 -2.175121 0.721147
		2.730441  3.725990 0.721148
		2.740741 -2.175321 0.721147
		2.740741 -2.175321 0.600000
		2.730441  3.725990 0.600000
	}
	*Faces
	{
		0,1,2;,
		3,2,1;,
		4,5,6;,
		6,7,4;,
		8,9,10;,
		8,10,11;,
		12,13,14;,
		14,15,12;;
	}
	//*GenerateNormals
}

//*****
// File
// Syntax: File name colour { "filename.X" }
//*File MyXfile 70FFFFFF
//{
//	"P:/Art/Models/Teapot.x"
//}

//*****
// Group
// Syntax: Group name colour { AnyObject ... }
*Group Axes FFFFFFFF
{
	*Line X	FFFF0000 { 0 0 0 1 0 0 }
	*Line Y	FF00FF00 { 0 0 0 0 1 0 }
	*Line Z	FF0000FF { 0 0 0 0 0 1 }
}

//*****
// GroupCyclic
// Syntax: GroupCyclic name colour { style frames_per_second AnyObject ... }
// style: 0 = start->end
//        1 = end->start
//        2 = ping_pong
*GroupCyclic MyGroupCyclic 00000000
{
	0
	8
	*Line frame1 FFFF0000 { 0 0 0  5  0  0 }
	*Line frame2 FFFF0000 { 0 0 0  4  4  0 }
	*Line frame3 FFFF0000 { 0 0 0  0  5  0 }
	*Line frame4 FFFF0000 { 0 0 0 -4  4  0 }
	*Line frame5 FFFF0000 { 0 0 0 -5  0  0 }
	*Line frame6 FFFF0000 { 0 0 0 -4 -4  0 }
	*Line frame7 FFFF0000 { 0 0 0  0 -5  0 }
	*Line frame8 FFFF0000 { 0 0 0  4 -4  0 }
}
