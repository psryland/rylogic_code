{
	"name": "rylogic-textaligner-vscode",
	"displayName": "Rylogic TextAligner for VSCode",
	"version": "1.11.4",
	"publisher": "Rylogic",
	"description": "Text aligning extension for Visual Studio Code by Rylogic",
	"keywords": [
		"Align",
		"Aligner",
		"Alignment",
		"Column",
		"Text",
		"Vertical"
	],
	"license": "/LICENSE.txt",
	"main": "./out/extension.js",
	"icon": "images/icon.png",
	"repository": {
		"url": "https://github.com/psryland/rylogic_code/tree/master/typescript/projects/Rylogic.TextAligner"
	},
	"engines": {
		"vscode": "^1.65.0"
	},
	"categories": [
		"Other"
	],
	"activationEvents": [
		"onCommand:rylogic-textaligner.Align",
		"onCommand:rylogic-textaligner.Unalign"
	],
	"contributes": {
		"commands": [
			{
				"command": "rylogic-textaligner.Align",
				"title": "Align"
			},
			{
				"command": "rylogic-textaligner.Unalign",
				"title": "Unalign"
			}
		],
		"keybindings": [
			{
				"command": "rylogic-textaligner.Align",
				"key": "Ctrl+Alt+]",
				"when": "editorTextFocus && !editorReadonly"
			},
			{
				"command": "rylogic-textaligner.Unalign",
				"key": "Ctrl+Alt+[",
				"when": "editorTextFocus && !editorReadonly"
			}
		],
		"configuration": {
			"title": "TextAligner Configuration",
			"type": "object",
			"properties": {
				"textaligner.alignCharacters": {
					"type": "string",
					"description": "Choose one of Spaces, Tabs, or Mixed for the characters to use for aligning",
					"enum": [
						"Spaces",
						"Tabs",
						"Mixed"
					],
					"default": "Spaces"
				},
				"textaligner.ignoreLinePattern": {
					"type": "string",
					"description": "Lines that match this pattern are ignored when aligning\nExamples:\n  ^\\s*$ - Skip blank lines\n  ^\\s*// - Skips lines that start with a comment\n  (^\\s*$)|(^\\s*//) - Skips blanks lines and lines starting with comments",
					"default": ""
				},
				"textaligner.groups": {
					"type": "array",
					"description": "Groups of patterns that are considered equivalent for alignment. Order these from most to least specific.",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string",
								"description": "A name for the group",
								"default": "Align Pattern Name"
							},
							"leading_space": {
								"type": "number",
								"description": "The number of white space characters added in front of the aligned text. Defaults to 0 if omitted.",
								"default": 0
							},
							"patterns": {
								"type": "array",
								"description": "Regex patterns used to match text to be aligned",
								"items": {
									"type": "object",
									"properties": {
										"pattern": {
											"type": "string",
											"description": "The regular expression used to match text",
											"default": ""
										},
										"offset": {
											"type": "number",
											"description": "The relative position of the matched text to the other patterns in the group once aligned.",
											"default": 0
										},
										"minimum_width": {
											"type": "number",
											"description": "Matched text will be padded with whitespace characters up to the minimum width.",
											"default": 0
										},
										"comment": {
											"type": "string",
											"decription": "A description of the meaning of the pattern",
											"default": ""
										}
									}
								}
							}
						}
					},
					"default": [
						{
							"name": "Assignments",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "(?<![+\\-*/%^~&|!=<>])=(?![=<>])",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Assignment not preceded by: +,-,*,/,%,^,~,&,|,!,=,<,> and not followed by: =,<,>"
								},
								{
									"pattern": "(?<![&|])[+\\-*/%^~&|]={1}",
									"offset": -1,
									"minimum_width": 2,
									"comment": "Assignment preceded by: +,-,*,/,%,^,~,&,| but not preceded by &&,||"
								},
								{
									"pattern": "&&=|\\|\\|=",
									"offset": -2,
									"minimum_width": 3,
									"comment": "Assignments &&= and ||="
								}
							]
						},
						{
							"name": "Lambda",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "=>",
									"offset": 0,
									"minimum_width": 2,
									"comment": "Lambda function arrows: () => { ... }"
								}
							]
						},
						{
							"name": "Comparisons",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "(==|!=|<=|>=)",
									"offset": 0,
									"minimum_width": 2,
									"comment": "2 character comparisons"
								},
								{
									"pattern": "(?<!=)>(?!=)",
									"offset": 0,
									"minimum_width": 1,
									"comment": "> not preceded or followed by ="
								},
								{
									"pattern": "(?<!=)<(?!=)",
									"offset": 0,
									"minimum_width": 1,
									"comment": "< not preceded or followed by ="
								}
							]
						},
						{
							"name": "Boolean operators",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "(&&|\\|\\|)",
									"offset": 0,
									"minimum_width": 2,
									"comment": "Logical AND and OR operators"
								}
							]
						},
						{
							"name": "Line comments",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "/{2,}",
									"offset": 0,
									"minimum_width": 2,
									"comment": "Two or more '/' characters"
								}
							]
						},
						{
							"name": "Open brackets",
							"leading_space": 0,
							"patterns": [
								{
									"pattern": "\\(",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Open bracket characters"
								}
							]
						},
						{
							"name": "Close brackets",
							"leading_space": 0,
							"patterns": [
								{
									"pattern": "\\)",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Close bracket characters"
								}
							]
						},
						{
							"name": "Scope start",
							"leading_space": 0,
							"patterns": [
								{
									"pattern": "{",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Scope start characters"
								}
							]
						},
						{
							"name": "Scope end",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "}",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Scope close characters"
								}
							]
						},
						{
							"name": "Increment / Decrement",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "(\\+\\+|--)",
									"offset": 0,
									"minimum_width": 2,
									"comment": "Increment and decrement operators"
								}
							]
						},
						{
							"name": "Plus / Minus",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "(?<!\\+)\\+(?!\\+)",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Matches '+' but not '++'"
								},
								{
									"pattern": "(?<!\\-)\\-(?!\\-)",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Matches '-' but not '--'"
								}
							]
						},
						{
							"name": "Comma delimiter",
							"leading_space": 0,
							"patterns": [
								{
									"pattern": ",",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Comma characters"
								}
							]
						},
						{
							"name": "Colon delimiter",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "(?<!:):(?!:)",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Single colon characters"
								}
							]
						},
						{
							"name": "Members",
							"leading_space": 1,
							"patterns": [
								{
									"pattern": "(?<![~^])(?<=\\s)m_[0-9a-zA-Z_]",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Matches class members that begin with 'm_' and are not at the start of a line"
								},
								{
									"pattern": "(?<![~^])(?<=\\s)_[0-9a-zA-Z_]*",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Matches class members that begin with '_' and are not at the start of a line"
								},
								{
									"pattern": "(?<=\\s)[_a-zA-z][_a-zA-Z0-9]*_(?![_a-zA-Z0-9])",
									"offset": 0,
									"minimum_width": 1,
									"comment": "Matches class members that end with '_'"
								}
							]
						}
					]
				}
			}
		}
	},
	"bugs": {
		"email": "support@rylogic.co.nz"
	},
	"scripts": {
		"vscode:prepublish": "npm run compile",
		"compile": "tsc -p ./",
		"watch": "tsc -watch -p ./"
	},
	"devDependencies": {
		"@types/node": "^17.0.23",
		"@types/vscode": "^1.65.0",
		"eslint": "^8.12.0",
		"typescript": "^4.6.3"
	}
}
