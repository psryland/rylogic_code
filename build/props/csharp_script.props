<!--
  Enables 'CSharpScript' as a build action.
  
  The CSharpScript build action is made available in the project by adding this to your project file
  "<Import Project="$(PropsPath)csharp_script.props" />".

  Example usage:
  <None Include="src\ldraw\ldraw_demo_scene.ldr" /> This is needed because I can't get it to work from in here
  <CSharpScript Include="src\ldraw\ldraw_demo_scene.ldr">
    <Generator>$(ScriptPath)EmbedFile.csx</Generator>
    <Args>DEMO_SCENE $(ProjectDir)src\ldraw\ldraw_demo_scene.ldr $(ProjectDir)src\ldraw\ldraw_demo_scene.cpp</Args>
    <Outputs>$(OutDir)ldraw_demo_scene.cpp.embedded</Outputs>
    <Message>Embedding ldraw_demo_scene.ldr</Message>
  </CSharpScript>
-->
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Add CSharpScript as a Build Action -->
	<ItemGroup>
		<PropertyPageSchema Include="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).xml"/>
		<AvailableItemName Include="CSharpScript" >
			<Targets>CSharpScriptTarget</Targets>
		</AvailableItemName>
	</ItemGroup>

	<!-- Target for building content using a csharp script -->
	<Target
		Name="CSharpScriptTarget"
		BeforeTargets="ClCompile"
		Inputs="@(CSharpScript);%(CSharpScript.Generator);%(CSharpScript.Fullpath);%(CSharpScript.AdditionalInputs)"
		Outputs="%(CSharpScript.MarkerOutputFile);%(CSharpScript.Outputs)"
	>
		<!-- Disable delta building for this target by moving Inputs and Outputs into here
			Outputs="@(CSharpScript->'$(OutDir)%(Filename)%(Extension).csharpscript_target');%(CSharpScript.AdditionalOutputs)"
		-->

		<!-- Testing
		<Message Importance="high" Text="CSharpScript Items: @(CSharpScript)" />
		<Exec Command="echo %(CSharpScript.Identity)" />
		-->

		<!-- Show the message if there is one-->
		<Exec
			Command="echo %(CSharpScript.Message)"
			Condition="'%(CSharpScript.Message)' != ''"
		/>

		<!-- Execute the script on the file -->
		<Exec
			Command="dotnet-script.exe &quot;%(CSharpScript.Generator)&quot; %(CSharpScript.Args) --no-cache"
			ContinueOnError="ErrorAndContinue"
		/>
		<!-- 
		-->

		<!-- Create the dummy output file to prevent always building -->
		<Exec
			Command="echo. > %(CSharpScript.MarkerOutputFile)"
			Condition="'%(CSharpScript.MarkerOutputFile)' != ''"
		/>
	</Target>

	<!-- Hook the custom target into the build pipeline -->  
	<PropertyGroup>
		<BuildDependsOn>$(BuildDependsOn);CSharpScriptTarget</BuildDependsOn>
	</PropertyGroup>
	
</Project>