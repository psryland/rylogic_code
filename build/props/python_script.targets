<!--
  Enables 'PyScript' as a build action.
  In the properties for a file, select PyScript for the build action.
  'PyScript.Fullpath' is the name of the file that the custom build is operating on.
  It is passed as the first argument to the script
  Set 'Custom Tool' to the name of the script to run
  Set 'Custom Tool Namespace' to any addition arguments you want to pass to the script
  Note: the paths in 'Custom Tool' and 'Custom Tool Namespace' are relative to the file
  that the build action is applied to
  
  The PyScript build action is made available in the project by editing the 'csproj' and adding
  "<Import Project="$(ProjectDir)..\..\build\props\python_script.targets" />".
-->
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<!-- Add PyScript as a Build Action -->
	<ItemGroup>
		<AvailableItemName Include="PyScript" />
	</ItemGroup>

	<!-- Target for building content using a python script -->
	<Target Name="PyScriptTarget"
			BeforeTargets="BeforeResGen"
			Inputs="@(PyScript)"
			Outputs="@(PyScript -> %(identity))"
			Condition="'@(PyScript)' != ''">

		<PropertyGroup>
			<PythonExe>$(WinDir)\py.exe</PythonExe>
			<Script>%(PyScript.Generator)</Script>
			<File>%(PyScript.Fullpath)</File>
			<Args>%(PyScript.CustomToolNamespace)</Args>
		</PropertyGroup>

		<!-- Error if py.exe isn't available -->
		<Error Condition="!Exists('$(PythonExe)')" Text="'$(PythonExe)' not found. Please install Python 3."/>
		
		<!-- Error if the script file isn't available -->
		<Error Condition="!Exists('$(Script)')" Text="'$(Script)' not found."/>

		<!-- Error if the target file isn't available -->
		<Error Condition="!Exists('$(File)')" Text="'$(File)' not found."/>

		<!-- Execute the python script on the file -->
		<Exec
			Command="%22$(PythonExe)%22 %22$(Script)%22 %22$(File)%22 $(Args)"
			ContinueOnError="ErrorAndContinue"/>

	</Target>

</Project>