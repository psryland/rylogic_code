<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>The Nana Programmer's Guide</title>
</head>
<body>
    <table style="font-family:Consolas; font-size:10pt; width: 100%; position: absolute; left: 0px; border-top-style: none; border-right-style: none; border-left-style: none; top: 0px; border-bottom-style: none;">
        <tr>
            <td style="height: 70px; background-color: #ffcc66; text-align: right">
                <span style="font-size: 16pt"><strong>Nana C++ Library &nbsp;<br />
                </strong></span><br />
                <strong>An open-source C++ framework project</strong><br />
                <strong>The Programmer's Guide&nbsp; </strong></td>
        </tr>
        <tr>
            <td style="height: 21px">
            </td>
        </tr>
        <tr>
            <td style="height: 21px">
                <strong><span style="font-size: 16pt">nana::paint::pixel_buffer</span></strong><br />
                <br />
                <strong>
                Description<br />
                </strong>
                <br />
                The class pixel_buffer provides a method to process the color data.<br />
                <br />
                <strong>Model
                of<br />
                </strong>
                <br />
                None&nbsp;<br />
                <br />
                <strong>Public base classes<br />
                </strong>
                <br />
                None<br />
                <br />
                <strong>Members</strong><br />
                <br />
                <table style="border-right: 1px outset; border-top: 1px outset; border-left: 1px outset;
                    width: 100%; border-bottom: 1px outset">
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            pixel_buffer()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The default construction.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            pixel_buffer(drawable_type dw, const nana::rectangle&amp; r)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            See open(drawable dw, const nana::rectangle&amp; r)</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            pixel_buffer(drawable_type dw, std::size_t top, std::size_t lines)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Copies the color data from drawable(dw) begining at scanline(top)</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            pixel_buffer(std::size_t width, std::size_t height)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            See open(std::size_t width, std::size_t height)</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            ~pixel_buffer()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The destruction.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void attach(drawable_type dw, const nana::rectangle&amp; r)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Attaches to a drawable(dw) with a specified rectangle(r).</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            bool alpha_channel() const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns true if the alpha channel is enabled.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void alpha_channel(bool enable)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Enables/Disables the alpha channel.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            bool open(drawable_type)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Copies the color data from drawable.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            bool open(drawable_type dw, const nana::rectangle&amp; r)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Copies the color data from drawable(dw) with the specifed rectangle(want_r)</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            bool open(std::size_t width, std::size_t height)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Creates an pixel buffer with specified size.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void close()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Frees the color data.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            bool empty() const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            It returns true when the pixel_buffer is empty.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            operator const void*() const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            It returns a null pointer when the pixel_buffer is empty.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void blend(const std::string&amp; name)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Selects a blend image processor for this object.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void blend(const nana::rectangle&amp; s_r, drawable_type dw, const nana::point&amp; d_pos, double fade_rate) const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Blends the drawable(dw) at the point(d_pos) with the color data corresponding to the rectangle(s_r).</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void blur(const nana::rectangle&amp; r, std::size_t radius)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Blur process.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            std::size_t bytes() const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns the total bytes of color data.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            std::size_t bytes_per_line() const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns the bytes of a line of color data.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            nana::size size() const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns the size in pixels.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            pixel_rgb_t * raw_ptr(std::size_t row) const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns the beginning address of row&#39;th line.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            pixel_rgb_t * operator[](std::size_t row) const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns the beginning adresss of row&#39;th line.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void line(const std::string&amp; name);</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Selects a line image processor for this object.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void line(const nana::point&amp; posbeg, const nana::point&amp; posend, nana::color_t color, double fade_rate)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Draws a line.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void paste(drawable_type, int x, int y) const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Copies the color data to a drawable.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void paste(const nana::rectangle&amp; s_r, drawable_type, int x, int y)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Copies the color data corresponding to the rectangle(s_r) to the drawable at destination point(x, y)</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void paste(nana::gui::native_window_type, int x, int y)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Copies the color data to a window.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            pixel_rgb_t pixel(int x, int y) const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns a pixel data</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void pixel(int x, int y, pixel_rgb_t)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Sets a pixel data</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void rectangle(const nana::rectangle&amp; r, nana::color_t, double fade_rate, bool solid)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Draws a rectangle.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void shadow_rectangle(const nana::rectangle&amp; r, const nana::color_t beg, nana::color_t end, double fade_rate, bool vertical)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Draws a fading rectangle.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void stretch(const std::string&amp; name)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Selects a stretch image processor for this object.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            void stretch(const nana::rectangle&amp; s_r, drawable_type, const nana::rectangle&amp; d_r) const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Paste the color data corresponding to a rectangle(s_r) to the destination drawable, stretching or compressing the image to fit the rectangle(d_r).</td>
                    </tr>
                </table>
                <br />
                <strong>Notes<br />
                </strong>
                <br />
                1. <span style="font-family: Courier New">The difference between open() and attach(). The open() always copies the color data from a specified drawable, and the attach() just refers to the specified drawable without copy.<br />
                </span>
                <br />
                <strong>See also</strong><br />
                <br />
                None.<br />
                <br />
                <hr />
                Move to <a href="../index.htm">The Nana Programmer's Guide Main Page</a></td>
        </tr>
        <tr>
            <td style="height: 21px">
            </td>
        </tr>
        <tr>
            <td style="height: 21px">
            </td>
        </tr>
    </table>

    
    

</body>
</html>
