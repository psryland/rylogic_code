<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>The Nana Programmer's Guide</title>
    <style type="text/css">
        .auto-style1 {
            font-family: "Courier New";
        }
        .auto-style2 {
            color: #006600;
        }
    </style>
</head>
<body>
    <table style="font-family:Trebuchet MS;font-size:10pt; width: 100%; position: absolute; left: 0px; border-top-style: none; border-right-style: none; border-left-style: none; top: 0px; border-bottom-style: none;">
        <tr>
            <td style="height: 70px; background-color: #ffcc66; text-align: right">
                <span style="font-size: 16pt"><strong>Nana - a C++ framework project &nbsp;<br />
                </strong></span>
                <br />
                <strong>The Programmer's Guide&nbsp; </strong></td>
        </tr>
        <tr>
            <td style="height: 21px">
            </td>
        </tr>
        <tr>
            <td style="height: 21px; font-family: Consolas">
                <strong><span style="font-size: 16pt">nana::gui::textbox</span></strong><br />
                <br />
                <strong>
                Description<br />
                </strong>
                <br />
                a nana::gui::textbox is used in a window to permit users to enter and edit text
                by typing on the keyboard.<br />
                <br />
                <strong>Model
                of<br />
                </strong>
                <br />
                <a href="./widget_window.htm">Widget Window</a>&nbsp;<br />
                <br />
                <strong>Public base classes<br />
                </strong>
                <br />
                <a href="./widget_object_widget_tag.htm">class widget_object&lt;widget_tag, DrawerTrigger&gt;:
                    public
                widget</a><br />
                <br />
                <br />
                <strong>Members</strong><br />
                <br />
                <table style="border-right: 1px outset; border-top: 1px outset; border-left: 1px outset;
                    width: 100%; border-bottom: 1px outset">
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The default constructor.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox(window wd, bool visible)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Creates a textbox.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox(window wd, const nana::string&amp; title, bool visible = true)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Ditto.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox(window wd, const nana::char_t* title, bool visible = true)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Ditto.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox(window wd, const <a href="../basic_class/rectangle.htm" target="_blank">rectangle</a>&amp; r = rectangle(), bool visible = true)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Ditto.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox&amp; append(<strong>const</strong> nana::string&amp;,<strong> bool</strong>
                            at_caret)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Appends a string. If at_caret is true, the string is inserted at the position of caret, otherwise, it is appended at end of the textbox.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox&amp; border(<strong>bool</strong>)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Shows/Hides the border.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox&amp; editable(<strong>bool</strong>)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Set the textbox editable.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <strong>bool</strong> editable() <strong>const</strong></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns true if the textbox is editable.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <em>implement-specified-type</em>&amp; ext_event() const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Retrieves the extra event object.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <strong>bool</strong> getline(size_t n, nana::string&amp; text) <strong>const</strong></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Read the text in a specified line. It returns true for success.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox&amp; mask(nana::char_t c)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Set a mask character. Text is displayed as mask character if a mask character is
                            set. This is used for hiding some special text, such as password.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox&amp; multi_lines(<strong>bool</strong>)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Set the textbox whether it is the mulit-line mode.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <strong>bool</strong> multi_lines() <strong>const</strong></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns true if the textbox is multi-line mode.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <b>bool</b> selected() <b>const</b></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Returns true if text is selected.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <b>void</b> select(<strong>bool</strong>)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Selects/Cancels all text.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            textbox&amp; tip_string(<strong>const</strong> nana::string&amp; str)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Sets a tip string.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <b>void</b> copy() <b>const</b></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Copies the selected text into shared memory, such as clipboard under Windows.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <b>void</b> paste()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Pastes the text from shared memory.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <b>void</b> del()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Erases the selected text.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <strong>void</strong> load(<strong>const</strong> nana::char_t* file);</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Loads a text file. Attempt to load a uncode encoding text file, be sure the file have a BOM header.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <strong>void</strong> store(<strong>const</strong> nana::char_t* file) <strong>const</strong>;</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Writes the text to a file with multibytes encoding.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            store</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Refer to the C++03/11 Members</td>
                    </tr>
                </table>
                <br />
                <strong>C++03 Member</strong><br />
                <br />
                <table style="border-right: 1px outset; border-top: 1px outset; border-left: 1px outset;
                    width: 100%; border-bottom: 1px outset">
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <strong>void</strong> store(<strong>const</strong> nana::char_t* file,nana::unicode::t encoding)&nbsp;<strong>const</strong></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Writes the text to a file with unicode encoding in little-endian.</td>
                    </tr>
                </table>
                <br />
                <strong>C++11 Member</strong><br />
                <br />
                <table style="border-right: 1px outset; border-top: 1px outset; border-left: 1px outset;
                    width: 100%; border-bottom: 1px outset">
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            v<strong>oid</strong> store(<strong>const</strong> nana::char_t* file, nana::unicode encoding) <strong>const</strong></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Ditto.</td>
                    </tr>
                </table>
                <br />
                <strong>File</strong><br />
                <br />
                nana/gui/widgets/textbox.hpp<br />
                <br />
                <strong>Notes<br />
                </strong>
                <br />
                1, The return type of ext_event() is coming with textbox, its definition is<br />
                <br />
                <span class="auto-style1"><strong>struct</strong> <em>implement-specifed</em><br />
                {<br />
&nbsp;&nbsp;&nbsp; nana::fn_group&lt;<strong>void</strong>()&gt; first_change; <span class="auto-style2">//An event for the text first change after text is been opened or stored.</span><br />
                };</span><br />
                <br />
                An instance of first_change<br />
&nbsp;&nbsp;&nbsp; Some text editor programs, such as vim, notepad++, when the text is beeing modified, the caption of window will display a special character(such as * ~ +) to indicate changing of text. To implement this feature, you can set a function to the first_change for modifying the caption of your window.<br />
                <br />
                2, The tip string is displayed when textbox is empty and it will be
                hidden after textbox gets the focus.<br />
                <br />
                <strong>See also</strong><br />
                <br />
                None.<br />
                <br />
                <hr />
                Move to <a href="../index.htm">The Nana Programmer's Guide Main Page</a></td>
        </tr>
        <tr>
            <td style="height: 21px">
            </td>
        </tr>
    </table>

    
    

</body>
</html>
