s<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>The Nana Programmer's Guide</title>
</head>
<body>
    <table style="font-family:Consolas; font-size:10pt; width: 100%; position: absolute; left: 0px; border-top-style: none; border-right-style: none; border-left-style: none; top: 0px; border-bottom-style: none;">
        <tr>
            <td style="height: 70px; background-color: #ffcc66; text-align: right">
                <span style="font-size: 16pt"><strong>Nana C++ Library &nbsp;<br />
                </strong></span><br />
                <strong>An open-source C++ framework project</strong><br />
                <strong>The Programmer's Guide&nbsp; </strong></td>
        </tr>
        <tr>
            <td style="height: 21px">
            </td>
        </tr>
        <tr>
            <td style="height: 21px; font-family: Consolas;font-size: 10pt">
                <strong><span style="font-size: 16pt">nana::threads::pool</span></strong><br />
                <br />
                <strong>
                Description<br />
                </strong>
                <br />
                A thread pool manages a group threads for a large number of tasks processing.<br />
                <br />
                <strong>Model
                of<br />
                </strong>
                <br />
                None<br />
                <br />
                <strong>Public base classes<br />
                </strong>
                <br />
                None<br />
                <br />
                <strong>Members</strong><br />
                <br />

                <table style="font-size: 10pt; border-right: 1px outset; border-top: 1px outset; border-left: 1px outset;
                    width: 100%; border-bottom: 1px outset">
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            pool()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The default constructor. It creates a group of threads.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            pool(<strong>unsigned</strong> threadsize)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Creates a number of threads specifed by threadsize.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            ~pool()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The destructor. It waits for the all running tasks till they are finished and skips all the queued tasks.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <strong>template</strong>&lt;<strong>typename</strong> Function&gt;<br />
                            <strong>void</strong> push(<strong>const</strong> Function&amp; fn) <strong>volatile</strong></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Adds a task to the task queue.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <strong>void</strong> signal() <strong>volatile</strong></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Sends a signal.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 40%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            <strong>void</strong> wait_for_signal() <strong>volatile</strong></td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 60%; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Waits for a signal until the signal processed.</td>
                    </tr>
                </table>
                <br />
                <strong>File<br />
                    <br />
                </strong>nana/threads/pool.hpp<br />
                <br />
                <strong>Notes<br />
                </strong>
                <br />
                1, The signal()/wait_for_signal() provide a method to wait for tasks to finish.<br />
                <br />
                <span style="font-family: Courier New; font-size:10pt">&nbsp; &nbsp; <strong>void</strong> foo()<br />
                    &nbsp; &nbsp; {}<br />
                    <br />
                    &nbsp; &nbsp; <strong>void</strong> foo2()<br />
                    &nbsp; &nbsp; {<br />
                    &nbsp; &nbsp; &nbsp; &nbsp; nana::system::sleep(<span style="color: #003366">1000</span>);<br />
                    &nbsp; &nbsp; &nbsp; &nbsp; std::cout&lt;&lt;<span style="color: #ff0000">"This is foo2"</span>&lt;&lt;std::endl;<br />
                    &nbsp; &nbsp; }<br />
                    <br />
                    &nbsp; &nbsp; <strong>int</strong> main()<br />
                    &nbsp; &nbsp; {<br />
                    &nbsp; &nbsp; &nbsp; &nbsp; nana::threads::pool pool;<br />
                    &nbsp; &nbsp; &nbsp; &nbsp; <strong>for</strong>(<strong>int</strong> i = 0; i &lt;
                    10; ++i)<br />
                    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pool.push(foo);<br />
                    &nbsp; &nbsp; &nbsp; &nbsp; pool.signal(); &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; <span
                        style="color: #006600">//Make a signal and the signal will be triggered when the<br />
                    </span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #006600">//tasks which are pushed
                        before it are finished.</span><br />
                    &nbsp; &nbsp; &nbsp; &nbsp; pool.push(foo2);<br />
                    &nbsp; &nbsp; &nbsp; &nbsp; pool.wait_for_signal(); <span style="color: #006600">//Wait
                        until the signal is triggered. The wait might be finished</span><br />
                    &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
                    &nbsp; &nbsp; &nbsp; &nbsp; <span style="color: #006600">//before finish of foo2, because
                        the signal is made before pushing foo2.</span><br />
                    &nbsp; &nbsp; }<br />
                </span>
                <br />
                <br />
                <br />
                <strong>See also</strong><br />
                <br />
                <a href="./pool_pusher.htm">pool_pusher</a>, <a href="http://nanaproject.wordpress.com/2011/06/11/a-method-to-prevent-ui-from-blocking-while-busy/">
                    A Method to prevent UI from blocking while busy</a>.<br />
                <br />
                <hr />
                Move to <a href="../index.htm">The Nana Programmer's Guide Main Page</a></td>
        </tr>
        <tr>
            <td style="height: 21px">
            </td>
        </tr>
    </table>

    
    

</body>
</html>
