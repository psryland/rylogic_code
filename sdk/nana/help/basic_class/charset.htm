<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>The Nana Programmer's Guide</title>
</head>
<body>
    <table style="font-family:Consolas;font-size:10pt; width: 100%; position: absolute; left: 0px; border-top-style: none; border-right-style: none; border-left-style: none; top: 0px; border-bottom-style: none;">
        <tr>
            <td style="height: 70px; background-color: #ffcc66; text-align: right">
                <span style="font-size: 16pt"><strong>Nana C++ Library &nbsp;<br />
                </strong></span>
                <strong>An open-source C++ framework project</strong><br />
                <strong>The Nana Programmer's Guide </strong></td>
        </tr>
        <tr>
            <td style="height: 21px">
            </td>
        </tr>
        <tr>
            <td style="height: 21px">
                <strong><span style="font-size: 16pt">nana::charset</span></strong><br />
                <br />
                <strong>
                Description<br />
                </strong>
                <br />
                An intelligent charset class for character code conversion.<br />
                <br />
                <strong>Model
                of<br />
                </strong>
                <br />
                None&nbsp;<br />
                <br />
                <strong>Public base classes<br />
                </strong>
                <br />
                None<br />
                <br />
                <strong>Members</strong><br />
                <br />
                <table style="border-right: 1px outset; border-top: 1px outset; border-left: 1px outset;
                    width: 100%; border-bottom: 1px outset">
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset(const charset&amp;)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The copy construction.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset &amp; operator=(const charset&amp;)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The assignment operator.&nbsp;</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset(const std::string&amp;)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Attempt to convert a multibytes string.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset(const std::wstring&amp;)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Attempt to convert a UCS2/UCS4 string.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            ~charset()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The destructor.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            operator std::string() const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Converts the string to multibytes string.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            operator std::wstring() const</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Converts the string to UCS2/UCS4 string.</td>
                    </tr>
                </table>
                <br />
                <strong>C++03 Members</strong><br />
                <br />
                <table style="border-right: 1px outset; border-top: 1px outset; border-left: 1px outset;
                    width: 100%; border-bottom: 1px outset">
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset(const std::string&amp;, nana::unicode::t)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Attempt to convert a unicode string in byte sequence.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            std::string to_bytes(nana::unicode::t)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Converts the string to a unicode in bytes sequence with a specified unicode transformation format.&nbsp;</td>
                    </tr>
                    </table>
                <br />
                <strong>C++11 Members</strong><br />
                <br />
                <table style="border-right: 1px outset; border-top: 1px outset; border-left: 1px outset;
                    width: 100%; border-bottom: 1px outset">
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset(charset&amp;&amp;)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The move construction.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset &amp; operator=(const charset&amp;&amp;)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            The move assignment operator.&nbsp;</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset(std::string&amp;&amp;)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Attempt to convert a multibytes string.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset(const std::string&amp;, nana::unicode)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Attempt to convert a unicode string in byte sequence.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset(std::string&amp;&amp;, nana::unicode)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Ditto.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            charset(const std::wstring&amp;&amp;)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Attempt to convert a UCS2/UCS4 string.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            operator std::string&amp;&amp;()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Converts the string to multibytes string.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            operator std::wstring&amp;&amp;()</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Converts the string to UCS2/UCS4 string.</td>
                    </tr>
                    <tr>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            std::string to_bytes(nana::unicode)</td>
                        <td style="border-right: 1px inset; padding-right: 0px; border-top: 1px inset; padding-left: 0px;
                            padding-bottom: 0px; margin: 0px; border-left: 1px inset; width: 400px; padding-top: 0px;
                            border-bottom: 1px inset; height: 20px">
                            Converts the string to a unicode in bytes sequenece width a specified unicode transformation format.</td>
                    </tr>
                </table>
                <br />
                <strong>File</strong><br />
                <br />
                nana/charset.hpp<br />
                <br />
                <strong>Notes<br />
                </strong>
                <br />
                None.<br />
                <br />
                <strong>Example</strong><br />
                <br />
                1, A UTF-8 string from the socket.<br />
                <br />
                &nbsp;&nbsp;&nbsp;
                int len = ::recv(sd, buf, buflen, 0);<br />
                &nbsp;&nbsp;&nbsp;
                textbox.caption(nana::charset(std::string(buf, len), nana::unicode::utf8));<br />
                <br />
                2, Send the string in text to the socket as UTF-8.<br />
                <br />
                &nbsp;&nbsp;&nbsp;
                std::string utf8str = nana::charset(textbox.caption()).to_bytes(nana::unicode::utf8);<br />
                &nbsp;&nbsp;&nbsp;
                ::send(sd, utf8str.c_str(), utf8str.size(), 0);<br />
                <br />
                3, Convert a string to the specified multi-byte character code.<br />
                <br />
&nbsp;&nbsp;&nbsp; //Convert to a multibytes string through default system language.<br />
&nbsp;&nbsp;&nbsp; std::string mbstr = nana::charset(a_wstring);<br />
                <br />
&nbsp;&nbsp;&nbsp; //If the default system language is English and convert<br />
&nbsp;&nbsp;&nbsp; //a Chinese unicode string to multibytes string through GB2312<br />
&nbsp;&nbsp;&nbsp; std::setlocale(LC_CTYPE, &quot;zh_CN.GB2312&quot;); //set::setlocale(LC_CTYPE, &quot;.936&quot;); call it in Windows<br />
&nbsp;&nbsp;&nbsp; std::string mbstr = nana::charset(a_wstring_with_chinese);<br />
                <br />
                <strong>See also</strong><br />
                <br />
                None.<br />
                <br />
                <hr />
                Move to <a href="../index.htm">The Nana Programmer's Guide Main Page</a></td>
        </tr>
        <tr>
            <td style="height: 21px">
            </td>
        </tr>
    </table>

    
    

</body>
</html>
