General:
	Get rid of small lib projects, just include the h/cpp files into the projects that need then
	Use the min_max_fix.h file rather than #define NOMINMAX
	Separate the Crypt.cpp/.h files into crc, md5, etc
	
Common:
	Write a test program for the DiscretePIDController

Physics:
	Do velocity dependent stepping:
		have a step size of 1/30sec say, and for objects with higher velocities step them with
		smaller increments. Could use velocity/bounding_radius as a measure for how much to sub step
	Stacks		
	Add a "What Happened" ring buffer of strings in debug that records events such as object
	 created/deleted, collision model set, object moved, etc
	Ray casts for all objects
	Cylinder support
	
LineDrawer:
	New Usage:
		Have a lua file in crimson editor(or dev studio actually)
		Hit 'F5'(say) and have the contents of the file displayed in a linedrawer that is listening
	 -> Make linedrawer able to listen to one or more user defined pipe names (a list box containing pipe names with add/remove buttons)
	 -> Make a command line tool that sends a file via a named pipe (e.g. Piper "LdrStream" filename)
	 -> Maybe start adding functions like:
			handle = ldrBox(name, colour, dx,dy,dz); this would create an object directly (instead of using the string parser)?
			ldrTransform(handle, matrix);
	[bug] deleting objects while a plugin is running (with OnDelete hook) can cause a crash
	 Deleting/Adding objects needs looking at, DataManager should control the data structure
	 DataManagerGUI should be controlled from the DataManager
	[bug] persist state doesn't update colours
	Change the AddNew dialog to use a CodeEdit control and make it non-modal
	Fix the "*Point" type to show unscaled facing sprites
	Fix the title bar text (give proper status)
	Make auto refresh more reliable, it's stops working if there's a problem read a file
	 This needs redesigning to deal with synchronisation of files and includes
	 A problem is if line draw opens the file without 'FILE_SHARE_WRITE' other programs fail to open their files
	 Some sort of double buffering is probably the way to go
	Make selection more "sticky", i.e make changing the selection a more deliberate task,
	 also make selection a persist property
	When loading a *Camera from a ldr source string the aspect ratio from the *Camera is used
	 this should really be overridden to be the aspect ratio of the current window
	The axis in the lower right corner is broken again
	Stop the axis in the lower right bouncing around when at high floating values
	Add a "Show Properties" button to the data list that shows the bounding dimensions
	    of the selected object and whatever else I can think of
	Add shadows

Clicket:
	Add the ability to run lua scripts. Expose functions to lua:
	- FindWindowByName(title)
	- FindWindowByProcID(proc_id)
	- FindWindowByCtrlId(parent, id)
	- List controls, with CtrlIds, text, CRect, etc
	- SetWindowText(), etc (other CWindow::methods)
	- PostMessage(wnd, message, wparam, lparam)
	e.g.
	save_wnd = FindWindowByName(0, "Save As")
	filename_ctrl = FindWindowByCtrlId(save_wnd, 314)
	SetWindowText(filename_ctrl, "pauls file.pr_script")
	save_btn = FindWindowByName(save_wnd, "Save")
	PostMessage(save_btn, BN_CLICK, 0, 0)

Renderer:
	Make the effect system component based. Want to be able to say: Effect* eff = GetEffect(xyz | lit | pvc | tint | textured | envmap);
	Add support for sprites, facing, not facing, world space, screen space
	User render targets and render targets as textures
	Support packages
	Add hard type defs for GeomType, VertexFormat, EffectIndex, TextureIndex...
	
LineDrawerHelper/AutoFile:
	Implement writing to clip board, ideally want any combination of to-file,to-screen,to-clipboard

Nugget File:
	Fix up use of ISrc and IDest
	Tidy up copying of ranges of data
			
Lua Binding lib:
	Add maths functions so I can do quick vector/maths operations in the interpreter
	
Geometry Manipulator:
	Add a function for tesellating a polygon

Image:
	
Maths:
