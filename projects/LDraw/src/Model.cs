using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using pr.common;
using pr.extn;
using pr.gfx;
using pr.gui;
using pr.maths;
using pr.util;

namespace LDraw
{
	public class Model :IDisposable
	{
		public Model(MainUI main_ui)
		{
			Owner        = main_ui;
			View3d       = new View3d();
			IncludePaths = new List<string>();
			ContextIds   = new List<Guid>();
			SavedViews   = new List<SavedView>();
			Scene        = new SceneUI(this);
		}
		public void Dispose()
		{
			Scene = null;
			View3d = null;
		}

		/// <summary>The UI that created this model</summary>
		public MainUI Owner
		{
			get;
			private set;
		}

		/// <summary>App settings</summary>
		public Settings Settings
		{
			[DebuggerStepThrough] get { return Owner.Settings; }
		}

		/// <summary>A view3d context reference that lives for the lifetime of the application</summary>
		public View3d View3d
		{
			[DebuggerStepThrough] get { return m_view3d; }
			set
			{
				if (m_view3d == value) return;
				if (m_view3d != null)
				{
					Util.Dispose(ref m_error_cb_gbl);
					Util.Dispose(ref m_view3d);
				}
				m_view3d = value;
				if (m_view3d != null)
				{
					m_error_cb_gbl = m_view3d.PushGlobalErrorCB(ReportError);
				}
			}
		}
		private View3d m_view3d;
		private Scope m_error_cb_gbl;

		/// <summary>The 3d scene</summary>
		public SceneUI Scene
		{
			[DebuggerStepThrough] get { return m_scene; }
			private set
			{
				if (m_scene == value) return;
				if (m_scene != null)
				{
					m_scene.KeyDown -= HandleKeyDown;
					m_scene.Scene.Window.OnRendering -= HandleSceneRendering;
					Util.Dispose(ref m_scene);
				}
				m_scene = value;
				if (m_scene != null)
				{
					m_scene.Scene.Window.OnRendering += HandleSceneRendering;
					m_scene.KeyDown                  += HandleKeyDown;
				}
			}
		}
		private SceneUI m_scene;

		/// <summary>The View3d scene</summary>
		public View3d.Window Window
		{
			[DebuggerStepThrough] get { return Scene?.Scene?.Window; }
		}

		/// <summary>The View3d scene camera</summary>
		public View3d.CameraControls Camera
		{
			[DebuggerStepThrough] get { return Scene.Scene.Camera; }
		}

		/// <summary>Application include paths</summary>
		public List<string> IncludePaths
		{
			[DebuggerStepThrough] get;
			private set;
		}

		/// <summary>Context Ids of loaded script sources</summary>
		public List<Guid> ContextIds
		{
			get;
			private set;
		}

		/// <summary>Saved camera positions</summary>
		public List<SavedView> SavedViews
		{
			get;
			private set;
		}

		/// <summary>Handler for errors generated by View3d</summary>
		public void ReportError(IntPtr ctx, string msg)
		{
			MsgBox.Show(Owner, msg, "LDraw Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
		}

		/// <summary>Create a new script file</summary>
		public void NewFile(string filepath)
		{
		}

		/// <summary>Add a file source</summary>
		public void OpenFile(string filepath, bool additional)
		{
			// Load a source file and save the context id for that file
			var id = View3d.LoadScriptSource(filepath, additional, async:true, include_paths: IncludePaths.ToArray());
			ContextIds.Add(id);
		}

		/// <summary>Reset the camera to view objects in the scene</summary>
		public void ResetView(View3d.ESceneBounds bounds)
		{
			var bb = Window.SceneBounds(bounds);
			Camera.ResetView(bb, Settings.Camera.ResetForward, Settings.Camera.ResetUp);
		}

		/// <summary>Set the camera looking in the direction of 'fwd'</summary>
		public void CamForwardAxis(v4 fwd)
		{
			var c2w   = Camera.O2W;
			var focus = Camera.FocusPoint;
			var cam   = focus - fwd * Camera.FocusDist;

			Settings.Camera.ResetForward = fwd;
			Settings.Camera.ResetUp = v4.Perpendicular(fwd, Settings.Camera.ResetUp);
			Camera.SetPosition(cam, focus, Settings.Camera.ResetUp);
		}

		/// <summary>Align the camera to the given axis</summary>
		public void AlignCamera(v4 axis)
		{
			Camera.AlignAxis = axis;
			Settings.Camera.AlignAxis = axis;
			Settings.Camera.ResetUp = axis;
			Settings.Camera.ResetForward = v4.Perpendicular(axis, Settings.Camera.ResetForward);
		}

		/// <summary>Save the current camera position and view</summary>
		public void SaveView()
		{
			// Prompt for a name
			using (var dlg = new PromptForm { Title = "View Name:", Value = "View{0}".Fmt(SavedViews.Count + 1) })
			{
				dlg.ValueCtrl.SelectAll();
				if (dlg.ShowDialog(Owner) != DialogResult.OK) return;
				SavedViews.Add(new SavedView(dlg.Value, Camera));
			}
		}

		/// <summary>Clear the scene</summary>
		public void ClearScene()
		{
			//// Remove all objects from the window's drawlist
			//Window.RemoveAllObjects();

			// Remove and delete all objects (excluding focus points, selection boxes, etc)
			foreach (var id in ContextIds)
				View3d.DeleteAllObjects(id);

			// Remove all script sources
			View3d.ClearScriptSources();

			// Reset the list script source objects
			ContextIds.Clear();
		}

		/// <summary>Add a demo scene to the scene</summary>
		public void CreateDemoScene()
		{
			ContextIds.Add(Window.CreateDemoScene());
		}

		/// <summary>Cycle through to the next fill mode</summary>
		public void CycleFillMode()
		{
			Scene.Options.FillMode = Enum<View3d.EFillMode>.Cycle(Scene.Options.FillMode);
		}

		/// <summary>Handle keyboard shortcuts</summary>
		private void HandleKeyDown(object sender, KeyEventArgs e)
		{
			switch (e.KeyCode)
			{
			case Keys.F5:
				#region
				{
					View3d.ReloadScriptSources();
					e.Handled = true;
					break;
				}
			#endregion
			case Keys.F7:
				#region
				{
					Camera.ResetView(Settings.Camera.ResetForward, Settings.Camera.ResetUp);
					Owner.Invalidate();
					e.Handled = true;
					break;
				}
				#endregion
			}
		}

		/// <summary>Handle the scene</summary>
		private void HandleSceneRendering(object sender, EventArgs e)
		{
			// Add all objects to the window's drawlist
			foreach (var id in ContextIds)
				Window.AddObjects(id);

			// Add bounding boxes
			if (Settings.ShowBBoxes)
				foreach (var id in ContextIds)
					Window.AddObjects(id);

		}

		public class SavedView
		{
			public SavedView(string name, View3d.CameraControls camera)
			{
				Name         = name;
				C2W          = camera.O2W;
				FocusDist    = camera.FocusDist;
				AlignAxis    = camera.AlignAxis;
				Aspect       = camera.Aspect;
				FovX         = camera.FovX;
				FovY         = camera.FovY;
				Orthographic = camera.Orthographic;
			}

			public string Name         { get; set; }
			public m4x4   C2W          { get; private set; }
			public float  FocusDist    { get; private set; }
			public v4     AlignAxis    { get; private set; }
			public float  Aspect       { get; private set; }
			public float  FovX         { get; private set; }
			public float  FovY         { get; private set; }
			public bool   Orthographic { get; private set; }

			public void Apply(View3d.CameraControls camera)
			{
				camera.FocusDist    = FocusDist;
				camera.AlignAxis    = AlignAxis;
				camera.Aspect       = Aspect;
				camera.FovX         = FovX;
				camera.FovY         = FovY;
				camera.Orthographic = Orthographic;
				camera.O2W          = C2W;
				camera.Commit();
			}
		}
	}
}
