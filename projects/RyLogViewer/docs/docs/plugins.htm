<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml">
<!--#include file="..\inc\help_head.include.htm"-->
<body id="main_help">
	<!--#include file="..\inc\help_title_panel.include.htm"-->
	<!--#include file="..\inc\help_index_panel.include.htm"-->
	<div id="content_panel">
		<div class="title">Plugins</div>
		<div class="content">
			The functionality of RyLogViewer can be extended via plugins implemented as .NET class libraries. Included with RyLogViewer
			are the managed DLLs <i>RyLogViewer.Extensions.dll</i>, <i>Rylogic.Main.dll</i>, and <i>Rylogic.Core.dll</i>.
			To create a plugin, create a .NET class library project and reference these assemblies.
		</div>
		<div class="content">
			The RyLogViewer installation includes a directory called <i>plugins</i>. This directory is scanned at startup for .NET assemblies
			that contain plugin implementations. An example plugin is included that demonstrates this mechanism. The source code for the plugin
			is available in the <i>examples\ExamplePlugin</i> directory. The 'ReferenceSource' directory contains the source code for the
			<i>RyLogViewer.Extensions.dll</i> assembly. The code contains detailed comments that should aid in the creation of RyLogViewer plugins.
		</div> 
		<div id="data_source_plugin" class="section_title">Data Source Plugin</div>
		<div class="content">
			Data source plugins are probably the most useful way to extend the functionality of RyLogViewer. They allow log data to be collected
			from sources that the existing, built-in, data sources can't.<br />
			<br />
			An example custom data source is available in the <i>examples\ExamplePlugin</i> directory. Examine the <i>ExampleDataSource.cs</i>
			source file. A summary of the necessary steps is given below.
		</div>
		<ol class="major_list">
			<li>
				<div class="content">
					Create a .NET 4.7.1 class library project and add references to the assemblies <i>RyLogViewer.Extensions.dll</i>,
					<i>Rylogic.Main.dll</i>, and <i>Rylogic.Core.dll</i>. Note, a single class library may contain multiple plugins.
				</div>
			</li>
			<li>
				<div class="content">
					Create a class that implements the <i>ICustomLogDataSource</i> interface, and mark it with the <i>Rylogic.Common.Plugin</i>
					attribute. This attribute is what RyLogViewer uses to find the plugin implementation.
<pre class="cscode">
<code><span class="com">/// &lt;summary&gt;A data source that reads a file as hex formatted text&lt;/summary&gt;</span>
[Rylogic.Common.Plugin(<span class="key">typeof</span>(ICustomLogDataSource))]
<span class="key">public</span> <span class="key">class</span> ExampleDataSource :ICustomLogDataSource
</code></pre>
				</div>
			</li>
			<li>
				<div class="content">
					Implement the <span class="code">ShowConfigUI</span> method.
<pre class="cscode">
<code><span class="com">/// &lt;summary&gt;</span>
<span class="com">/// Displays a modal dialog that allows configuration of the data source.&lt;/summary&gt;</span>
<span class="key">public</span> LogDataSourceRunData ShowConfigUI(LogDataSourceConfig config)
</code></pre>
					This method is called first, when the user selects the plugin's menu item in the <i>File\Data Sources</i> menu.
					The <span class="code">config</span> parameter contains a reference to the main application window, and the history
					of output file paths that the user has provided for other data sources.<br />
					<br />
					The returned <span class="code">LogDataSourceRunData</span> object indicates to RyLogViewer:
					<ul class="minor_list">
						<li>
							<span class="code">DoLaunch</span> - True signals that this data source should start being used, i.e.
							the user did not want to cancel.
						</li>
						<li>
							<span class="code">OutputFilepath</span> - The file path that RyLogViewer should use to buffer data
							provided by this source. If null, then a temporary file will be used.
						</li>
						<li>
							<span class="code">AppendOutputFile</span> - The output file will be appended to, rather than overwritten.
							(Only applies if <i>OutputFilepath</i> is not null).
						</li>
						<li>
							<span class="code">HandleSelectionChanged</span> - This is a callback delegate that RyLogViewer calls whenever
							the user changes the selection within the log data.
						</li>
					</ul>
				</div>
			</li>
			<li>
				<div class="content">
					Implement the <span class="code">Start</span> method.
<pre class="cscode">
<code><span class="com">/// &lt;summary&gt;Begins the asynchronous process of collecting log data&lt;/summary&gt;</span>
<span class="key">public</span> <span class="key">void</span> Start()
</code></pre>
					This method is where the custom data source initialises its data provider. This could be opening files, connecting
					to external devices, or any other initialisation that is required.
				</div>
			</li>
			<li>
				<div class="content">
					Implement the <span class="code">BeginRead</span> and <span class="code">EndRead</span> methods.
<pre class="cscode">
<code><span class="com">/// &lt;summary&gt;Begin an asynchronous read of the log data.&lt;/summary&gt;</span>
<span class="key">public</span> IAsyncResult BeginRead(<span class="key">byte</span>[] buffer, <span class="key">int</span> offset, <span class="key">int</span> count, AsyncCallback callback, <span class="key">object</span> state)
</code></pre>
					These methods are the heart of the custom data source. They are modelled on the <span class="code">System.IO.Stream</span>
					asynchronous reading API. The <span class="code">BeginRead</span> method is called from the main thread and is expected
					to spawn a task on a background thread that reads data into the provided buffer. Since the time that this takes
					depends on the nature of the data source, a background thread is required.<br />
					<br />
					At some later time, RyLogViewer will call <span class="code">EndRead</span> (again on the main thread) to access any data
					that has been collected in the interim. This should end the background task and return the number of bytes added to the
					buffer provided in <span class="code">BeginRead</span>.<br />
				</div>
			</li>
		</ol>
		<div class="content">
			Build the class library and add the resulting assembly to the <i>plugins</i> directory in the RyLogViewer installation directory. On
			restarting RyLogViewer, the plugin should be detected and a menu item for it should appear in the <i>File->Data Sources</i> menu.
		</div>
		<div id="text_transforms" class="section_title">Text Transform Plugin</div>
		<div class="content">
			Text transform plugins allow custom transformation of captured text in the <a href="transform_editor.html">Transform Editor</a>.
			A simple example of a text transform plugin is available in the <i>examples\ExamplePlugin</i> directory.  Examine the
			<i>ExampleSubstitution.cs</i> source file as a working example. The steps for creating a text transform plugin are given below.
		</div>
		<ol class="major_list">
			<li>
				<div class="content">
					Create a .NET 4.7.1 class library project and add references to the assemblies <i>RyLogViewer.Extensions.dll</i>,
					<i>Rylogic.Main.dll</i>, and <i>Rylogic.Core.dll</i>. Note, a single class library may contain multiple plugins.
				</div>
			</li>
			<li>
				<div class="content">
					Create a class that implements the <i>ITransformSubstitution</i> interface, and mark it with the <i>Rylogic.Common.Plugin</i>
					attribute. This attribute is what RyLogViewer uses to find the plugin implementation.
<pre class="cscode">
<code><span class="com">/// &lt;summary&gt;>A text transform substitution, accessed via the Options-&gt;Transforms tab&lt;/summary&gt;</span>
[Rylogic.Common.Plugin(<span class="key">typeof</span>(ITransformSubstitution))]
<span class="key">public</span> <span class="key">class</span> ExampleSubstitution :ITransformSubstitution
</code></pre>
				</div>
			</li>
			<li>
				<div class="content">
					Much of the required implementation is simple and sufficiently explained by the comments in the file
					<i>ITransformSubstitution.cs</i> that is available in the <i>examples\ReferenceSource</i> directory. The main method to
					implement is the <span class="code">Result</span> method, which simply returns the transformed version of its string
					parameter.<br />
					<br />
					There is provision for persisting state associated with the text transform plugin in the main application settings.
					The following methods are associated with persisted state:
					<ul class="minor_list">
						<li>
							<span class="code">Configurable</span> - True if the text transform plugin is configurable.
						</li>
						<li>
							<span class="code">ShowConfigUI</span> - Called when the user clicks the pencil icon associated with the plugin.
							The plugin should show a modal dialog that allows the settings for the transform to be changed.
						</li>
						<li>
							<span class="code">ToXml</span> - Called to serialise state for the plugin that will be stored in the application settings.
						</li>
						<li>
							<span class="code">FromXml</span> - Apply the state restored from the application settings for this plugin.
						</li>
					</ul>
				</div>
			</li>
		</ol>
	</div>
</body>
</html>
