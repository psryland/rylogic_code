<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml">
	<!--#include file="..\inc\help_head.include.htm"-->
	<body id="main_help" onload="HighlightListItem(null)">
		<!--#include file="..\inc\help_title_panel.include.htm"-->
		<!--#include file="..\inc\help_index_panel.include.htm"-->
		<div id="content_panel">
			<div id="transform_editor">
				<div class="title">Transform Editor</div>
				<div class="content">
					The transform editor is a variation on the <a href="pattern_editor.html">pattern editor</a>.
					It uses patterns in the same way to match lines in the log data, but allows the matched text
					to be replaced with different text. Text transformations occur before
					<a href="options_filtering.html">filtering</a> and <a href="options_highlighting.html">highlighting</a>.
				</div>
				<div>
					<img class="centred" src="../img/transform_editor.png" alt="transform editor" usemap="#transform_editor_map" />
					<map id="transform_editor_map" name="transform_editor_map">
						<area shape="rect" coords="71,11,91,31" href="#pattern_type" alt="" title="" onclick="HighlightListItem('pattern_type')" />
					</map>
				</div>
				<div class="content">
					Select the numbered boxes in the image above to jump to the relevant description for each UI component.
				</div>
				<ol>
					<li class="child_list_elem">
						<div id="pattern_type">
							<div class="tag_label">Pattern Type</div>
							<div class="content">
								Use these radio buttons to select the type of pattern you plan to create. The
								versatility, but also complexity, of the patterns that can be created increases
								from left to right, with <a href="pattern_editor.html#pattern_substring">Substring</a>
								being the simplest and <a href="pattern_editor.html#pattern_regex">Regular Expression</a> being
								the most complex.
							</div>
						</div>
					</li>
					<li class="child_list_elem">
						<div id="pattern_field">
							<div class="tag_label">Pattern Field</div>
							<div class="content">
								This text field is where the pattern is entered. A green background will display when the pattern is
								syntactically valid, and a red background displays if the pattern contains an error. (Typically, only
								regular expressions will contain errors). How the pattern is interpreted depends on the pattern type,
								set by the radio buttons immediately above.
							</div>
						</div>
					</li>
					<li class="child_list_elem">
						<div id="pattern_replace">
							<div class="tag_label">Replace Field</div>
							<div class="content">
								The text in this field is a template for the replacement text. It can contain parts of the matched text
								(i.e. the capture groups) by specifying the tag name enclosed in curly braces; e.g. <i>{1} or {tag}</i>.
								The background of the replacement text field becomes red if there is an error, such as a reference to
								a capture group that doesn't exist.
							</div>
						</div>
					</li>
					<li class="child_list_elem">
						<div id="test_area">
							<div class="tag_label">Pattern Testing</div>
							<div class="content">
								This text field is an area used for testing a pattern against arbitrary text. The pattern is applied
								to each line in the test area and highlighting is used to show which parts of the text match the pattern
								and the capture groups within the pattern.
							</div>
						</div>
					</li>
					<li class="child_list_elem">
						<div id="test_area_replace">
							<div class="tag_label">Replacement Testing</div>
							<div class="content">
								The text in this read-only field shows the result of the transformation being applied to the text in
								the pattern testing field. Background colour shows the parts of the text that have been substituted.
							</div>
						</div>
					</li>
					<li class="child_list_elem">
						<div id="tag_table">
							<div class="tag_label">Capture Groups</div>
							<div class="content">
								Capture groups are labelled parts of wildcard and regular expression patterns. Capture groups are 
								automatically created in wildcard patterns whenever the <b>*</b> or <b>?</b> characters are used.
								In regular expressions they are created by enclosing parts of the pattern in brackets. This table
								shows the capture groups along with their associated tags, value, and how the value should be transformed.
								<ul class="minor_list">
									<li>Tag Column - The name of the capture group. The <i>Replace</i> field can insert text
									from a capture group by specifying the tag name in curly braces; e.g. <i>{1}</i> or <i>{tag}</i>.</li>
									<li>Value Column - This column shows the captured value when the pattern is applied to the testing text.</li>
									<li>Transform Column - Specifies how the captured value is transformed before it is substituted
									into the text transform. See <a href="#operations">Capture Group Transforms</a>.</li>
								</ul>
								
							</div>
						</div>
					</li>
				</ol>
	
				<div id="operations">
					<span class="title">Capture Group Transforms</span>
					<div class="content">
						Captured text can be used directly in the replacement text template, however, it is often useful to be able
						to make changes to the captured text first. This is where capture group transforms are used. The built-in operations
						include; converting the capture group text to upper or lower case, rearranging (<a href="#swizzle">Swizzle</a>) or
						swapping an error code for an error message (<a href="#code_lookup">Code Lookup</a>). The available transforms can
						also be extended using <a href="#transform_plugins">plugins</a>.
					</div>
				</div>
				<div id="code_lookup">
					<span class="tag_label">Code Lookup</span>
					<div class="content">
						<img class="right_inset" src="../img/code_lookup.png" alt="code lookup dialog"/>
						Code lookup uses a lookup table to convert from the value captured by the capture group to a substitute value. Typically,
						this would be error codes to error messages, but can be any mapping from one text value to another. To edit the lookup table
						click on the pencil icon in the right-most column. Lookup tables can be loaded and saved via the <i>Export</i> and
						<i>Import</i> buttons respectively.
					</div>
				</div>
				<div id="swizzle">
					<span class="tag_label">Swizzle</span>
					<div class="content">
						<img class="right_inset" src="../img/swizzle.png" alt="swizzle dialog" />
						A surprisingly powerful transform option is <i>swizzling</i>, where text can be rearranged in any number of ways. As shown
						in this example, blocks of characters are used to define a mapping from <i>Source</i> to <i>Output</i>. This mapping will
						be applied to the text in the capture group. Examples of where this might be useful include; mapping big-endian to/from
						little-endian hexadecimal values, reducing long text to a shorter summary, or changing the order of a sequence of values.
					</div>
				</div>
				<div id="transform_plugins">
					<div class="tag_label">Plugins</div>
					<div class="content">
						Since there are virtually limitless possible transforms that could be required, RyLogViewer supports user created
						transforms as plugins. These are custom transform operations implemented within a .NET class library. An example of a
						custom transform is provided with RyLogViewer called <i>Reverse</i> that reverses the order of the captured text.
						This is intended as an example rather than a feature. See <a href="plugins.html#text_transforms">Text Transform Plugins</a>
						for more detail.
					</div>
				</div>
			</div>
		</div>
	</body>
</html>
