General:
	Publishing:
		The 'deploy_rylogviewer.py' script in the main project should be a one-click deploy
		producing:
			P:\bin\RyLogViewer\... uncompressed, ready for use with all docs, plugins, etc
			P:\bin\RyLogViewer.zip - zip of 'P:\bin\rylogviewer\'
			P:\bin\RyLogViewerSetup.exe - one click installer

	Folders:
		.\art - contains art assets in paint.net format containing layers etc.
			Used to create the *.pngs for the documentation and project resourses
		.\docs - contains generated documentation files (.html) - Content, copied to output
		.\docs\img - image files - Content, copied to output
		see Documentation.

Documentation:
	Documentation is copied to the build output and is part of the release.
	Resources (which includes png and html files) are built into the assembly as embedded resources.

	- The documentation source files are in:
		.\documentation\docs - source files for documentation html files
		.\documentation\res - source files for embedded html resources
		.\documentation\inc - shared included html snippets
		These files are used to generate the html files in ./docs and ./Resources

	- *.htm should have properties:
		Build Action: PyScript
		Copy To Output: never
		Custom Tool: ..\..\script\HtmlExpand.py
		Custom Tool Namespace: ..\..\..\docs\ or ..\..\..\Resources\
		The PyScript build action is made available in the project by editing the csproj and adding
		"<Import Project="$(ProjectDir)..\..\build\props\python_script.targets" />".
		The PyScript build action passes the file to py.exe as follows:
			py.exe <Custom Tool> <file> <Custom Tool Namespace>
		So 'Custom Tool' should be the script to call
		'Custom Tool Namespace' should contain additional arguments

	- *.htm files contain template fields such as: <!--#include file=""-->.
		The HtmlExpand.py script creates an expanded version of the file with the .html extension.

	- The reason for this system is that it allows simple html code sharing without dependencies on anything
		other than python. I used a custom build tool called 'Rylogic.CustomTool.HtmlExpander' for a while
		but that requires installation on the local PC which means I can't easily build the project on someone
		else's PC. Another option could have been a pre build step that calls a BuildDocs.py script.

	- img/*.png files should be set to "Content" and "Copy If Newer"
	- The output folder could contain a '.\docs\' folder with all the documentation needed.

Resources:
	Resources include: *.png, *.html files (used in ToTD, and quick ref windows)
	- png files do not need to be included in the project\Resources\ folder, just in the Resources.resx file only.
	- *.htm files should use the Custom Build Tool 'HtmlExpander', but not *.include.htm files.
	- The resulting html files should be added to Resources.resx under 'Files'.
	- If a png is used in the docs as well, edit the Resources.resx file and reference it directly from the ..\docs\ folder.

HtmlExpander:
	HtmlExpander is a compile time tool that works basically like server side includes,
	it finds and text-replaces tokens such as:
	   '<!--#include file=".\auto_refresh.include.htm"-->'.

	- The resulting *.html files can contain template substitution fields [LikeThis]. These
	are replaced at run time with other content (ToTD, etc). This is done by the Rylogic.dll
	object 'TemplateReplacer'

Licences:
	- How licences work
	- How to generate them

Plugins:
	- The interfaces
	- The RyLogViewer.Extensions assembly


Installer:
	- Add the "Microsoft Visual Studio Installer Projects" extension for VS2013
	- Open the 'installer.vdproj' in the ".\installer\" directory




TODOs:
	WebSite:
		- Design a page for selling RyLogViewer
		- Work out how to generate licence keys via the web site
			(call C# code from php?)
		- Add a paypal "Buy Now" button
		- Work out how to add purchases to the MySQL db
		- Get Check For Updates working with new site

	RyLogViewer:
		- Finish main documentation
		- Check all ToTDs
		- Fill in the "Free Edition" popup window
		- Review the licence generation to include customer name and email in the key
		- Update the 'Visit Store' menu
		- Get automatic version update working
		- Review bitbucket tickets
