//***********************************************************************
// Example Physics Scene
//***********************************************************************
//
//	Object Types:
//		*RandomPosition { min_x min_y min_z  max_x max_y max_z }
//		*RandomDirection
//		*RandomTransform { x y z radius }
//		*RandomColour
//
//  // Definition of a model
//	*Model
//	{
//		*Name "my_model"
//		*Box
//		{
//			dim_x dim_y dim_z or *Random { minx miny minz maxx maxy maxz }
//			*Transform {}
//			*Position { x y z }
//			*Colour { aarrggbb }
//		}
//		*Cylinder
//		{
//			height radius  or *Random { minh minr maxh maxr }
//			*Transform {}
//			*Position { x y z }
//			*Colour { aarrggbb }
//		}
//		*Sphere
//		{
//			radius or *Random { minr maxr }
//			*Transform {}
//			*Position { x y z }
//			*Colour { aarrggbb }
//		}
//		*Polytope
//		{
//			x y z  x y z  x y z ...  or *Random { count minx miny minz maxx maxy maxz }
//			*Transform {}
//			*Position { x y z }
//			*Colour { aarrggbb }
//		}
//		*Transform {}
//		*Position { x y z }
//	}
//
//	*Deformable
//	{
//		*Name "obj"
//		*Colour {aarrggbb}
//		*Transform {}
//		*Position { x y z }
//		*SpringConstant	k
//		*DampingConstant c
//		*SprainPercentage s
//		*Tolerance tol
//		*Verts { x y z  x y z  x y z ...  } // these two vert buffers are concatenated, 
//		*Anchors { x y z  x y z ... }		//  indices should treat them as one array
//		*Springs { i0 i1  i2 i3  i4 i5  ... }
//		*Beams { i0 i1  i2 i3 i4 i5 ... }
//		*Tetras { i0 i1 i2 i3  i4 i5 i6 i7 ... }
//	}
//
//	// Static object
//	*StaticObject
//	{
//		*Name "obj"
//		*Position { x y z }
//		*Transform {}
//		*Colour { aarrggbb }
//		*Model {} or *ModelByName {"name"}
//	}
//
//	// Dynamic objects
//	*PhysicsObject
//  {
//		*Name "obj"
//		*Model {} or *ModelByName {"name"} or *Deformable {} or *DeformableByName {"name"}
//		*Transform {}		
//		*Position { x y z }
//		*EulerPos {pitch yaw roll x y z}
//		*Gravity { x y z }
//		*Velocity { dx dy dz }
//		*AngVelocity { dx dy dz }
//		*Colour { aarrggbb }
//		*ByName //-stops this object being created except when it is referenced by name
//		*Stationary	// resets the physics object position to the initial position each frame
//   }
//
//	// Multibody physics object
//	*Multibody
//	{
//		*Name "obj"
//		*PhysicsObject {} or *PhysicsObjectByName {}
//		*Transform {}		
//		*Position { x y z }
//		*Velocity { dx dy dz }
//		*AngVelocity { dx dy dz }
//		*Gravity { x y z }
//		*Colour { aarrggbb }
//		*ParentAttach { px py pz ax ay az zx zy zz } // point, axis, zero (in parent space)
//		*Attach { px py pz ax ay az zx zy zz } // point, axis, zero (in joint space)
//		*JointType 0 or 1 or 2 // 0=Floating, 1=Revolute, 2=Prismatic
//		*JointPos x
//		*JointVel dx
//		*JointLimits lower upper
//		*JointRestitution e
//		*Joint {} // - exactly the same as multibody
//		*Joint {}
//		*Joint {}
//		...
//	}
//
//	// Non-physical objects
//	*Gfx
//	{
//		"ldr string"
//	}
//
//	// Terrain source file
//	*Terrain
//	{
//		"terrain source file.x"
//	}
//
//	*GravityField
//	{
//		*Directional
//		*Strength 10
//		*Direction { 0 -1 0 } or *RandomDirection
//	or
//		*Radial
//		*Strength 10
//		*Position {x y z} or *RandomPosition  {min_x min_y min_z  max_x max_y max_z}
//	}
//
//	*Drag
//	{
//		0.01	// Percentage velocity to remove 
//	}
//
//	*Material
//	{
//		*Density				1.0
//		*StaticFriction			0.5
//		*DynamicFriction		0.5
//		*RollingFriction		0.5
//		*Elasticity				1.0
//		*TangentialElasticity	1.0
//		*TortionalElasticity	0.0
//	}
