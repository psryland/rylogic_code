<UserControl
	x:Class="Rylogic.Gui.WPF.PatternEditor"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:common="clr-namespace:Rylogic.Common;assembly=Rylogic.Core"
	xmlns:gui2="clr-namespace:Rylogic.Gui.WPF"
	xmlns:conv="clr-namespace:Rylogic.Gui.WPF.Converters"
	mc:Ignorable="d" 
	d:DesignWidth="450"
	d:DesignHeight="250"
	>
	<UserControl.Resources>
		<ResourceDictionary>
			<BitmapImage x:Key="edit_add" UriSource="/Rylogic.Gui.WPF;component/res/edit_add.png"/>
			<BitmapImage x:Key="edit_save" UriSource="/Rylogic.Gui.WPF;component/res/edit_save.png"/>

			<Style x:Key="PatternTextBoxStyle" TargetType="{x:Type TextBox}">
				<Style.Triggers>
					<DataTrigger Binding="{Binding PatternValid}" Value="True">
						<Setter Property="Background" Value="{x:Static Brushes.LightGreen}"/>
					</DataTrigger>
					<DataTrigger Binding="{Binding PatternValid}" Value="False">
						<Setter Property="Background" Value="{x:Static Brushes.LightSalmon}"/>
					</DataTrigger>
				</Style.Triggers>
			</Style>

		</ResourceDictionary>
	</UserControl.Resources>

	<Grid
		Name="m_root"
		Background="{x:Static SystemColors.ControlBrush}"
		MinWidth="376"
		MinHeight="120"
		>
		<Grid.RowDefinitions>
			<RowDefinition Height="auto"/>
			<RowDefinition/>
		</Grid.RowDefinitions>
		
		<!-- Top panel -->
		<Grid
			Grid.Row="0"
			>
			<Grid.RowDefinitions>
				<RowDefinition Height="auto"/>
				<RowDefinition Height="auto"/>
				<RowDefinition/>
			</Grid.RowDefinitions>
			<Grid.ColumnDefinitions>
				<ColumnDefinition/>
				<ColumnDefinition Width="auto"/>
			</Grid.ColumnDefinitions>
			
			<!-- Pattern type -->
			<StackPanel
				Grid.Row="0"
				Orientation="Horizontal"
				>
				<TextBlock
					Text="Type:"
					TextAlignment="Right"
					VerticalAlignment="Center"
					Padding="0,0,2,2"
					FontSize="11"
					MinWidth="50"
					Margin="2"
					/>
				<RadioButton
					Content="Substring"
					IsChecked="{Binding Pattern.PatnType, Converter={conv:IsEqual}, ConverterParameter={x:Static common:EPattern.Substring}}"
					VerticalAlignment="Center" Margin="2" FontSize="11" TabIndex="2"/>
				<RadioButton
					Content="Wildcard"
					IsChecked="{Binding Pattern.PatnType, Converter={conv:IsEqual}, ConverterParameter={x:Static common:EPattern.Wildcard}}"
					VerticalAlignment="Center" Margin="2" FontSize="11" TabIndex="3"/>
				<RadioButton
					Content="Regular Expression"
					IsChecked="{Binding Pattern.PatnType, Converter={conv:IsEqual}, ConverterParameter={x:Static common:EPattern.RegularExpression}}"
					VerticalAlignment="Center" Margin="2" FontSize="11" TabIndex="4"/>
			</StackPanel>

			<!-- Pattern field -->
			<DockPanel
				Grid.Row="1"
				LastChildFill="True"
				>
				<!-- Label -->
				<TextBlock
					DockPanel.Dock="Left"
					Text="Pattern: "
					TextAlignment="Right"
					VerticalAlignment="Center"
					Padding="0,0,2,2"
					FontSize="11"
					MinWidth="50"
					Margin="2"
					/>
				
				<!-- Help button -->
				<Button
					DockPanel.Dock="Right"
					Content="?"
					Width="18" Height="18"
					VerticalAlignment="Center" Padding="0,0,0,3" TabIndex="7"
					Command="{Binding ShowHelp}"
					/>

				<!-- Pattern expression -->
				<TextBox
					Text="{Binding Pattern.Expr, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Style="{StaticResource PatternTextBoxStyle}"
					HorizontalAlignment="Stretch"
					VerticalAlignment="Center"
					Margin="2"
					TabIndex="1"
					/>
			</DockPanel>

			<!-- Flags -->
			<DockPanel
				Grid.Row="2"
				Grid.ColumnSpan="2"
				>
				<!-- Label -->
				<TextBlock
					DockPanel.Dock="Left"
					Text="Flags: "
					TextAlignment="Right"
					VerticalAlignment="Center"
					Padding="0,0,2,2"
					FontSize="11"
					MinWidth="50"
					Margin="2"
					/>

				<!-- Ignore case -->
				<CheckBox
					DockPanel.Dock="Left"
					Content="Ignore Case" 
					IsChecked="{Binding Pattern.IgnoreCase, Mode=TwoWay}"
					VerticalAlignment="Center"
					FontSize="11"
					TabIndex="5"
					Margin="2"
					/>

				<!-- Whole line -->
				<CheckBox
					DockPanel.Dock="Left"
					Content="Whole Line"
					ToolTip="The match must span all of the text to be considered a match"
					IsChecked="{Binding Pattern.WholeLine, Mode=TwoWay}"
					VerticalAlignment="Center"
					FontSize="11"
					TabIndex="6"
					Margin="2"
					/>

				<!-- Multi line -->
				<CheckBox
					DockPanel.Dock="Left"
					Content="Single Line"
					ToolTip="Check to have the dot(.) character match new line characters"
					IsChecked="{Binding Pattern.SingleLine, Mode=TwoWay}"
					VerticalAlignment="Center"
					FontSize="11"
					TabIndex="6"
					Margin="2"
					/>

				<!-- Invert match -->
				<CheckBox
					DockPanel.Dock="Left"
					Content="Invert Match"
					IsChecked="{Binding Pattern.Invert, Mode=TwoWay}"
					VerticalAlignment="Center"
					Margin="2"
					FontSize="11"
					TabIndex="6"
					/>

				<!-- Capture groups label -->
				<TextBlock
					DockPanel.Dock="Right"
					Text="Capture Groups"
					TextAlignment="Right"
					VerticalAlignment="Bottom"
					Padding="0,0,2,0"
					FontSize="10"
					MinWidth="50"
					Margin="2"
					/>
			</DockPanel>

			<!-- Commit button -->
			<Button
				Grid.Row="0"
				Grid.RowSpan="2"
				Grid.Column="1"
				Command="{Binding CommitChanges}"
				IsEnabled="{Binding PatternValid}"
				Width="48"
				Height="48"
				Margin="2"
				TabIndex="8"
				>
				<Image>
					<Image.Style>
						<Style TargetType="{x:Type Image}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding HasUnsavedChanges}" Value="True">
									<Setter Property="Source" Value="{StaticResource edit_save}"/>
								</DataTrigger>
								<DataTrigger Binding="{Binding HasUnsavedChanges}" Value="False">
									<Setter Property="Source" Value="{StaticResource edit_add}"/>
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</Image.Style>
				</Image>
			</Button>
		</Grid>

		<!-- Test text and groups panel -->
		<Grid
			Grid.Row="1"
			>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="3*" MinWidth="10"/>
				<ColumnDefinition Width="auto"/>
				<ColumnDefinition Width="1*" MinWidth="10"/>
			</Grid.ColumnDefinitions>

			<!-- Test text -->
			<RichTextBox
				Grid.Column="0"
				ToolTip="An area for testing your pattern.&#x0a;Add any text you like here"
				Background="{x:Static SystemColors.WindowBrush}"
				SelectionChanged="{gui2:MethodBinding UpdateCaptureGroups}"
				AcceptsReturn="True"
				IsHitTestVisible="True"
				BorderThickness="1"
				Margin="2,2,0,2"
				TabIndex="9"
				Name="m_rtb"
				/>

			<!-- Capture groups -->
			<DataGrid
				Grid.Column="2"
				ItemsSource="{Binding CaptureGroups, Mode=OneWay}"
				Background="{x:Static SystemColors.WindowBrush}"
				AutoGenerateColumns="False"
				RowHeaderWidth="0"
				BorderThickness="1"
				BorderBrush="{x:Static SystemColors.ActiveBorderBrush}"
				GridLinesVisibility="None"
				IsReadOnly="True"
				Margin="0,2,2,2"
				FontSize="11"
				ToolTip="Displays the capture groups and their values for the current&#x0a;line in the test text area."
				>
				<DataGrid.Columns>
					<DataGridTextColumn
						Header="Tag"
						Binding="{Binding Tag}"
						CanUserResize="True"
						Width="30*"
						/>
					<DataGridTextColumn
						Header="Value"
						Binding="{Binding Value}"
						CanUserResize="True"
						Width="70*"
						/>
				</DataGrid.Columns>
			</DataGrid>
			
			<!-- Splitter -->
			<GridSplitter
				Grid.Column="1"
				Width="3"
				HorizontalAlignment="Center"
				VerticalAlignment="Stretch"
				ShowsPreview="True"
				/>
		</Grid>
	</Grid>
</UserControl>