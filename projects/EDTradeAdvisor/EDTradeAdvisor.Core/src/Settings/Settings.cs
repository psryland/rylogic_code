using System;
using Rylogic.Common;
using Rylogic.Utility;

namespace EDTradeAdvisor
{
	public class Settings : SettingsBase<Settings>
	{
		/// <summary>Singleton access</summary>
		public static Settings Instance
		{
			get
			{
				if (m_settings == null)
				{
					// Ensure the app data directory exists
					System.IO.Directory.CreateDirectory(Util.ResolveUserDocumentsPath());
					m_settings = new Settings(Util.ResolveUserDocumentsPath("Rylogic", "EDTradeAdvisor", "settings.xml"));
				}
				return m_settings;
			}
		}
		private static Settings m_settings;

		public Settings()
		{
			DataPath = Util.ResolveUserDocumentsPath("Rylogic", "EDTradeAdvisor", "Data");
			EDMCDataPath = string.Empty;
			DataAge = TimeSpan.FromHours(1);
			RouteCount = 10;
			OriginSystemID = null;
			OriginStationID = null;
			DestSystemID = null;
			DestStationID = null;
			AnyDestination = true;
			MaxTradeRouteDistance = null;
			CargoCapacity = 4;
			AvailableCredits = 1000;
			MaxJumpRange = 8;
			MaxStationDistance = null;
			RequiredPadSize = ELandingPadSize.Small;
			IgnorePlanetBases = false;
			IgnorePermitSystems = false;

			AutoSaveOnChanges = true;
		}
		public Settings(Settings rhs)
			: base(rhs)
		{ }
		private Settings(string filepath, ESettingsLoadFlags flags = ESettingsLoadFlags.None)
			: base(filepath, flags)
		{
			AutoSaveOnChanges = true;
		}

		/// <summary>The directory containing data generated by this tool</summary>
		public string DataPath
		{
			get => get<string>(nameof(DataPath));
			set => set(nameof(DataPath), value);
		}

		/// <summary>The directory containing data generated by EDMC</summary>
		public string EDMCDataPath
		{
			get => get<string>(nameof(EDMCDataPath));
			set => set(nameof(EDMCDataPath), value);
		}

		/// <summary>How old data is allowed to get before updating it</summary>
		public TimeSpan DataAge
		{
			get => get<TimeSpan>(nameof(DataAge));
			set => set(nameof(DataAge), value);
		}

		/// <summary>The top 'N' routes to keep</summary>
		public int RouteCount
		{
			get => get<int>(nameof(RouteCount));
			set => set(nameof(RouteCount), value);
		}

		/// <summary>Origin system</summary>
		public long? OriginSystemID
		{
			get => get<long?>(nameof(OriginSystemID));
			set => set(nameof(OriginSystemID), value);
		}

		/// <summary>Origin station</summary>
		public long? OriginStationID
		{
			get => get<long?>(nameof(OriginStationID));
			set => set(nameof(OriginStationID), value);
		}

		/// <summary>Destination system</summary>
		public long? DestSystemID
		{
			get => get<long?>(nameof(DestSystemID));
			set => set(nameof(DestSystemID), value);
		}

		/// <summary>Destination station</summary>
		public long? DestStationID
		{
			get => get<long?>(nameof(DestStationID));
			set => set(nameof(DestStationID), value);
		}

		/// <summary>True to ignore the destination settings</summary>
		public bool AnyDestination
		{
			get => get<bool>(nameof(AnyDestination));
			set => set(nameof(AnyDestination), value);
		}

		/// <summary>Limits on how far away to search. Null means unlimited</summary>
		public long? MaxTradeRouteDistance
		{
			get => get<long?>(nameof(MaxTradeRouteDistance));
			set => set(nameof(MaxTradeRouteDistance), value);
		}

		/// <summary>The ship cargo space</summary>
		public int CargoCapacity
		{
			get => get<int>(nameof(CargoCapacity));
			set => set(nameof(CargoCapacity), value);
		}

		/// <summary>The credits available</summary>
		public long AvailableCredits
		{
			get => get<long>(nameof(AvailableCredits));
			set => set(nameof(AvailableCredits), value);
		}

		/// <summary>The credits available</summary>
		public long MaxJumpRange
		{
			get => get<long>(nameof(MaxJumpRange));
			set => set(nameof(MaxJumpRange), value);
		}

		/// <summary>The maximum distance from the system origin to consider. Null means any distance</summary>
		public long? MaxStationDistance
		{
			get => get<long?>(nameof(MaxStationDistance));
			set => set(nameof(MaxStationDistance), value);
		}

		/// <summary>The required landing pad size</summary>
		public ELandingPadSize RequiredPadSize
		{
			get => get<ELandingPadSize>(nameof(RequiredPadSize));
			set => set(nameof(RequiredPadSize), value);
		}

		/// <summary>Exclude planet bases</summary>
		public bool IgnorePlanetBases
		{
			get => get<bool>(nameof(IgnorePlanetBases));
			set => set(nameof(IgnorePlanetBases), value);
		}

		/// <summary>Exclude systems that require a permit</summary>
		public bool IgnorePermitSystems
		{
			get => get<bool>(nameof(IgnorePermitSystems));
			set => set(nameof(IgnorePermitSystems), value);
		}
	}
}
