General:
	Folders:
		.\art - contains art assets in paint.net format containing layers etc.
			Used to create the *.pngs for the documentation and project resources
		.\docs
			\docs - source user documentation files (.htm)
			\img - image files for the user documentation
			\inc - shared html fragments
			\res - source documentation used for embedded resources (.htm)
		.\examples - Source data used in the first run tutorial
		.\installer - WIX script for creating the installer .msi file
		.\plugins - 
			\ExamplePlugin - A demo plugin used to test and illustrate the plugin system
		.\Properties - Assembly version
		.\res - Embedded resources
		.\src - Source code
		.\testing - helpers for testing log data sources

	Publishing:
		The 'deploy_rylogviewer.py' script in the main project should be a one-click deploy


Documentation:
	Documentation uses html. The '*.htm' files in the './docs' directory are source code for
	the final '*.html' files. The html files are generated using HtmlExpand.py.
	.\docs
		\docs - These are the files that go into the user documentation
		\res - These are files that are embedded in to the binary
		\img - These are images used by the html files in either \docs\docs or \docs\res
		\inc - These are include files that are substituted into 'htm' files in \docs\docs or \docs\res

	'htm' files contain template fields such as: <!--#include file=""-->.
	The HtmlExpand.py script creates an expanded version of the file with the .html extension.

	The 'htm' files in the '\docs\docs\' folder are exported by the 'post_build.py' script. They are
	generated directly in the target directory. The 'post_build.py' script also copies the necessary
	images to the target directory

	The 'htm' files in the '\docs\res\' folder are exported by a Build Action that creates the 'html'
	files in the '.\res\' folder. These files are then embedded as resources via the Resources.resx
	The '\docs\res\' files should have:
	 	Build Action: PyScript
		Copy To Output: Do Not Copy
		Custom Tool: ..\..\script\HtmlExpand.py
		Custom Tool Namespace: ..\..\res\

	The PyScript build action is made available in the project by editing the 'csproj' and adding
	"<Import Project="$(ProjectDir)..\..\build\props\python_script.targets" />".

	The PyScript build action passes the file to py.exe as follows:
		py.exe <Custom Tool> <file> <Custom Tool Namespace>
	So 'Custom Tool' should be the script to call 'Custom Tool Namespace' should contain additional arguments

	The reason for this system is that it allows simple html code sharing without dependencies on anything
	other than Python. I used a custom build tool called 'Rylogic.CustomTool.HtmlExpander' for a while
	but that requires installation on the local PC which means I can't easily build the project on someone
	else's PC. Another option could have been a pre build step that calls a BuildDocs.py script.

	Note: the 'Run Custom Tool' doesn't seem to work on selected files, but does work when the project is built.

Resources:
	Resources include: *.png, *.html files (used in ToTD, and quick ref windows)
	- *.htm files should use the Custom Build Tool 'HtmlExpander', but not *.include.htm files.
	- The resulting html files should be added to Resources.resx under 'Files'.
	- If a png is used in the docs as well, edit the Resources.resx file and reference it directly from the ..\docs\ folder.

Installer:



Licences:
	- How licences work
	- How to generate them

Plugins:
	- The interfaces
	- The RyLogViewer.Extensions assembly




TODOs:
	WebSite:
		- Design a page for selling RyLogViewer
		- Work out how to generate licence keys via the web site
			(call C# code from php?)
		- Add a paypal "Buy Now" button
		- Work out how to add purchases to the MySQL db
		- Get Check For Updates working with new site

	RyLogViewer:
		- Finish main documentation
		- Check all ToTDs
		- Fill in the "Free Edition" popup window
		- Review the licence generation to include customer name and email in the key
		- Update the 'Visit Store' menu
		- Get automatic version update working
		- Review bitbucket tickets
