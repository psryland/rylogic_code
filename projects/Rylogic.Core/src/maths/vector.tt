<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
//***************************************************
// Vector
//  Copyright (c) Rylogic Ltd 2008
//***************************************************
<#
	// The real types that vector classes are generated for
	var types = new[]
	{
		new VecType("Vec2f", "float" , 2, "x", "y"),
		new VecType("Vec2d", "double", 2, "x", "y"),
		new VecType("Vec4f", "float" , 3, "x", "y", "z", "w"),
		new VecType("Vec4d", "double", 3, "x", "y", "z", "w"),
	};
#>
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace Rylogic.Maths
{
<#foreach (var ty in types){#>
	#region <#= ty.m_name #>

	[Serializable]
	[StructLayout(LayoutKind.Sequential)]
	[DebuggerDisplay("<#=ty.cmps(" ","{{cmp}}")#> // Len={Length})")]
	public struct <#=ty.m_name#>
	{
		public <#=ty.m_real#> <#=ty.cmps(", ","{cmp}")#>;

		// Constructors
		public <#=ty.m_name#>(<#=ty.cmps(", ","{type} {cmp}_")#>)
		{
			<#=ty.cmps("\r\n\t\t\t","{cmp} = {cmp}_;")#>
		}

		// Properties
		public <#=ty.m_real#> LengthSq
		{
			get { return <#=ty.cmps(" + ","{cmp}*{cmp}")#>; }
		}
		public <#=ty.m_real#> Length
		{
			get { return (<#=ty.m_real#>)Math.Sqrt(LengthSq); }
		}

		// Functions
		public static <#=ty.m_real#> Dot(<#=ty.m_name#> lhs, <#=ty.m_name#> rhs)
		{
			return <#=ty.cmps(" + ","lhs.{cmp}*rhs.{cmp}")#>;
		}
	}

	#endregion

<#}#>
}

#if PR_UNITTESTS
namespace pr.unittests
{
<#foreach (var ty in types){#>
	[TestFixture] public class UnitTestVector_<#=ty.m_name#>
	{
		[Test] public void Basic()
		{
			var A = new int[] {1, 2, 3, 4};
			var a = new <#=ty.m_name#>(<#=ty.cmps(",","A[{idx}]")#>);
			<#=ty.cmps("\r\n\t\t\t","Assert.True(a.{cmp} == A[{idx}]);")#>
		}
	}
<#}#>
}
#endif

<#+ 
 	// Vector types
	public struct VecType
	{
		public string m_name;
		public string m_real;
		public int m_count;
		public string[] m_cmps;

		public VecType(string name, string real, int count, params string[] cmps)
		{
			m_name = name;
			m_real = real;
			m_count = count;
			m_cmps = cmps;
		}

		// Formatted string containing component names. E.g. cmps("{0}",", {type} {cmp}")
		public string cmps(string sep, params string[] fmt)
		{
			string s = "";
			for (int i = 0; i != m_cmps.Length; ++i)
			{
				if (i != 0) s += sep;
				var f = fmt[Math.Min(i, fmt.Length-1)];
				f = f.Replace("{type}", m_real);
				f = f.Replace("{idx}", i.ToString());
				f = f.Replace("{cmp}", m_cmps[i]);
				s += f;
			}
			return s;
		}
	}
#>