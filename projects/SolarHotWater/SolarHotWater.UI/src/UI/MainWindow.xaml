<Window
	x:Class="SolarHotWater.UI.MainWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:conv="clr-namespace:Rylogic.Gui.WPF.Converters;assembly=Rylogic.Gui.WPF"
	xmlns:gui="clr-namespace:Rylogic.Gui.WPF;assembly=Rylogic.Gui.WPF"
	xmlns:view3d="clr-namespace:Rylogic.Gui.WPF;assembly=Rylogic.View3d"
	xmlns:tb="http://www.hardcodet.net/taskbar"
	mc:Ignorable="d"
	Title="Solar Hot Water"
	Icon="{StaticResource coffee}"
	ResizeMode="CanResizeWithGrip"
	MinWidth="380"
	MinHeight="300"
	Height="600"
	Width="580"
	>
	<Window.Resources>
		<ResourceDictionary>

			<!-- Window Context -->
			<gui:DataContextRef x:Key="WindowCtx" Ctx="{Binding .}"/>

			<!-- Notification Icon Menu -->
			<ContextMenu
				x:Key="NotificationCMenu"
				>
				<MenuItem
					Header="Show Monitor"
					FontWeight="Bold"
					Command="{Binding ShowOwner}"
					/>
				<Separator/>
				<MenuItem
					Header="Exit"
					Command="{Binding Owner.CloseApp}"
					/>
			</ContextMenu>
		</ResourceDictionary>
	</Window.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>

		<!-- Main Body -->
		<Grid
			Grid.Row="0"
			>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
				<RowDefinition Height="Auto"/>
			</Grid.RowDefinitions>

			<!-- Main controls -->
			<Grid
				Grid.Row="0"
				Margin="8,1,8,1"
				>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="4*"/>
					<ColumnDefinition Width="3*"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>

				<!-- Consumer list -->
				<GroupBox
					Grid.Column="0"
					Header="Consumers"
					>
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>

						<!-- Consumer list -->
						<DataGrid
							Grid.Row="0"
							ItemsSource="{Binding Consumers}"
							SelectedItem="{Binding SelectedConsumer}"
							AutoGenerateColumns="False"
							CanUserAddRows="False"
							CanUserDeleteRows="False"
							CanUserSortColumns="False"
							HeadersVisibility="All"
							CanUserResizeColumns="True"
							GridLinesVisibility="None"
							gui:DataGrid_.ReorderRowsWithDragDrop="True"
							gui:DataGrid_.RowsReordered="HandleConsumersReordered"
							HorizontalScrollBarVisibility="Disabled"
							RowHeaderWidth="12"
							Background="White"
							IsReadOnly="True"
							>
							<DataGrid.Resources>
								<Style x:Key="StyleCellBase" TargetType="DataGridCell">
									<Setter Property="Foreground" Value="Black"/>
									<Setter Property="Background" Value="{Binding Colour, Converter={conv:ColourToBrush}, ConverterParameter='lerp: FFFFFFFF 0.7'}"/>
									<Setter Property="Template">
										<Setter.Value>
											<ControlTemplate TargetType="DataGridCell">
												<Grid Background="{TemplateBinding Background}">
													<ContentPresenter VerticalAlignment="Center"/>
												</Grid>
											</ControlTemplate>
										</Setter.Value>
									</Setter>
									<Style.Triggers>
										<Trigger Property="IsSelected" Value="True">
											<Setter Property="Background" Value="{Binding Colour, Converter={conv:ColourToBrush}, ConverterParameter='lerp: FF000000 0.1'}"/>
											<Setter Property="Foreground" Value="Black"/>
										</Trigger>
									</Style.Triggers>
									</Style>
									<Style x:Key="StyleCellLeft" TargetType="DataGridCell" BasedOn="{StaticResource StyleCellBase}">
										<Setter Property="TextBlock.TextAlignment" Value="Left"/>
									</Style>
									<Style x:Key="StyleCellCentred" TargetType="DataGridCell" BasedOn="{StaticResource StyleCellBase}">
										<Setter Property="TextBlock.TextAlignment" Value="Center"/>
									</Style>
							</DataGrid.Resources>
							<DataGrid.Columns>
								<DataGridTextColumn
									Header="Consumer"
									Binding="{Binding Name}"
									CellStyle="{StaticResource StyleCellLeft}"
									Width="3*"
									/>
								<DataGridTextColumn
									Header="Power"
									Binding="{Binding Power, StringFormat={}{0:N3}}"
									CellStyle="{StaticResource StyleCellCentred}"
									Width="1*"
									/>
								<DataGridTemplateColumn
									Header="On"
									CellStyle="{StaticResource StyleCellCentred}"
									Width="1*"
									>
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<StackPanel
												Orientation="Horizontal"
												>
												<Image
													Source="{Binding On, Converter={conv:BoolSelect}, ConverterParameter='light_bulb_on|light_bulb_off'}"
													RenderOptions.BitmapScalingMode="Fant"
													Height="22"
													/>
												<gui:RadialProgressControl
													Visibility="{Binding StateChangePending, Converter={conv:NullToCollapsed}, FallbackValue=Collapsed}"
													Value="{Binding StateChangeFrac, Mode=OneWay}"
													Minimum="0.0"
													Maximum="1.0"
													ArcWidth="50"
													MaxHeight="22"
													/>
											</StackPanel>
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
								</DataGridTemplateColumn>
								<DataGridTemplateColumn
									Header="Mode"
									CellStyle="{StaticResource StyleCellCentred}"
									Width="1*"
									>
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<Image
												Source="{Binding Settings.ControlMode, Converter={conv:EnumSelect}, ConverterParameter='Disabled:reject|Observed:inspect|Controlled:accept'}"
												RenderOptions.BitmapScalingMode="Fant"
												Height="22"
												/>
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
								</DataGridTemplateColumn>
							</DataGrid.Columns>
						</DataGrid>
						
						<!-- Add/Remove consumer buttons -->
						<StackPanel
							Grid.Row="1"
							Orientation="Horizontal"
							HorizontalAlignment="Right"
							>
							<!-- Add New Consumer -->
							<Button
								Grid.Column="1"
								Command="{Binding AddNewConsumer}"
								ToolTip="Add another consumer"
								Background="Transparent"
								BorderThickness="0"
								Margin="3"
								>
								<Image
									Source="{StaticResource add}"
									RenderOptions.BitmapScalingMode="Fant"
									Height="20"
									/>
							</Button>

							<!-- Remove Consumer -->
							<Button
								Grid.Column="2"
								Command="{Binding RemoveConsumer}"
								IsEnabled="{Binding SelectedConsumer, Converter={conv:NotNull}}"
								Background="Transparent"
								BorderThickness="0"
								Margin="3"
								>
								<Image
									Source="{StaticResource subtract}"
									RenderOptions.BitmapScalingMode="Fant"
									Height="20"
									/>
							</Button>
						</StackPanel>
					</Grid>
				</GroupBox>
				
				<!-- Login, Solar, and Reserved -->
				<StackPanel
					Grid.Column="1"
					Orientation="Vertical"
					>
					<!-- Login -->
					<GroupBox
						Grid.Column="1"
						Header="eWeLink:"
						>
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>

							<!-- Email -->
							<TextBlock
								Grid.Row="0"
								Grid.Column="0"
								VerticalAlignment="Center"
								Text="Email: "
								/>
							<TextBox
								Grid.Row="0"
								Grid.Column="1"
								Text="{Binding Settings.Username, UpdateSourceTrigger=PropertyChanged}"
								IsEnabled="{Binding IsLoggedOn, Converter={conv:Not}}"
								VerticalAlignment="Center"
								Margin="3"
								/>

							<!-- Password -->
							<TextBlock
								Grid.Row="1"
								Grid.Column="0"
								VerticalAlignment="Center"
								Text="Password: "
								/>
							<PasswordBox
								Grid.Row="1"
								Grid.Column="1"
								IsEnabled="{Binding IsLoggedOn, Converter={conv:Not}}"
								VerticalAlignment="Center"
								Name="m_password"
								Margin="3"
								/>

							<!-- Login button -->
							<Button
								Grid.Row="0"
								Grid.Column="2"
								Grid.RowSpan="2"
								Command="{Binding Login}"
								IsEnabled="{Binding Login.Available}"
								ToolTip="Connect to the eWeLink Cloud Service to receive switch state updates"
								VerticalAlignment="Center"
								Background="Transparent"
								BorderThickness="0"
								Margin="3"
								>
								<Image
									RenderOptions.BitmapScalingMode="Fant"
									Source="{Binding IsLoggedOn, Converter={conv:BoolSelect}, ConverterParameter='connect1|connect0'}"
									MaxWidth="36"
									/>
							</Button>
						</Grid>
					</GroupBox>

					<!-- Solar Inverter IP -->
					<GroupBox
						Header="Solar Inverter IP:"
						Padding="3"
						>
						<TextBox
							Text="{Binding Settings.SolarInverterIP}"
							VerticalAlignment="Center"
							ToolTip="The IP address of the Fronius Solar Inverter"
							/>
					</GroupBox>

					<!-- Reserved Power -->
					<GroupBox
						Header="Reserved Power:"
						Padding="3"
						>
						<!-- Reserve Power -->
						<StackPanel
							Orientation="Horizontal"
							>
							<TextBox
								Text="{Binding Settings.ReservePower}"
								HorizontalContentAlignment="Right"
								MinWidth="40"
								/>
							<TextBlock
								Text=" kWatts"
								VerticalAlignment="Center"
								/>
						</StackPanel>
					</GroupBox>
				</StackPanel>

				<!-- Enable Button -->
				<StackPanel
					Grid.Column="2"
					Orientation="Vertical"
					>
					<!-- Enable Button -->
					<Button
						IsEnabled="{Binding ToggleEnableMonitor.Available}"
						Command="{Binding ToggleEnableMonitor}"
						ToolTip="Enable/Disable the monitor to turn consumers on/off based on available solar power"
						HorizontalAlignment="Center"
						VerticalAlignment="Top"
						Background="Transparent"
						BorderThickness="0"
						>
						<Image
							Source="{Binding MonitorEnabled, Converter={conv:BoolSelect}, ConverterParameter='power_blue|power_gray'}"
							RenderOptions.BitmapScalingMode="Fant"
							Height="64"
							/>
					</Button>

					<!-- Tool Buttons -->
					<WrapPanel
						Orientation="Horizontal"
						>
						<!-- Calender -->
						<Button
							Command="{Binding ShowSchedule}"
							ToolTip="Monitor active schedule"
							Background="Transparent"
							BorderThickness="0"
							>
							<Image
								Source="{StaticResource clock}"
								RenderOptions.BitmapScalingMode="Fant"
								MaxHeight="28"
								/>
						</Button>

						<!-- Options -->
						<Button
							Command="{Binding ShowOptions}"
							ToolTip="Application settings"
							Background="Transparent"
							BorderThickness="0"
							>
							<Image
								Source="{StaticResource options}"
								RenderOptions.BitmapScalingMode="Fant"
								MaxHeight="28"
								/>
						</Button>

						<!-- Log -->
						<Button
							Command="{Binding ShowLog}"
							ToolTip="Application log"
							Background="Transparent"
							BorderThickness="0"
							>
							<Image
								Source="{StaticResource log_file}"
								RenderOptions.BitmapScalingMode="Fant"
								MaxHeight="28"
								/>
						</Button>
					</WrapPanel>

					<!-- Version -->
					<TextBlock
						Text="{Binding VersionString, StringFormat=v{0}}"
						HorizontalAlignment="Center"
						/>
				</StackPanel>
			</Grid>

			<!-- Details -->
			<GroupBox
				Grid.Row="1"
				Header="Consumer Details:"
				IsEnabled="{Binding SelectedConsumer, Converter={conv:NotNull}}"
				Margin="8,1,8,1"
				>
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto"/>
						<RowDefinition Height="Auto"/>
						<RowDefinition Height="Auto"/>
						<RowDefinition Height="*"/>
					</Grid.RowDefinitions>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="Auto"/>
						<ColumnDefinition Width="Auto"/>
					</Grid.ColumnDefinitions>

					<!-- Consumer Name -->
					<TextBlock
						Grid.Row="0"
						Grid.Column="0"
						Text="Name: "
						VerticalAlignment="Center"
						/>
					<StackPanel
						Grid.Row="0"
						Grid.Column="1"
						Orientation="Horizontal"
						>
						<TextBox
							Text="{Binding SelectedConsumer.Name, FallbackValue=''}"
							HorizontalAlignment="Left"
							MinWidth="100"
							Margin="3"
							/>
						<Button
							Command="{Binding InspectDevice}"
							IsEnabled="{Binding SelectedConsumer.EweSwitch, Converter={conv:NotNull}}"
							Background="Transparent"
							BorderThickness="0"
							>
							<Image
								Source="{StaticResource inspect}"
								RenderOptions.BitmapScalingMode="Fant"
								MaxHeight="18"
								/>
						</Button>
						<Button
							Command="{Binding ChangeColour}"
							Background="Transparent"
							BorderThickness="0"
							MinWidth="20"
							Margin="3"
							>
							<Image
								Source="{StaticResource colour_wheel}"
								RenderOptions.BitmapScalingMode="Fant"
								MaxHeight="18"
								/>
						</Button>
					</StackPanel>

					<!-- EweLink Switch -->
					<TextBlock
						Grid.Row="1"
						Grid.Column="0"
						Text="Switch: "
						VerticalAlignment="Center"
						/>
					<StackPanel
						Grid.Row="1"
						Grid.Column="1"
						Orientation="Horizontal"
						>
						<ComboBox
							ItemsSource="{Binding EweDevices}"
							SelectedItem="{Binding SelectedConsumer.EweSwitch, FallbackValue=null}"
							DisplayMemberPath="Name"
							SelectedValuePath="Name"
							VerticalAlignment="Center"
							MinWidth="160"
							MaxWidth="200"
							Margin="3,3,6,3"
							ToolTip="The eWeLink Device that controls this consumer"
							/>
					</StackPanel>

					<!-- Control Mode -->
					<TextBlock
						Grid.Row="2"
						Grid.Column="0"
						Text="Mode: "
						VerticalAlignment="Center"
						/>
					<StackPanel
						Grid.Row="2"
						Grid.Column="1"
						Orientation="Horizontal"
						>
						<ComboBox
							ItemsSource="{Binding SelectedConsumer.Settings.ControlMode, Converter={conv:EnumValues}}"
							SelectedItem="{Binding SelectedConsumer.Settings.ControlMode}"
							VerticalAlignment="Center"
							MinWidth="100"
							Margin="3"
							>
							<ComboBox.ItemTemplate>
								<DataTemplate>
									<StackPanel Orientation="Horizontal">
										<TextBlock
											Text="{Binding .}"
											VerticalAlignment="Center"
											MinWidth="60"
											/>
										<Image
											RenderOptions.BitmapScalingMode="Fant"
											Source="{Binding ., Converter={conv:EnumSelect}, ConverterParameter='Disabled:reject|Observed:inspect|Controlled:accept'}"
											MaxHeight="18"
											/>
									</StackPanel>
								</DataTemplate>
							</ComboBox.ItemTemplate>
						</ComboBox>
					</StackPanel>

					<!-- Required Power -->
					<TextBlock
						Grid.Row="0"
						Grid.Column="2"
						Text="Required Power: "
						VerticalAlignment="Center"
						/>
					<StackPanel
						Grid.Row="0"
						Grid.Column="3"
						Orientation="Horizontal"
						>
						<TextBox
							Text="{Binding SelectedConsumer.RequiredPower, StringFormat={}{0:N3}, FallbackValue=''}"
							VerticalAlignment="Center"
							ToolTip="The available power (in kW) before enabling this consumer"
							MinWidth="60"
							Margin="3"
							/>
						<TextBlock
							Text="kWatts  "
							VerticalAlignment="Center"
							/>
					</StackPanel>

					<!-- Cooldown -->
					<TextBlock
						Grid.Row="1"
						Grid.Column="2"
						Text="Cooldown:"
						VerticalAlignment="Center"
						/>
					<StackPanel
						Grid.Row="1"
						Grid.Column="3"
						Orientation="Horizontal"
						>
						<TextBox
							Text="{Binding SelectedConsumer.Cooldown, FallbackValue=''}"
							VerticalAlignment="Center"
							MinWidth="60"
							Margin="3"
							ToolTip="The minimum time between switch state changes"
							/>
						<gui:RadialProgressControl
							Visibility="{Binding SelectedConsumer.StateChangePending, Converter={conv:NullToCollapsed}, FallbackValue=Collapsed}"
							Value="{Binding SelectedConsumer.StateChangeFrac, Mode=OneWay}"
							Minimum="0.0"
							Maximum="1.0"
							ArcWidth="50"
							MaxHeight="22"
							/>
					</StackPanel>

					<!-- Current State -->
					<TextBlock
						Grid.Row="2"
						Grid.Column="2"
						Text="State: "
						Visibility="{Binding SelectedConsumer, Converter={conv:NullToCollapsed}}"
						VerticalAlignment="Center"
						/>
					<StackPanel
						Grid.Row="2"
						Grid.Column="3"
						Orientation="Horizontal"
						>
						<!-- Toggle switch -->
						<Button
							Command="{Binding ToggleSwitch}"
							Visibility="{Binding SelectedConsumer, Converter={conv:NullToCollapsed}}"
							VerticalAlignment="Center"
							HorizontalAlignment="Left"
							Background="Transparent"
							BorderThickness="1"
							BorderBrush="#CCC"
							MaxHeight="24"
							Margin="3"
							>
							<Image
								Source="{Binding SelectedConsumer.On, Converter={conv:BoolSelect}, ConverterParameter='light_bulb_on|light_bulb_off'}"
								RenderOptions.BitmapScalingMode="Fant"
								/>
						</Button>
						
						<!-- Refresh State button -->
						<Button
							Command="{Binding RefreshDeviceInfo}"
							Visibility="{Binding SelectedConsumer, Converter={conv:NullToCollapsed}}"
							VerticalAlignment="Center"
							HorizontalAlignment="Left"
							Background="Transparent"
							BorderThickness="1"
							BorderBrush="#CCC"
							MaxHeight="24"
							Margin="3"
							>
							<Image
								Source="{StaticResource refresh}"
								RenderOptions.BitmapScalingMode="Fant"
								/>
						</Button>
					</StackPanel>

					<!-- Power consumption -->
					<TextBlock
						Grid.Row="0"
						Grid.Column="4"
						Text="Power: "
						Visibility="{Binding SelectedConsumer.Power, Converter={conv:NullToCollapsed}, FallbackValue=Collapsed}"
						VerticalAlignment="Center"
						/>
					<StackPanel
						Grid.Row="0"
						Grid.Column="5"
						Orientation="Horizontal"
						VerticalAlignment="Center"
						Visibility="{Binding SelectedConsumer.Power, Converter={conv:NullToCollapsed}, FallbackValue=Collapsed}"
						Margin="3,1,3,1"
						>
						<TextBox
							Text="{Binding SelectedConsumer.Power, StringFormat={}{0:N3}, Mode=OneWay}"
							HorizontalContentAlignment="Right"
							Background="AliceBlue"
							BorderThickness="1"
							IsReadOnly="True"
							MinWidth="40"
							/>
						<TextBlock
							Text=" kWatts  "
							/>
						<Button
							Command="{Binding RefreshDeviceInfo}"
							Content="Refresh Device Info"
							Visibility="Collapsed"
							/>
					</StackPanel>

					<!-- Voltage -->
					<TextBlock
						Grid.Row="1"
						Grid.Column="4"
						Text="Voltage: "
						Visibility="{Binding SelectedConsumer.Voltage, Converter={conv:NullToCollapsed}, FallbackValue=Collapsed}"
						VerticalAlignment="Center"
						/>
					<StackPanel
						Grid.Row="1"
						Grid.Column="5"
						Orientation="Horizontal"
						VerticalAlignment="Center"
						Visibility="{Binding SelectedConsumer.Voltage, Converter={conv:NullToCollapsed}, FallbackValue=Collapsed}"
						Margin="3,1,3,1"
						>
						<TextBox
							Text="{Binding SelectedConsumer.Voltage, StringFormat={}{0:N1}, Mode=OneWay}"
							HorizontalContentAlignment="Right"
							Background="AliceBlue"
							BorderThickness="1"
							IsReadOnly="True"
							MinWidth="40"
							/>
						<TextBlock
							Text=" V  "
							/>
					</StackPanel>

					<!-- Current -->
					<TextBlock
						Grid.Row="2"
						Grid.Column="4"
						Text="Current: "
						Visibility="{Binding SelectedConsumer.Current, Converter={conv:NullToCollapsed}, FallbackValue=Collapsed}"
						VerticalAlignment="Center"
						/>
					<StackPanel
						Grid.Row="2"
						Grid.Column="5"
						Orientation="Horizontal"
						VerticalAlignment="Center"
						Visibility="{Binding SelectedConsumer.Current, Converter={conv:NullToCollapsed}, FallbackValue=Collapsed}"
						Margin="3,1,3,1"
						>
						<TextBox
							Text="{Binding SelectedConsumer.Current, StringFormat={}{0:N3}, Mode=OneWay}"
							HorizontalContentAlignment="Right"
							Background="AliceBlue"
							BorderThickness="1"
							IsReadOnly="True"
							MinWidth="40"
							/>
						<TextBlock
							Text=" A  "
							/>
					</StackPanel>
				</Grid>
			</GroupBox>

			<!-- Realtime Data -->
			<GroupBox
				Grid.Row="2"
				Header="Status"
				Margin="8,1,8,1"
				>
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto"/>
						<RowDefinition Height="*"/>
					</Grid.RowDefinitions>

					<!-- Solar Output -->
					<Grid
						Grid.Row="0"
						>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>

						<!-- Current Solar Output -->
						<TextBlock
							Grid.Row="0"
							Grid.Column="0"
							Text="Solar Output: "
							VerticalAlignment="Center"
							/>
						<StackPanel
							Grid.Row="0"
							Grid.Column="1"
							Orientation="Horizontal"
							>
							<TextBox
								Text="{Binding Solar.CurrentPower, StringFormat={}{0:N3}, Mode=OneWay, FallbackValue=0}"
								Background="AliceBlue"
								VerticalAlignment="Center"
								HorizontalContentAlignment="Right"
								BorderThickness="1"
								IsReadOnly="True"
								MinWidth="60"
								/>
							<TextBlock
								Text="kWatts"
								VerticalAlignment="Center"
								Margin="3,3,16,3"
								/>
						</StackPanel>

						<!-- Last update -->
						<TextBlock
							Grid.Row="1"
							Grid.Column="0"
							Text="Last Update:"
							VerticalAlignment="Center"
							/>
						<StackPanel
							Grid.Row="1"
							Grid.Column="1"
							Orientation="Horizontal"
							>
							<TextBlock
								Text="{Binding Solar.Timestamp, StringFormat={}{0:yyyy-MMM-dd HH:mm:ss}, Mode=OneWay}"
								VerticalAlignment="Center"
								Margin="0,0,12,0"
								/>
						</StackPanel>

						<!-- Power consumed -->
						<TextBlock
							Grid.Row="0"
							Grid.Column="2"
							Text="Power Consumed: "
							VerticalAlignment="Center"
							/>
						<StackPanel
							Grid.Row="0"
							Grid.Column="3"
							Orientation="Horizontal"
							>
							<TextBox
								Text="{Binding PowerConsumed, StringFormat={}{0:N3}, Mode=OneWay, FallbackValue=0}"
								Background="AliceBlue"
								VerticalAlignment="Center"
								HorizontalContentAlignment="Right"
								BorderThickness="1"
								IsReadOnly="True"
								MinWidth="60"
								/>
							<TextBlock
								Text=" kWatts  "
								VerticalAlignment="Center"
								/>
						</StackPanel>

						<!-- Power surplus -->
						<TextBlock
							Grid.Row="1"
							Grid.Column="2"
							Text="Power Surplus: "
							VerticalAlignment="Center"
							/>
						<StackPanel
							Grid.Row="1"
							Grid.Column="3"
							Orientation="Horizontal"
							>
							<TextBox
								Text="{Binding PowerSurplus, StringFormat={}{0:N3}, Mode=OneWay, FallbackValue=0}"
								Background="AliceBlue"
								VerticalAlignment="Center"
								HorizontalContentAlignment="Right"
								BorderThickness="1"
								IsReadOnly="True"
								MinWidth="60"
								/>
							<TextBlock
								Text=" kWatts  "
								VerticalAlignment="Center"
								/>
						</StackPanel>
					</Grid>

					<!-- Plot -->
					<Border
						Grid.Row="1"
						BorderBrush="Gray"
						BorderThickness="0.2"
						>
						<view3d:ChartControl
							Title="History"
							Background="Transparent"
							Name="m_history_chart"
							>
							<view3d:ChartControl.Legend>
								<view3d:ChartLegend/>
							</view3d:ChartControl.Legend>
						</view3d:ChartControl>
					</Border>
				</Grid>
			</GroupBox>
		</Grid>

		<!-- Status Bar -->
		<StatusBar
			Grid.Row="2"
			Background="Transparent"
			BorderThickness="1"
			BorderBrush="{x:Static SystemColors.ControlLightBrush}"
			>
			<StatusBarItem
				Content="{Binding LastError.Message, FallbackValue='Idle'}"
				Foreground="{Binding LastError, Converter={conv:BoolSelect}, ConverterParameter='Red|Black'}"
				/>
		</StatusBar>

		<!-- Notification Tray -->
		<gui:NotificationIcon
			ContextMenu="{StaticResource NotificationCMenu}"
			ToolTipText="Solar Hot Water "
			/>

	</Grid>
</Window>
