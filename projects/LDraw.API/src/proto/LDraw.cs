// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LDraw.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LDraw.API {

  /// <summary>Holder for reflection information generated from LDraw.proto</summary>
  public static partial class LDrawReflection {

    #region Descriptor
    /// <summary>File descriptor for LDraw.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LDrawReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtMRHJhdy5wcm90bxIITERyYXdBUEkiGQoXV2luZG93Q3VycmVudEdldFJl",
            "cXVlc3QiJwoVV2luZG93Q3VycmVudEdldFJlcGx5Eg4KBmhhbmRsZRgBIAEo",
            "BiJdChdXaW5kb3dBZGRPYmplY3RzUmVxdWVzdBIVCg13aW5kb3dfaGFuZGxl",
            "GAEgASgGEhMKC2NvbnRleHRfaWRzGAIgAygJEhYKDm9iamVjdF9oYW5kbGVz",
            "GAMgAygGIhcKFVdpbmRvd0FkZE9iamVjdHNSZXBseSJgChpXaW5kb3dSZW1v",
            "dmVPYmplY3RzUmVxdWVzdBIVCg13aW5kb3dfaGFuZGxlGAEgASgGEhMKC2Nv",
            "bnRleHRfaWRzGAIgAygJEhYKDm9iamVjdF9oYW5kbGVzGAMgAygGIhoKGFdp",
            "bmRvd1JlbW92ZU9iamVjdHNSZXBseSIlChNXaW5kb3dSZW5kZXJSZXF1ZXN0",
            "Eg4KBmhhbmRsZRgBIAEoBiITChFXaW5kb3dSZW5kZXJSZXBseSJjChZPYmpl",
            "Y3RDcmVhdGVMZHJSZXF1ZXN0EhIKCmxkcl9zY3JpcHQYASABKAkSDwoHaXNf",
            "ZmlsZRgCIAEoCBISCgpjb250ZXh0X2lkGAMgASgJEhAKCGluY2x1ZGVzGAQg",
            "ASgJIjoKFE9iamVjdENyZWF0ZUxkclJlcGx5Eg4KBmhhbmRsZRgBIAEoBhIS",
            "Cgpjb250ZXh0X2lkGAIgASgJIj0KHE9iamVjdENyZWF0ZUluc3RhbmNlc1Jl",
            "cXVlc3QSDgoGaGFuZGxlGAEgASgGEg0KBWNvdW50GAIgASgFIiwKGk9iamVj",
            "dENyZWF0ZUluc3RhbmNlc1JlcGx5Eg4KBmhhbmRsZRgBIAMoBiIlChNPYmpl",
            "Y3REZWxldGVSZXF1ZXN0Eg4KBmhhbmRsZRgBIAEoBiITChFPYmplY3REZWxl",
            "dGVSZXBseSIoChZPYmplY3RDb250ZXh0SWRSZXF1ZXN0Eg4KBmhhbmRsZRgB",
            "IAEoBiIqChRPYmplY3RDb250ZXh0SWRSZXBseRISCgpjb250ZXh0X2lkGAEg",
            "ASgJIlAKE09iamVjdE8yV1NldFJlcXVlc3QSDgoGaGFuZGxlGAEgASgGEhsK",
            "A28ydxgCIAEoCzIOLkxEcmF3QVBJLk00eDQSDAoEbmFtZRgDIAEoCSITChFP",
            "YmplY3RPMldTZXRSZXBseSJQChNPYmplY3RPMlBTZXRSZXF1ZXN0Eg4KBmhh",
            "bmRsZRgBIAEoBhIbCgNvMnAYAiABKAsyDi5MRHJhd0FQSS5NNHg0EgwKBG5h",
            "bWUYAyABKAkiEwoRT2JqZWN0TzJQU2V0UmVwbHkiEQoETTR4NBIJCgFtGAEg",
            "AygCIhEKBFZlYzQSCQoBbRgBIAMoAjL0BgoMTERyYXdTZXJ2aWNlElgKEFdp",
            "bmRvd0N1cnJlbnRHZXQSIS5MRHJhd0FQSS5XaW5kb3dDdXJyZW50R2V0UmVx",
            "dWVzdBofLkxEcmF3QVBJLldpbmRvd0N1cnJlbnRHZXRSZXBseSIAElgKEFdp",
            "bmRvd0FkZE9iamVjdHMSIS5MRHJhd0FQSS5XaW5kb3dBZGRPYmplY3RzUmVx",
            "dWVzdBofLkxEcmF3QVBJLldpbmRvd0FkZE9iamVjdHNSZXBseSIAEmEKE1dp",
            "bmRvd1JlbW92ZU9iamVjdHMSJC5MRHJhd0FQSS5XaW5kb3dSZW1vdmVPYmpl",
            "Y3RzUmVxdWVzdBoiLkxEcmF3QVBJLldpbmRvd1JlbW92ZU9iamVjdHNSZXBs",
            "eSIAEkwKDFdpbmRvd1JlbmRlchIdLkxEcmF3QVBJLldpbmRvd1JlbmRlclJl",
            "cXVlc3QaGy5MRHJhd0FQSS5XaW5kb3dSZW5kZXJSZXBseSIAElUKD09iamVj",
            "dENyZWF0ZUxkchIgLkxEcmF3QVBJLk9iamVjdENyZWF0ZUxkclJlcXVlc3Qa",
            "Hi5MRHJhd0FQSS5PYmplY3RDcmVhdGVMZHJSZXBseSIAEmcKFU9iamVjdENy",
            "ZWF0ZUluc3RhbmNlcxImLkxEcmF3QVBJLk9iamVjdENyZWF0ZUluc3RhbmNl",
            "c1JlcXVlc3QaJC5MRHJhd0FQSS5PYmplY3RDcmVhdGVJbnN0YW5jZXNSZXBs",
            "eSIAEkwKDE9iamVjdERlbGV0ZRIdLkxEcmF3QVBJLk9iamVjdERlbGV0ZVJl",
            "cXVlc3QaGy5MRHJhd0FQSS5PYmplY3REZWxldGVSZXBseSIAElUKD09iamVj",
            "dENvbnRleHRJZBIgLkxEcmF3QVBJLk9iamVjdENvbnRleHRJZFJlcXVlc3Qa",
            "Hi5MRHJhd0FQSS5PYmplY3RDb250ZXh0SWRSZXBseSIAEkwKDE9iamVjdE8y",
            "V1NldBIdLkxEcmF3QVBJLk9iamVjdE8yV1NldFJlcXVlc3QaGy5MRHJhd0FQ",
            "SS5PYmplY3RPMldTZXRSZXBseSIAEkwKDE9iamVjdE8yUFNldBIdLkxEcmF3",
            "QVBJLk9iamVjdE8yUFNldFJlcXVlc3QaGy5MRHJhd0FQSS5PYmplY3RPMlBT",
            "ZXRSZXBseSIAQgyqAglMRHJhdy5BUEliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowCurrentGetRequest), global::LDraw.API.WindowCurrentGetRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowCurrentGetReply), global::LDraw.API.WindowCurrentGetReply.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowAddObjectsRequest), global::LDraw.API.WindowAddObjectsRequest.Parser, new[]{ "WindowHandle", "ContextIds", "ObjectHandles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowAddObjectsReply), global::LDraw.API.WindowAddObjectsReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowRemoveObjectsRequest), global::LDraw.API.WindowRemoveObjectsRequest.Parser, new[]{ "WindowHandle", "ContextIds", "ObjectHandles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowRemoveObjectsReply), global::LDraw.API.WindowRemoveObjectsReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowRenderRequest), global::LDraw.API.WindowRenderRequest.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowRenderReply), global::LDraw.API.WindowRenderReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectCreateLdrRequest), global::LDraw.API.ObjectCreateLdrRequest.Parser, new[]{ "LdrScript", "IsFile", "ContextId", "Includes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectCreateLdrReply), global::LDraw.API.ObjectCreateLdrReply.Parser, new[]{ "Handle", "ContextId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectCreateInstancesRequest), global::LDraw.API.ObjectCreateInstancesRequest.Parser, new[]{ "Handle", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectCreateInstancesReply), global::LDraw.API.ObjectCreateInstancesReply.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectDeleteRequest), global::LDraw.API.ObjectDeleteRequest.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectDeleteReply), global::LDraw.API.ObjectDeleteReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectContextIdRequest), global::LDraw.API.ObjectContextIdRequest.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectContextIdReply), global::LDraw.API.ObjectContextIdReply.Parser, new[]{ "ContextId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectO2WSetRequest), global::LDraw.API.ObjectO2WSetRequest.Parser, new[]{ "Handle", "O2W", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectO2WSetReply), global::LDraw.API.ObjectO2WSetReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectO2PSetRequest), global::LDraw.API.ObjectO2PSetRequest.Parser, new[]{ "Handle", "O2P", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectO2PSetReply), global::LDraw.API.ObjectO2PSetReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.M4x4), global::LDraw.API.M4x4.Parser, new[]{ "M" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.Vec4), global::LDraw.API.Vec4.Parser, new[]{ "M" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Window Current Get
  /// </summary>
  public sealed partial class WindowCurrentGetRequest : pb::IMessage<WindowCurrentGetRequest> {
    private static readonly pb::MessageParser<WindowCurrentGetRequest> _parser = new pb::MessageParser<WindowCurrentGetRequest>(() => new WindowCurrentGetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowCurrentGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetRequest(WindowCurrentGetRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetRequest Clone() {
      return new WindowCurrentGetRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowCurrentGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowCurrentGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowCurrentGetRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class WindowCurrentGetReply : pb::IMessage<WindowCurrentGetReply> {
    private static readonly pb::MessageParser<WindowCurrentGetReply> _parser = new pb::MessageParser<WindowCurrentGetReply>(() => new WindowCurrentGetReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowCurrentGetReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetReply(WindowCurrentGetReply other) : this() {
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetReply Clone() {
      return new WindowCurrentGetReply(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowCurrentGetReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowCurrentGetReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowCurrentGetReply other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Window Add Objects
  /// </summary>
  public sealed partial class WindowAddObjectsRequest : pb::IMessage<WindowAddObjectsRequest> {
    private static readonly pb::MessageParser<WindowAddObjectsRequest> _parser = new pb::MessageParser<WindowAddObjectsRequest>(() => new WindowAddObjectsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowAddObjectsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectsRequest(WindowAddObjectsRequest other) : this() {
      windowHandle_ = other.windowHandle_;
      contextIds_ = other.contextIds_.Clone();
      objectHandles_ = other.objectHandles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectsRequest Clone() {
      return new WindowAddObjectsRequest(this);
    }

    /// <summary>Field number for the "window_handle" field.</summary>
    public const int WindowHandleFieldNumber = 1;
    private ulong windowHandle_;
    /// <summary>
    /// The handle of the window to add the objects to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WindowHandle {
      get { return windowHandle_; }
      set {
        windowHandle_ = value;
      }
    }

    /// <summary>Field number for the "context_ids" field.</summary>
    public const int ContextIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_contextIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> contextIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The context ids of the objects to add
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ContextIds {
      get { return contextIds_; }
    }

    /// <summary>Field number for the "object_handles" field.</summary>
    public const int ObjectHandlesFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_objectHandles_codec
        = pb::FieldCodec.ForFixed64(26);
    private readonly pbc::RepeatedField<ulong> objectHandles_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// The handles of the object to add
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ObjectHandles {
      get { return objectHandles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowAddObjectsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowAddObjectsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WindowHandle != other.WindowHandle) return false;
      if(!contextIds_.Equals(other.contextIds_)) return false;
      if(!objectHandles_.Equals(other.objectHandles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WindowHandle != 0UL) hash ^= WindowHandle.GetHashCode();
      hash ^= contextIds_.GetHashCode();
      hash ^= objectHandles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WindowHandle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(WindowHandle);
      }
      contextIds_.WriteTo(output, _repeated_contextIds_codec);
      objectHandles_.WriteTo(output, _repeated_objectHandles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WindowHandle != 0UL) {
        size += 1 + 8;
      }
      size += contextIds_.CalculateSize(_repeated_contextIds_codec);
      size += objectHandles_.CalculateSize(_repeated_objectHandles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowAddObjectsRequest other) {
      if (other == null) {
        return;
      }
      if (other.WindowHandle != 0UL) {
        WindowHandle = other.WindowHandle;
      }
      contextIds_.Add(other.contextIds_);
      objectHandles_.Add(other.objectHandles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            WindowHandle = input.ReadFixed64();
            break;
          }
          case 18: {
            contextIds_.AddEntriesFrom(input, _repeated_contextIds_codec);
            break;
          }
          case 26:
          case 25: {
            objectHandles_.AddEntriesFrom(input, _repeated_objectHandles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowAddObjectsReply : pb::IMessage<WindowAddObjectsReply> {
    private static readonly pb::MessageParser<WindowAddObjectsReply> _parser = new pb::MessageParser<WindowAddObjectsReply>(() => new WindowAddObjectsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowAddObjectsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectsReply(WindowAddObjectsReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectsReply Clone() {
      return new WindowAddObjectsReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowAddObjectsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowAddObjectsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowAddObjectsReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Window Remove Objects
  /// </summary>
  public sealed partial class WindowRemoveObjectsRequest : pb::IMessage<WindowRemoveObjectsRequest> {
    private static readonly pb::MessageParser<WindowRemoveObjectsRequest> _parser = new pb::MessageParser<WindowRemoveObjectsRequest>(() => new WindowRemoveObjectsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowRemoveObjectsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRemoveObjectsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRemoveObjectsRequest(WindowRemoveObjectsRequest other) : this() {
      windowHandle_ = other.windowHandle_;
      contextIds_ = other.contextIds_.Clone();
      objectHandles_ = other.objectHandles_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRemoveObjectsRequest Clone() {
      return new WindowRemoveObjectsRequest(this);
    }

    /// <summary>Field number for the "window_handle" field.</summary>
    public const int WindowHandleFieldNumber = 1;
    private ulong windowHandle_;
    /// <summary>
    /// The handle of the window to remove objects from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WindowHandle {
      get { return windowHandle_; }
      set {
        windowHandle_ = value;
      }
    }

    /// <summary>Field number for the "context_ids" field.</summary>
    public const int ContextIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_contextIds_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> contextIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The context ids of the objects to remove
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ContextIds {
      get { return contextIds_; }
    }

    /// <summary>Field number for the "object_handles" field.</summary>
    public const int ObjectHandlesFieldNumber = 3;
    private static readonly pb::FieldCodec<ulong> _repeated_objectHandles_codec
        = pb::FieldCodec.ForFixed64(26);
    private readonly pbc::RepeatedField<ulong> objectHandles_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// The handles of the object to remove
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> ObjectHandles {
      get { return objectHandles_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowRemoveObjectsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowRemoveObjectsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WindowHandle != other.WindowHandle) return false;
      if(!contextIds_.Equals(other.contextIds_)) return false;
      if(!objectHandles_.Equals(other.objectHandles_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WindowHandle != 0UL) hash ^= WindowHandle.GetHashCode();
      hash ^= contextIds_.GetHashCode();
      hash ^= objectHandles_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WindowHandle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(WindowHandle);
      }
      contextIds_.WriteTo(output, _repeated_contextIds_codec);
      objectHandles_.WriteTo(output, _repeated_objectHandles_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WindowHandle != 0UL) {
        size += 1 + 8;
      }
      size += contextIds_.CalculateSize(_repeated_contextIds_codec);
      size += objectHandles_.CalculateSize(_repeated_objectHandles_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowRemoveObjectsRequest other) {
      if (other == null) {
        return;
      }
      if (other.WindowHandle != 0UL) {
        WindowHandle = other.WindowHandle;
      }
      contextIds_.Add(other.contextIds_);
      objectHandles_.Add(other.objectHandles_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            WindowHandle = input.ReadFixed64();
            break;
          }
          case 18: {
            contextIds_.AddEntriesFrom(input, _repeated_contextIds_codec);
            break;
          }
          case 26:
          case 25: {
            objectHandles_.AddEntriesFrom(input, _repeated_objectHandles_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowRemoveObjectsReply : pb::IMessage<WindowRemoveObjectsReply> {
    private static readonly pb::MessageParser<WindowRemoveObjectsReply> _parser = new pb::MessageParser<WindowRemoveObjectsReply>(() => new WindowRemoveObjectsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowRemoveObjectsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRemoveObjectsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRemoveObjectsReply(WindowRemoveObjectsReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRemoveObjectsReply Clone() {
      return new WindowRemoveObjectsReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowRemoveObjectsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowRemoveObjectsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowRemoveObjectsReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Window Render
  /// </summary>
  public sealed partial class WindowRenderRequest : pb::IMessage<WindowRenderRequest> {
    private static readonly pb::MessageParser<WindowRenderRequest> _parser = new pb::MessageParser<WindowRenderRequest>(() => new WindowRenderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowRenderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderRequest(WindowRenderRequest other) : this() {
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderRequest Clone() {
      return new WindowRenderRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    /// <summary>
    /// The handle of the window to render
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowRenderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowRenderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowRenderRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowRenderReply : pb::IMessage<WindowRenderReply> {
    private static readonly pb::MessageParser<WindowRenderReply> _parser = new pb::MessageParser<WindowRenderReply>(() => new WindowRenderReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowRenderReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderReply(WindowRenderReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderReply Clone() {
      return new WindowRenderReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowRenderReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowRenderReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowRenderReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Object Create
  /// </summary>
  public sealed partial class ObjectCreateLdrRequest : pb::IMessage<ObjectCreateLdrRequest> {
    private static readonly pb::MessageParser<ObjectCreateLdrRequest> _parser = new pb::MessageParser<ObjectCreateLdrRequest>(() => new ObjectCreateLdrRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectCreateLdrRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrRequest(ObjectCreateLdrRequest other) : this() {
      ldrScript_ = other.ldrScript_;
      isFile_ = other.isFile_;
      contextId_ = other.contextId_;
      includes_ = other.includes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrRequest Clone() {
      return new ObjectCreateLdrRequest(this);
    }

    /// <summary>Field number for the "ldr_script" field.</summary>
    public const int LdrScriptFieldNumber = 1;
    private string ldrScript_ = "";
    /// <summary>
    /// The LDraw script or filepath containing LDraw script
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LdrScript {
      get { return ldrScript_; }
      set {
        ldrScript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_file" field.</summary>
    public const int IsFileFieldNumber = 2;
    private bool isFile_;
    /// <summary>
    /// True if 'ldr_script' is a filepath
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFile {
      get { return isFile_; }
      set {
        isFile_ = value;
      }
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 3;
    private string contextId_ = "";
    /// <summary>
    /// The context id to assign to the created LDraw objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "includes" field.</summary>
    public const int IncludesFieldNumber = 4;
    private string includes_ = "";
    /// <summary>
    /// A comma or semi-colon separated list of include paths
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Includes {
      get { return includes_; }
      set {
        includes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectCreateLdrRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectCreateLdrRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LdrScript != other.LdrScript) return false;
      if (IsFile != other.IsFile) return false;
      if (ContextId != other.ContextId) return false;
      if (Includes != other.Includes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LdrScript.Length != 0) hash ^= LdrScript.GetHashCode();
      if (IsFile != false) hash ^= IsFile.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (Includes.Length != 0) hash ^= Includes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LdrScript.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LdrScript);
      }
      if (IsFile != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFile);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ContextId);
      }
      if (Includes.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Includes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LdrScript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LdrScript);
      }
      if (IsFile != false) {
        size += 1 + 1;
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (Includes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Includes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectCreateLdrRequest other) {
      if (other == null) {
        return;
      }
      if (other.LdrScript.Length != 0) {
        LdrScript = other.LdrScript;
      }
      if (other.IsFile != false) {
        IsFile = other.IsFile;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.Includes.Length != 0) {
        Includes = other.Includes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LdrScript = input.ReadString();
            break;
          }
          case 16: {
            IsFile = input.ReadBool();
            break;
          }
          case 26: {
            ContextId = input.ReadString();
            break;
          }
          case 34: {
            Includes = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectCreateLdrReply : pb::IMessage<ObjectCreateLdrReply> {
    private static readonly pb::MessageParser<ObjectCreateLdrReply> _parser = new pb::MessageParser<ObjectCreateLdrReply>(() => new ObjectCreateLdrReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectCreateLdrReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrReply(ObjectCreateLdrReply other) : this() {
      handle_ = other.handle_;
      contextId_ = other.contextId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrReply Clone() {
      return new ObjectCreateLdrReply(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    /// <summary>
    /// The handle to the created object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 2;
    private string contextId_ = "";
    /// <summary>
    /// The context id that the object was assigned to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectCreateLdrReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectCreateLdrReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (ContextId != other.ContextId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectCreateLdrReply other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
          case 18: {
            ContextId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Object Create Instances
  /// </summary>
  public sealed partial class ObjectCreateInstancesRequest : pb::IMessage<ObjectCreateInstancesRequest> {
    private static readonly pb::MessageParser<ObjectCreateInstancesRequest> _parser = new pb::MessageParser<ObjectCreateInstancesRequest>(() => new ObjectCreateInstancesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectCreateInstancesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstancesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstancesRequest(ObjectCreateInstancesRequest other) : this() {
      handle_ = other.handle_;
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstancesRequest Clone() {
      return new ObjectCreateInstancesRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    /// <summary>
    /// The object handle of the object to be cloned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    /// <summary>
    /// The number of instances to create
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectCreateInstancesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectCreateInstancesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectCreateInstancesRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectCreateInstancesReply : pb::IMessage<ObjectCreateInstancesReply> {
    private static readonly pb::MessageParser<ObjectCreateInstancesReply> _parser = new pb::MessageParser<ObjectCreateInstancesReply>(() => new ObjectCreateInstancesReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectCreateInstancesReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstancesReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstancesReply(ObjectCreateInstancesReply other) : this() {
      handle_ = other.handle_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstancesReply Clone() {
      return new ObjectCreateInstancesReply(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_handle_codec
        = pb::FieldCodec.ForFixed64(10);
    private readonly pbc::RepeatedField<ulong> handle_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// The object handle of the newly created cloned instances
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> Handle {
      get { return handle_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectCreateInstancesReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectCreateInstancesReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!handle_.Equals(other.handle_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= handle_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      handle_.WriteTo(output, _repeated_handle_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += handle_.CalculateSize(_repeated_handle_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectCreateInstancesReply other) {
      if (other == null) {
        return;
      }
      handle_.Add(other.handle_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 9: {
            handle_.AddEntriesFrom(input, _repeated_handle_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Object Delete
  /// </summary>
  public sealed partial class ObjectDeleteRequest : pb::IMessage<ObjectDeleteRequest> {
    private static readonly pb::MessageParser<ObjectDeleteRequest> _parser = new pb::MessageParser<ObjectDeleteRequest>(() => new ObjectDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteRequest(ObjectDeleteRequest other) : this() {
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteRequest Clone() {
      return new ObjectDeleteRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    /// <summary>
    /// The handle of the object to delete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectDeleteReply : pb::IMessage<ObjectDeleteReply> {
    private static readonly pb::MessageParser<ObjectDeleteReply> _parser = new pb::MessageParser<ObjectDeleteReply>(() => new ObjectDeleteReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDeleteReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteReply(ObjectDeleteReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteReply Clone() {
      return new ObjectDeleteReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDeleteReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDeleteReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDeleteReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Object ContextId
  /// </summary>
  public sealed partial class ObjectContextIdRequest : pb::IMessage<ObjectContextIdRequest> {
    private static readonly pb::MessageParser<ObjectContextIdRequest> _parser = new pb::MessageParser<ObjectContextIdRequest>(() => new ObjectContextIdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectContextIdRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectContextIdRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectContextIdRequest(ObjectContextIdRequest other) : this() {
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectContextIdRequest Clone() {
      return new ObjectContextIdRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectContextIdRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectContextIdRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectContextIdRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectContextIdReply : pb::IMessage<ObjectContextIdReply> {
    private static readonly pb::MessageParser<ObjectContextIdReply> _parser = new pb::MessageParser<ObjectContextIdReply>(() => new ObjectContextIdReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectContextIdReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectContextIdReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectContextIdReply(ObjectContextIdReply other) : this() {
      contextId_ = other.contextId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectContextIdReply Clone() {
      return new ObjectContextIdReply(this);
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 1;
    private string contextId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectContextIdReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectContextIdReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ContextId != other.ContextId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ContextId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ContextId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectContextIdReply other) {
      if (other == null) {
        return;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ContextId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ObjectO2WSet
  /// </summary>
  public sealed partial class ObjectO2WSetRequest : pb::IMessage<ObjectO2WSetRequest> {
    private static readonly pb::MessageParser<ObjectO2WSetRequest> _parser = new pb::MessageParser<ObjectO2WSetRequest>(() => new ObjectO2WSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectO2WSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetRequest(ObjectO2WSetRequest other) : this() {
      handle_ = other.handle_;
      O2W = other.o2W_ != null ? other.O2W.Clone() : null;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetRequest Clone() {
      return new ObjectO2WSetRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "o2w" field.</summary>
    public const int O2WFieldNumber = 2;
    private global::LDraw.API.M4x4 o2W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LDraw.API.M4x4 O2W {
      get { return o2W_; }
      set {
        o2W_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectO2WSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectO2WSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (!object.Equals(O2W, other.O2W)) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      if (o2W_ != null) hash ^= O2W.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
      if (o2W_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(O2W);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      if (o2W_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(O2W);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectO2WSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
      if (other.o2W_ != null) {
        if (o2W_ == null) {
          o2W_ = new global::LDraw.API.M4x4();
        }
        O2W.MergeFrom(other.O2W);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
          case 18: {
            if (o2W_ == null) {
              o2W_ = new global::LDraw.API.M4x4();
            }
            input.ReadMessage(o2W_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectO2WSetReply : pb::IMessage<ObjectO2WSetReply> {
    private static readonly pb::MessageParser<ObjectO2WSetReply> _parser = new pb::MessageParser<ObjectO2WSetReply>(() => new ObjectO2WSetReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectO2WSetReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetReply(ObjectO2WSetReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetReply Clone() {
      return new ObjectO2WSetReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectO2WSetReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectO2WSetReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectO2WSetReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// ObjectO2PSet
  /// </summary>
  public sealed partial class ObjectO2PSetRequest : pb::IMessage<ObjectO2PSetRequest> {
    private static readonly pb::MessageParser<ObjectO2PSetRequest> _parser = new pb::MessageParser<ObjectO2PSetRequest>(() => new ObjectO2PSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectO2PSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetRequest(ObjectO2PSetRequest other) : this() {
      handle_ = other.handle_;
      O2P = other.o2P_ != null ? other.O2P.Clone() : null;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetRequest Clone() {
      return new ObjectO2PSetRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "o2p" field.</summary>
    public const int O2PFieldNumber = 2;
    private global::LDraw.API.M4x4 o2P_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LDraw.API.M4x4 O2P {
      get { return o2P_; }
      set {
        o2P_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectO2PSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectO2PSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (!object.Equals(O2P, other.O2P)) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      if (o2P_ != null) hash ^= O2P.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
      if (o2P_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(O2P);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      if (o2P_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(O2P);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectO2PSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
      if (other.o2P_ != null) {
        if (o2P_ == null) {
          o2P_ = new global::LDraw.API.M4x4();
        }
        O2P.MergeFrom(other.O2P);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
          case 18: {
            if (o2P_ == null) {
              o2P_ = new global::LDraw.API.M4x4();
            }
            input.ReadMessage(o2P_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectO2PSetReply : pb::IMessage<ObjectO2PSetReply> {
    private static readonly pb::MessageParser<ObjectO2PSetReply> _parser = new pb::MessageParser<ObjectO2PSetReply>(() => new ObjectO2PSetReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectO2PSetReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetReply(ObjectO2PSetReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetReply Clone() {
      return new ObjectO2PSetReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectO2PSetReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectO2PSetReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectO2PSetReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 4x4 matrix
  /// </summary>
  public sealed partial class M4x4 : pb::IMessage<M4x4> {
    private static readonly pb::MessageParser<M4x4> _parser = new pb::MessageParser<M4x4>(() => new M4x4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<M4x4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M4x4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M4x4(M4x4 other) : this() {
      m_ = other.m_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M4x4 Clone() {
      return new M4x4(this);
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_m_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> m_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> M {
      get { return m_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as M4x4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(M4x4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!m_.Equals(other.m_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= m_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      m_.WriteTo(output, _repeated_m_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += m_.CalculateSize(_repeated_m_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(M4x4 other) {
      if (other == null) {
        return;
      }
      m_.Add(other.m_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            m_.AddEntriesFrom(input, _repeated_m_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 4-vector
  /// </summary>
  public sealed partial class Vec4 : pb::IMessage<Vec4> {
    private static readonly pb::MessageParser<Vec4> _parser = new pb::MessageParser<Vec4>(() => new Vec4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec4(Vec4 other) : this() {
      m_ = other.m_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec4 Clone() {
      return new Vec4(this);
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_m_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> m_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> M {
      get { return m_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!m_.Equals(other.m_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= m_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      m_.WriteTo(output, _repeated_m_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += m_.CalculateSize(_repeated_m_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec4 other) {
      if (other == null) {
        return;
      }
      m_.Add(other.m_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            m_.AddEntriesFrom(input, _repeated_m_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
