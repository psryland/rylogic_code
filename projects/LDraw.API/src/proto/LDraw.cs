// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LDraw.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LDraw.API {

  /// <summary>Holder for reflection information generated from LDraw.proto</summary>
  public static partial class LDrawReflection {

    #region Descriptor
    /// <summary>File descriptor for LDraw.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LDrawReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtMRHJhdy5wcm90bxIITERyYXdBUEkiGQoXV2luZG93Q3VycmVudEdldFJl",
            "cXVlc3QiJwoVV2luZG93Q3VycmVudEdldFJlcGx5Eg4KBmhhbmRsZRgBIAEo",
            "BiJGChZXaW5kb3dBZGRPYmplY3RSZXF1ZXN0EhUKDXdpbmRvd19oYW5kbGUY",
            "ASABKAYSFQoNb2JqZWN0X2hhbmRsZRgCIAEoBiIWChRXaW5kb3dBZGRPYmpl",
            "Y3RSZXBseSIlChNXaW5kb3dSZW5kZXJSZXF1ZXN0Eg4KBmhhbmRsZRgBIAEo",
            "BiITChFXaW5kb3dSZW5kZXJSZXBseSJjChZPYmplY3RDcmVhdGVMZHJSZXF1",
            "ZXN0EhIKCmxkcl9zY3JpcHQYASABKAkSDwoHaXNfZmlsZRgCIAEoCBISCgpj",
            "b250ZXh0X2lkGAMgASgJEhAKCGluY2x1ZGVzGAQgASgJIjoKFE9iamVjdENy",
            "ZWF0ZUxkclJlcGx5Eg4KBmhhbmRsZRgBIAEoBhISCgpjb250ZXh0X2lkGAIg",
            "ASgJIi0KG09iamVjdENyZWF0ZUluc3RhbmNlUmVxdWVzdBIOCgZoYW5kbGUY",
            "ASABKAYiKwoZT2JqZWN0Q3JlYXRlSW5zdGFuY2VSZXBseRIOCgZoYW5kbGUY",
            "ASABKAYiJQoTT2JqZWN0RGVsZXRlUmVxdWVzdBIOCgZoYW5kbGUYASABKAYi",
            "EwoRT2JqZWN0RGVsZXRlUmVwbHkiUAoTT2JqZWN0TzJXU2V0UmVxdWVzdBIO",
            "CgZoYW5kbGUYASABKAYSGwoDbzJ3GAIgASgLMg4uTERyYXdBUEkuTTR4NBIM",
            "CgRuYW1lGAMgASgJIhMKEU9iamVjdE8yV1NldFJlcGx5IlAKE09iamVjdE8y",
            "UFNldFJlcXVlc3QSDgoGaGFuZGxlGAEgASgGEhsKA28ycBgCIAEoCzIOLkxE",
            "cmF3QVBJLk00eDQSDAoEbmFtZRgDIAEoCSITChFPYmplY3RPMlBTZXRSZXBs",
            "eSIRCgRNNHg0EgkKAW0YASADKAIiEQoEVmVjNBIJCgFtGAEgAygCMrQFCgxM",
            "RHJhd1NlcnZpY2USWAoQV2luZG93Q3VycmVudEdldBIhLkxEcmF3QVBJLldp",
            "bmRvd0N1cnJlbnRHZXRSZXF1ZXN0Gh8uTERyYXdBUEkuV2luZG93Q3VycmVu",
            "dEdldFJlcGx5IgASVQoPV2luZG93QWRkT2JqZWN0EiAuTERyYXdBUEkuV2lu",
            "ZG93QWRkT2JqZWN0UmVxdWVzdBoeLkxEcmF3QVBJLldpbmRvd0FkZE9iamVj",
            "dFJlcGx5IgASTAoMV2luZG93UmVuZGVyEh0uTERyYXdBUEkuV2luZG93UmVu",
            "ZGVyUmVxdWVzdBobLkxEcmF3QVBJLldpbmRvd1JlbmRlclJlcGx5IgASVQoP",
            "T2JqZWN0Q3JlYXRlTGRyEiAuTERyYXdBUEkuT2JqZWN0Q3JlYXRlTGRyUmVx",
            "dWVzdBoeLkxEcmF3QVBJLk9iamVjdENyZWF0ZUxkclJlcGx5IgASZAoUT2Jq",
            "ZWN0Q3JlYXRlSW5zdGFuY2USJS5MRHJhd0FQSS5PYmplY3RDcmVhdGVJbnN0",
            "YW5jZVJlcXVlc3QaIy5MRHJhd0FQSS5PYmplY3RDcmVhdGVJbnN0YW5jZVJl",
            "cGx5IgASTAoMT2JqZWN0RGVsZXRlEh0uTERyYXdBUEkuT2JqZWN0RGVsZXRl",
            "UmVxdWVzdBobLkxEcmF3QVBJLk9iamVjdERlbGV0ZVJlcGx5IgASTAoMT2Jq",
            "ZWN0TzJXU2V0Eh0uTERyYXdBUEkuT2JqZWN0TzJXU2V0UmVxdWVzdBobLkxE",
            "cmF3QVBJLk9iamVjdE8yV1NldFJlcGx5IgASTAoMT2JqZWN0TzJQU2V0Eh0u",
            "TERyYXdBUEkuT2JqZWN0TzJQU2V0UmVxdWVzdBobLkxEcmF3QVBJLk9iamVj",
            "dE8yUFNldFJlcGx5IgBCDKoCCUxEcmF3LkFQSWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowCurrentGetRequest), global::LDraw.API.WindowCurrentGetRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowCurrentGetReply), global::LDraw.API.WindowCurrentGetReply.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowAddObjectRequest), global::LDraw.API.WindowAddObjectRequest.Parser, new[]{ "WindowHandle", "ObjectHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowAddObjectReply), global::LDraw.API.WindowAddObjectReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowRenderRequest), global::LDraw.API.WindowRenderRequest.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.WindowRenderReply), global::LDraw.API.WindowRenderReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectCreateLdrRequest), global::LDraw.API.ObjectCreateLdrRequest.Parser, new[]{ "LdrScript", "IsFile", "ContextId", "Includes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectCreateLdrReply), global::LDraw.API.ObjectCreateLdrReply.Parser, new[]{ "Handle", "ContextId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectCreateInstanceRequest), global::LDraw.API.ObjectCreateInstanceRequest.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectCreateInstanceReply), global::LDraw.API.ObjectCreateInstanceReply.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectDeleteRequest), global::LDraw.API.ObjectDeleteRequest.Parser, new[]{ "Handle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectDeleteReply), global::LDraw.API.ObjectDeleteReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectO2WSetRequest), global::LDraw.API.ObjectO2WSetRequest.Parser, new[]{ "Handle", "O2W", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectO2WSetReply), global::LDraw.API.ObjectO2WSetReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectO2PSetRequest), global::LDraw.API.ObjectO2PSetRequest.Parser, new[]{ "Handle", "O2P", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.ObjectO2PSetReply), global::LDraw.API.ObjectO2PSetReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.M4x4), global::LDraw.API.M4x4.Parser, new[]{ "M" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LDraw.API.Vec4), global::LDraw.API.Vec4.Parser, new[]{ "M" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class WindowCurrentGetRequest : pb::IMessage<WindowCurrentGetRequest> {
    private static readonly pb::MessageParser<WindowCurrentGetRequest> _parser = new pb::MessageParser<WindowCurrentGetRequest>(() => new WindowCurrentGetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowCurrentGetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetRequest(WindowCurrentGetRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetRequest Clone() {
      return new WindowCurrentGetRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowCurrentGetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowCurrentGetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowCurrentGetRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class WindowCurrentGetReply : pb::IMessage<WindowCurrentGetReply> {
    private static readonly pb::MessageParser<WindowCurrentGetReply> _parser = new pb::MessageParser<WindowCurrentGetReply>(() => new WindowCurrentGetReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowCurrentGetReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetReply(WindowCurrentGetReply other) : this() {
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowCurrentGetReply Clone() {
      return new WindowCurrentGetReply(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowCurrentGetReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowCurrentGetReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowCurrentGetReply other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowAddObjectRequest : pb::IMessage<WindowAddObjectRequest> {
    private static readonly pb::MessageParser<WindowAddObjectRequest> _parser = new pb::MessageParser<WindowAddObjectRequest>(() => new WindowAddObjectRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowAddObjectRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectRequest(WindowAddObjectRequest other) : this() {
      windowHandle_ = other.windowHandle_;
      objectHandle_ = other.objectHandle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectRequest Clone() {
      return new WindowAddObjectRequest(this);
    }

    /// <summary>Field number for the "window_handle" field.</summary>
    public const int WindowHandleFieldNumber = 1;
    private ulong windowHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WindowHandle {
      get { return windowHandle_; }
      set {
        windowHandle_ = value;
      }
    }

    /// <summary>Field number for the "object_handle" field.</summary>
    public const int ObjectHandleFieldNumber = 2;
    private ulong objectHandle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ObjectHandle {
      get { return objectHandle_; }
      set {
        objectHandle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowAddObjectRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowAddObjectRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WindowHandle != other.WindowHandle) return false;
      if (ObjectHandle != other.ObjectHandle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WindowHandle != 0UL) hash ^= WindowHandle.GetHashCode();
      if (ObjectHandle != 0UL) hash ^= ObjectHandle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WindowHandle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(WindowHandle);
      }
      if (ObjectHandle != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(ObjectHandle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WindowHandle != 0UL) {
        size += 1 + 8;
      }
      if (ObjectHandle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowAddObjectRequest other) {
      if (other == null) {
        return;
      }
      if (other.WindowHandle != 0UL) {
        WindowHandle = other.WindowHandle;
      }
      if (other.ObjectHandle != 0UL) {
        ObjectHandle = other.ObjectHandle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            WindowHandle = input.ReadFixed64();
            break;
          }
          case 17: {
            ObjectHandle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowAddObjectReply : pb::IMessage<WindowAddObjectReply> {
    private static readonly pb::MessageParser<WindowAddObjectReply> _parser = new pb::MessageParser<WindowAddObjectReply>(() => new WindowAddObjectReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowAddObjectReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectReply(WindowAddObjectReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowAddObjectReply Clone() {
      return new WindowAddObjectReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowAddObjectReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowAddObjectReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowAddObjectReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Window Render
  /// </summary>
  public sealed partial class WindowRenderRequest : pb::IMessage<WindowRenderRequest> {
    private static readonly pb::MessageParser<WindowRenderRequest> _parser = new pb::MessageParser<WindowRenderRequest>(() => new WindowRenderRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowRenderRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderRequest(WindowRenderRequest other) : this() {
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderRequest Clone() {
      return new WindowRenderRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    /// <summary>
    /// The handle of the window to render
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowRenderRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowRenderRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowRenderRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowRenderReply : pb::IMessage<WindowRenderReply> {
    private static readonly pb::MessageParser<WindowRenderReply> _parser = new pb::MessageParser<WindowRenderReply>(() => new WindowRenderReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowRenderReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderReply(WindowRenderReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowRenderReply Clone() {
      return new WindowRenderReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowRenderReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowRenderReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowRenderReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Object Create
  /// </summary>
  public sealed partial class ObjectCreateLdrRequest : pb::IMessage<ObjectCreateLdrRequest> {
    private static readonly pb::MessageParser<ObjectCreateLdrRequest> _parser = new pb::MessageParser<ObjectCreateLdrRequest>(() => new ObjectCreateLdrRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectCreateLdrRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrRequest(ObjectCreateLdrRequest other) : this() {
      ldrScript_ = other.ldrScript_;
      isFile_ = other.isFile_;
      contextId_ = other.contextId_;
      includes_ = other.includes_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrRequest Clone() {
      return new ObjectCreateLdrRequest(this);
    }

    /// <summary>Field number for the "ldr_script" field.</summary>
    public const int LdrScriptFieldNumber = 1;
    private string ldrScript_ = "";
    /// <summary>
    /// The LDraw script or filepath containing LDraw script
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LdrScript {
      get { return ldrScript_; }
      set {
        ldrScript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_file" field.</summary>
    public const int IsFileFieldNumber = 2;
    private bool isFile_;
    /// <summary>
    /// True if 'ldr_script' is a filepath
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFile {
      get { return isFile_; }
      set {
        isFile_ = value;
      }
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 3;
    private string contextId_ = "";
    /// <summary>
    /// The context id to assign to the created LDraw objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "includes" field.</summary>
    public const int IncludesFieldNumber = 4;
    private string includes_ = "";
    /// <summary>
    /// A comma or semi-colon separated list of include paths
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Includes {
      get { return includes_; }
      set {
        includes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectCreateLdrRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectCreateLdrRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LdrScript != other.LdrScript) return false;
      if (IsFile != other.IsFile) return false;
      if (ContextId != other.ContextId) return false;
      if (Includes != other.Includes) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LdrScript.Length != 0) hash ^= LdrScript.GetHashCode();
      if (IsFile != false) hash ^= IsFile.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      if (Includes.Length != 0) hash ^= Includes.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LdrScript.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LdrScript);
      }
      if (IsFile != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFile);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ContextId);
      }
      if (Includes.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Includes);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LdrScript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LdrScript);
      }
      if (IsFile != false) {
        size += 1 + 1;
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      if (Includes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Includes);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectCreateLdrRequest other) {
      if (other == null) {
        return;
      }
      if (other.LdrScript.Length != 0) {
        LdrScript = other.LdrScript;
      }
      if (other.IsFile != false) {
        IsFile = other.IsFile;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
      if (other.Includes.Length != 0) {
        Includes = other.Includes;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LdrScript = input.ReadString();
            break;
          }
          case 16: {
            IsFile = input.ReadBool();
            break;
          }
          case 26: {
            ContextId = input.ReadString();
            break;
          }
          case 34: {
            Includes = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectCreateLdrReply : pb::IMessage<ObjectCreateLdrReply> {
    private static readonly pb::MessageParser<ObjectCreateLdrReply> _parser = new pb::MessageParser<ObjectCreateLdrReply>(() => new ObjectCreateLdrReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectCreateLdrReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrReply(ObjectCreateLdrReply other) : this() {
      handle_ = other.handle_;
      contextId_ = other.contextId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateLdrReply Clone() {
      return new ObjectCreateLdrReply(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    /// <summary>
    /// The handle to the created object
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "context_id" field.</summary>
    public const int ContextIdFieldNumber = 2;
    private string contextId_ = "";
    /// <summary>
    /// The context id that the object was assigned to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContextId {
      get { return contextId_; }
      set {
        contextId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectCreateLdrReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectCreateLdrReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (ContextId != other.ContextId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      if (ContextId.Length != 0) hash ^= ContextId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
      if (ContextId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContextId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      if (ContextId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContextId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectCreateLdrReply other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
      if (other.ContextId.Length != 0) {
        ContextId = other.ContextId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
          case 18: {
            ContextId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Object Create Instance
  /// </summary>
  public sealed partial class ObjectCreateInstanceRequest : pb::IMessage<ObjectCreateInstanceRequest> {
    private static readonly pb::MessageParser<ObjectCreateInstanceRequest> _parser = new pb::MessageParser<ObjectCreateInstanceRequest>(() => new ObjectCreateInstanceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectCreateInstanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstanceRequest(ObjectCreateInstanceRequest other) : this() {
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstanceRequest Clone() {
      return new ObjectCreateInstanceRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    /// <summary>
    /// The object handle of the object to be cloned
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectCreateInstanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectCreateInstanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectCreateInstanceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectCreateInstanceReply : pb::IMessage<ObjectCreateInstanceReply> {
    private static readonly pb::MessageParser<ObjectCreateInstanceReply> _parser = new pb::MessageParser<ObjectCreateInstanceReply>(() => new ObjectCreateInstanceReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectCreateInstanceReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstanceReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstanceReply(ObjectCreateInstanceReply other) : this() {
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectCreateInstanceReply Clone() {
      return new ObjectCreateInstanceReply(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    /// <summary>
    /// The object handle of the newly created cloned instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectCreateInstanceReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectCreateInstanceReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectCreateInstanceReply other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Object Delete
  /// </summary>
  public sealed partial class ObjectDeleteRequest : pb::IMessage<ObjectDeleteRequest> {
    private static readonly pb::MessageParser<ObjectDeleteRequest> _parser = new pb::MessageParser<ObjectDeleteRequest>(() => new ObjectDeleteRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteRequest(ObjectDeleteRequest other) : this() {
      handle_ = other.handle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteRequest Clone() {
      return new ObjectDeleteRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    /// <summary>
    /// The handle of the object to delete
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectDeleteReply : pb::IMessage<ObjectDeleteReply> {
    private static readonly pb::MessageParser<ObjectDeleteReply> _parser = new pb::MessageParser<ObjectDeleteReply>(() => new ObjectDeleteReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectDeleteReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteReply(ObjectDeleteReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectDeleteReply Clone() {
      return new ObjectDeleteReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectDeleteReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectDeleteReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectDeleteReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// ObjectO2WSet
  /// </summary>
  public sealed partial class ObjectO2WSetRequest : pb::IMessage<ObjectO2WSetRequest> {
    private static readonly pb::MessageParser<ObjectO2WSetRequest> _parser = new pb::MessageParser<ObjectO2WSetRequest>(() => new ObjectO2WSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectO2WSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetRequest(ObjectO2WSetRequest other) : this() {
      handle_ = other.handle_;
      O2W = other.o2W_ != null ? other.O2W.Clone() : null;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetRequest Clone() {
      return new ObjectO2WSetRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "o2w" field.</summary>
    public const int O2WFieldNumber = 2;
    private global::LDraw.API.M4x4 o2W_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LDraw.API.M4x4 O2W {
      get { return o2W_; }
      set {
        o2W_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectO2WSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectO2WSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (!object.Equals(O2W, other.O2W)) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      if (o2W_ != null) hash ^= O2W.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
      if (o2W_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(O2W);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      if (o2W_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(O2W);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectO2WSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
      if (other.o2W_ != null) {
        if (o2W_ == null) {
          o2W_ = new global::LDraw.API.M4x4();
        }
        O2W.MergeFrom(other.O2W);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
          case 18: {
            if (o2W_ == null) {
              o2W_ = new global::LDraw.API.M4x4();
            }
            input.ReadMessage(o2W_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectO2WSetReply : pb::IMessage<ObjectO2WSetReply> {
    private static readonly pb::MessageParser<ObjectO2WSetReply> _parser = new pb::MessageParser<ObjectO2WSetReply>(() => new ObjectO2WSetReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectO2WSetReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetReply(ObjectO2WSetReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2WSetReply Clone() {
      return new ObjectO2WSetReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectO2WSetReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectO2WSetReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectO2WSetReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// ObjectO2PSet
  /// </summary>
  public sealed partial class ObjectO2PSetRequest : pb::IMessage<ObjectO2PSetRequest> {
    private static readonly pb::MessageParser<ObjectO2PSetRequest> _parser = new pb::MessageParser<ObjectO2PSetRequest>(() => new ObjectO2PSetRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectO2PSetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetRequest(ObjectO2PSetRequest other) : this() {
      handle_ = other.handle_;
      O2P = other.o2P_ != null ? other.O2P.Clone() : null;
      name_ = other.name_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetRequest Clone() {
      return new ObjectO2PSetRequest(this);
    }

    /// <summary>Field number for the "handle" field.</summary>
    public const int HandleFieldNumber = 1;
    private ulong handle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Handle {
      get { return handle_; }
      set {
        handle_ = value;
      }
    }

    /// <summary>Field number for the "o2p" field.</summary>
    public const int O2PFieldNumber = 2;
    private global::LDraw.API.M4x4 o2P_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LDraw.API.M4x4 O2P {
      get { return o2P_; }
      set {
        o2P_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    /// optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectO2PSetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectO2PSetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Handle != other.Handle) return false;
      if (!object.Equals(O2P, other.O2P)) return false;
      if (Name != other.Name) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Handle != 0UL) hash ^= Handle.GetHashCode();
      if (o2P_ != null) hash ^= O2P.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Handle != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Handle);
      }
      if (o2P_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(O2P);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Handle != 0UL) {
        size += 1 + 8;
      }
      if (o2P_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(O2P);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectO2PSetRequest other) {
      if (other == null) {
        return;
      }
      if (other.Handle != 0UL) {
        Handle = other.Handle;
      }
      if (other.o2P_ != null) {
        if (o2P_ == null) {
          o2P_ = new global::LDraw.API.M4x4();
        }
        O2P.MergeFrom(other.O2P);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Handle = input.ReadFixed64();
            break;
          }
          case 18: {
            if (o2P_ == null) {
              o2P_ = new global::LDraw.API.M4x4();
            }
            input.ReadMessage(o2P_);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ObjectO2PSetReply : pb::IMessage<ObjectO2PSetReply> {
    private static readonly pb::MessageParser<ObjectO2PSetReply> _parser = new pb::MessageParser<ObjectO2PSetReply>(() => new ObjectO2PSetReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ObjectO2PSetReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetReply(ObjectO2PSetReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ObjectO2PSetReply Clone() {
      return new ObjectO2PSetReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ObjectO2PSetReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ObjectO2PSetReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ObjectO2PSetReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// 4x4 matrix
  /// </summary>
  public sealed partial class M4x4 : pb::IMessage<M4x4> {
    private static readonly pb::MessageParser<M4x4> _parser = new pb::MessageParser<M4x4>(() => new M4x4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<M4x4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M4x4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M4x4(M4x4 other) : this() {
      m_ = other.m_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public M4x4 Clone() {
      return new M4x4(this);
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_m_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> m_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> M {
      get { return m_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as M4x4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(M4x4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!m_.Equals(other.m_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= m_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      m_.WriteTo(output, _repeated_m_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += m_.CalculateSize(_repeated_m_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(M4x4 other) {
      if (other == null) {
        return;
      }
      m_.Add(other.m_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            m_.AddEntriesFrom(input, _repeated_m_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 4-vector
  /// </summary>
  public sealed partial class Vec4 : pb::IMessage<Vec4> {
    private static readonly pb::MessageParser<Vec4> _parser = new pb::MessageParser<Vec4>(() => new Vec4());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LDraw.API.LDrawReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec4(Vec4 other) : this() {
      m_ = other.m_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec4 Clone() {
      return new Vec4(this);
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_m_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> m_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> M {
      get { return m_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!m_.Equals(other.m_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= m_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      m_.WriteTo(output, _repeated_m_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += m_.CalculateSize(_repeated_m_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec4 other) {
      if (other == null) {
        return;
      }
      m_.Add(other.m_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            m_.AddEntriesFrom(input, _repeated_m_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
