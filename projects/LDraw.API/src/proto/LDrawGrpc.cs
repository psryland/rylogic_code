// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LDraw.proto
// </auto-generated>
// Original file comments:
// LDraw RPC Interface definition
//
// To extend this interface:
//  1) Model the View3d.cs API
//  2) Add the new API function
//  3) Run 'BuildProto.py' to generate the LDraw.cs and LDrawGrpc.cs code
//  4) Edit 'GrpcService.LDrawService' and override the new API function (care with threading contexts)
//  5) Build LDraw (and LDraw.API by dependency)
//  6) Edit 'LDraw.API.Ldr' to wrap the new API call
//  7) Build LDraw.API again.
//  8) Use new API in third party progra
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace LDraw.API {
  /// <summary>
  /// Windows *************************************
  /// </summary>
  public static partial class LDrawService
  {
    static readonly string __ServiceName = "LDrawAPI.LDrawService";

    static readonly grpc::Marshaller<global::LDraw.API.WindowCurrentGetRequest> __Marshaller_WindowCurrentGetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.WindowCurrentGetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.WindowCurrentGetReply> __Marshaller_WindowCurrentGetReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.WindowCurrentGetReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.WindowAddObjectsRequest> __Marshaller_WindowAddObjectsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.WindowAddObjectsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.WindowAddObjectsReply> __Marshaller_WindowAddObjectsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.WindowAddObjectsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.WindowRemoveObjectsRequest> __Marshaller_WindowRemoveObjectsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.WindowRemoveObjectsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.WindowRemoveObjectsReply> __Marshaller_WindowRemoveObjectsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.WindowRemoveObjectsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.WindowRenderRequest> __Marshaller_WindowRenderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.WindowRenderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.WindowRenderReply> __Marshaller_WindowRenderReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.WindowRenderReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectCreateLdrRequest> __Marshaller_ObjectCreateLdrRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectCreateLdrRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectCreateLdrReply> __Marshaller_ObjectCreateLdrReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectCreateLdrReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectCreateInstancesRequest> __Marshaller_ObjectCreateInstancesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectCreateInstancesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectCreateInstancesReply> __Marshaller_ObjectCreateInstancesReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectCreateInstancesReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectDeleteRequest> __Marshaller_ObjectDeleteRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectDeleteRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectDeleteReply> __Marshaller_ObjectDeleteReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectDeleteReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectContextIdRequest> __Marshaller_ObjectContextIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectContextIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectContextIdReply> __Marshaller_ObjectContextIdReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectContextIdReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectO2WSetRequest> __Marshaller_ObjectO2WSetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectO2WSetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectO2WSetReply> __Marshaller_ObjectO2WSetReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectO2WSetReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectO2PSetRequest> __Marshaller_ObjectO2PSetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectO2PSetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LDraw.API.ObjectO2PSetReply> __Marshaller_ObjectO2PSetReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LDraw.API.ObjectO2PSetReply.Parser.ParseFrom);

    static readonly grpc::Method<global::LDraw.API.WindowCurrentGetRequest, global::LDraw.API.WindowCurrentGetReply> __Method_WindowCurrentGet = new grpc::Method<global::LDraw.API.WindowCurrentGetRequest, global::LDraw.API.WindowCurrentGetReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WindowCurrentGet",
        __Marshaller_WindowCurrentGetRequest,
        __Marshaller_WindowCurrentGetReply);

    static readonly grpc::Method<global::LDraw.API.WindowAddObjectsRequest, global::LDraw.API.WindowAddObjectsReply> __Method_WindowAddObjects = new grpc::Method<global::LDraw.API.WindowAddObjectsRequest, global::LDraw.API.WindowAddObjectsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WindowAddObjects",
        __Marshaller_WindowAddObjectsRequest,
        __Marshaller_WindowAddObjectsReply);

    static readonly grpc::Method<global::LDraw.API.WindowRemoveObjectsRequest, global::LDraw.API.WindowRemoveObjectsReply> __Method_WindowRemoveObjects = new grpc::Method<global::LDraw.API.WindowRemoveObjectsRequest, global::LDraw.API.WindowRemoveObjectsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WindowRemoveObjects",
        __Marshaller_WindowRemoveObjectsRequest,
        __Marshaller_WindowRemoveObjectsReply);

    static readonly grpc::Method<global::LDraw.API.WindowRenderRequest, global::LDraw.API.WindowRenderReply> __Method_WindowRender = new grpc::Method<global::LDraw.API.WindowRenderRequest, global::LDraw.API.WindowRenderReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WindowRender",
        __Marshaller_WindowRenderRequest,
        __Marshaller_WindowRenderReply);

    static readonly grpc::Method<global::LDraw.API.ObjectCreateLdrRequest, global::LDraw.API.ObjectCreateLdrReply> __Method_ObjectCreateLdr = new grpc::Method<global::LDraw.API.ObjectCreateLdrRequest, global::LDraw.API.ObjectCreateLdrReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ObjectCreateLdr",
        __Marshaller_ObjectCreateLdrRequest,
        __Marshaller_ObjectCreateLdrReply);

    static readonly grpc::Method<global::LDraw.API.ObjectCreateInstancesRequest, global::LDraw.API.ObjectCreateInstancesReply> __Method_ObjectCreateInstances = new grpc::Method<global::LDraw.API.ObjectCreateInstancesRequest, global::LDraw.API.ObjectCreateInstancesReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ObjectCreateInstances",
        __Marshaller_ObjectCreateInstancesRequest,
        __Marshaller_ObjectCreateInstancesReply);

    static readonly grpc::Method<global::LDraw.API.ObjectDeleteRequest, global::LDraw.API.ObjectDeleteReply> __Method_ObjectDelete = new grpc::Method<global::LDraw.API.ObjectDeleteRequest, global::LDraw.API.ObjectDeleteReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ObjectDelete",
        __Marshaller_ObjectDeleteRequest,
        __Marshaller_ObjectDeleteReply);

    static readonly grpc::Method<global::LDraw.API.ObjectContextIdRequest, global::LDraw.API.ObjectContextIdReply> __Method_ObjectContextId = new grpc::Method<global::LDraw.API.ObjectContextIdRequest, global::LDraw.API.ObjectContextIdReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ObjectContextId",
        __Marshaller_ObjectContextIdRequest,
        __Marshaller_ObjectContextIdReply);

    static readonly grpc::Method<global::LDraw.API.ObjectO2WSetRequest, global::LDraw.API.ObjectO2WSetReply> __Method_ObjectO2WSet = new grpc::Method<global::LDraw.API.ObjectO2WSetRequest, global::LDraw.API.ObjectO2WSetReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ObjectO2WSet",
        __Marshaller_ObjectO2WSetRequest,
        __Marshaller_ObjectO2WSetReply);

    static readonly grpc::Method<global::LDraw.API.ObjectO2PSetRequest, global::LDraw.API.ObjectO2PSetReply> __Method_ObjectO2PSet = new grpc::Method<global::LDraw.API.ObjectO2PSetRequest, global::LDraw.API.ObjectO2PSetReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ObjectO2PSet",
        __Marshaller_ObjectO2PSetRequest,
        __Marshaller_ObjectO2PSetReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LDraw.API.LDrawReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of LDrawService</summary>
    public abstract partial class LDrawServiceBase
    {
      /// <summary>
      /// Get the current window (SceneUI)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.WindowCurrentGetReply> WindowCurrentGet(global::LDraw.API.WindowCurrentGetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Add objects to a window
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.WindowAddObjectsReply> WindowAddObjects(global::LDraw.API.WindowAddObjectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Remove objects from a window
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.WindowRemoveObjectsReply> WindowRemoveObjects(global::LDraw.API.WindowRemoveObjectsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Render the current scene
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.WindowRenderReply> WindowRender(global::LDraw.API.WindowRenderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create LDraw objects from LDraw script
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.ObjectCreateLdrReply> ObjectCreateLdr(global::LDraw.API.ObjectCreateLdrRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Create a clone of an LDraw object
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.ObjectCreateInstancesReply> ObjectCreateInstances(global::LDraw.API.ObjectCreateInstancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete an LDraw object
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.ObjectDeleteReply> ObjectDelete(global::LDraw.API.ObjectDeleteRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the context Id for an LDraw object
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.ObjectContextIdReply> ObjectContextId(global::LDraw.API.ObjectContextIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set the object to world transform for an LDraw object
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.ObjectO2WSetReply> ObjectO2WSet(global::LDraw.API.ObjectO2WSetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Set the object to parent transform for an LDraw object
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LDraw.API.ObjectO2PSetReply> ObjectO2PSet(global::LDraw.API.ObjectO2PSetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for LDrawService</summary>
    public partial class LDrawServiceClient : grpc::ClientBase<LDrawServiceClient>
    {
      /// <summary>Creates a new client for LDrawService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public LDrawServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for LDrawService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public LDrawServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected LDrawServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected LDrawServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get the current window (SceneUI)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.WindowCurrentGetReply WindowCurrentGet(global::LDraw.API.WindowCurrentGetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WindowCurrentGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the current window (SceneUI)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.WindowCurrentGetReply WindowCurrentGet(global::LDraw.API.WindowCurrentGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WindowCurrentGet, null, options, request);
      }
      /// <summary>
      /// Get the current window (SceneUI)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.WindowCurrentGetReply> WindowCurrentGetAsync(global::LDraw.API.WindowCurrentGetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WindowCurrentGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the current window (SceneUI)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.WindowCurrentGetReply> WindowCurrentGetAsync(global::LDraw.API.WindowCurrentGetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WindowCurrentGet, null, options, request);
      }
      /// <summary>
      /// Add objects to a window
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.WindowAddObjectsReply WindowAddObjects(global::LDraw.API.WindowAddObjectsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WindowAddObjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add objects to a window
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.WindowAddObjectsReply WindowAddObjects(global::LDraw.API.WindowAddObjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WindowAddObjects, null, options, request);
      }
      /// <summary>
      /// Add objects to a window
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.WindowAddObjectsReply> WindowAddObjectsAsync(global::LDraw.API.WindowAddObjectsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WindowAddObjectsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Add objects to a window
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.WindowAddObjectsReply> WindowAddObjectsAsync(global::LDraw.API.WindowAddObjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WindowAddObjects, null, options, request);
      }
      /// <summary>
      /// Remove objects from a window
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.WindowRemoveObjectsReply WindowRemoveObjects(global::LDraw.API.WindowRemoveObjectsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WindowRemoveObjects(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove objects from a window
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.WindowRemoveObjectsReply WindowRemoveObjects(global::LDraw.API.WindowRemoveObjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WindowRemoveObjects, null, options, request);
      }
      /// <summary>
      /// Remove objects from a window
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.WindowRemoveObjectsReply> WindowRemoveObjectsAsync(global::LDraw.API.WindowRemoveObjectsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WindowRemoveObjectsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Remove objects from a window
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.WindowRemoveObjectsReply> WindowRemoveObjectsAsync(global::LDraw.API.WindowRemoveObjectsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WindowRemoveObjects, null, options, request);
      }
      /// <summary>
      /// Render the current scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.WindowRenderReply WindowRender(global::LDraw.API.WindowRenderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WindowRender(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Render the current scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.WindowRenderReply WindowRender(global::LDraw.API.WindowRenderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WindowRender, null, options, request);
      }
      /// <summary>
      /// Render the current scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.WindowRenderReply> WindowRenderAsync(global::LDraw.API.WindowRenderRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return WindowRenderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Render the current scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.WindowRenderReply> WindowRenderAsync(global::LDraw.API.WindowRenderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WindowRender, null, options, request);
      }
      /// <summary>
      /// Create LDraw objects from LDraw script
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectCreateLdrReply ObjectCreateLdr(global::LDraw.API.ObjectCreateLdrRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectCreateLdr(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create LDraw objects from LDraw script
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectCreateLdrReply ObjectCreateLdr(global::LDraw.API.ObjectCreateLdrRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ObjectCreateLdr, null, options, request);
      }
      /// <summary>
      /// Create LDraw objects from LDraw script
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectCreateLdrReply> ObjectCreateLdrAsync(global::LDraw.API.ObjectCreateLdrRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectCreateLdrAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create LDraw objects from LDraw script
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectCreateLdrReply> ObjectCreateLdrAsync(global::LDraw.API.ObjectCreateLdrRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ObjectCreateLdr, null, options, request);
      }
      /// <summary>
      /// Create a clone of an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectCreateInstancesReply ObjectCreateInstances(global::LDraw.API.ObjectCreateInstancesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectCreateInstances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a clone of an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectCreateInstancesReply ObjectCreateInstances(global::LDraw.API.ObjectCreateInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ObjectCreateInstances, null, options, request);
      }
      /// <summary>
      /// Create a clone of an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectCreateInstancesReply> ObjectCreateInstancesAsync(global::LDraw.API.ObjectCreateInstancesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectCreateInstancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a clone of an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectCreateInstancesReply> ObjectCreateInstancesAsync(global::LDraw.API.ObjectCreateInstancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ObjectCreateInstances, null, options, request);
      }
      /// <summary>
      /// Delete an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectDeleteReply ObjectDelete(global::LDraw.API.ObjectDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectDelete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectDeleteReply ObjectDelete(global::LDraw.API.ObjectDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ObjectDelete, null, options, request);
      }
      /// <summary>
      /// Delete an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectDeleteReply> ObjectDeleteAsync(global::LDraw.API.ObjectDeleteRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectDeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectDeleteReply> ObjectDeleteAsync(global::LDraw.API.ObjectDeleteRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ObjectDelete, null, options, request);
      }
      /// <summary>
      /// Get the context Id for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectContextIdReply ObjectContextId(global::LDraw.API.ObjectContextIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectContextId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the context Id for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectContextIdReply ObjectContextId(global::LDraw.API.ObjectContextIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ObjectContextId, null, options, request);
      }
      /// <summary>
      /// Get the context Id for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectContextIdReply> ObjectContextIdAsync(global::LDraw.API.ObjectContextIdRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectContextIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the context Id for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectContextIdReply> ObjectContextIdAsync(global::LDraw.API.ObjectContextIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ObjectContextId, null, options, request);
      }
      /// <summary>
      /// Set the object to world transform for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectO2WSetReply ObjectO2WSet(global::LDraw.API.ObjectO2WSetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectO2WSet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the object to world transform for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectO2WSetReply ObjectO2WSet(global::LDraw.API.ObjectO2WSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ObjectO2WSet, null, options, request);
      }
      /// <summary>
      /// Set the object to world transform for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectO2WSetReply> ObjectO2WSetAsync(global::LDraw.API.ObjectO2WSetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectO2WSetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the object to world transform for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectO2WSetReply> ObjectO2WSetAsync(global::LDraw.API.ObjectO2WSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ObjectO2WSet, null, options, request);
      }
      /// <summary>
      /// Set the object to parent transform for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectO2PSetReply ObjectO2PSet(global::LDraw.API.ObjectO2PSetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectO2PSet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the object to parent transform for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LDraw.API.ObjectO2PSetReply ObjectO2PSet(global::LDraw.API.ObjectO2PSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ObjectO2PSet, null, options, request);
      }
      /// <summary>
      /// Set the object to parent transform for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectO2PSetReply> ObjectO2PSetAsync(global::LDraw.API.ObjectO2PSetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ObjectO2PSetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Set the object to parent transform for an LDraw object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LDraw.API.ObjectO2PSetReply> ObjectO2PSetAsync(global::LDraw.API.ObjectO2PSetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ObjectO2PSet, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override LDrawServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new LDrawServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(LDrawServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_WindowCurrentGet, serviceImpl.WindowCurrentGet)
          .AddMethod(__Method_WindowAddObjects, serviceImpl.WindowAddObjects)
          .AddMethod(__Method_WindowRemoveObjects, serviceImpl.WindowRemoveObjects)
          .AddMethod(__Method_WindowRender, serviceImpl.WindowRender)
          .AddMethod(__Method_ObjectCreateLdr, serviceImpl.ObjectCreateLdr)
          .AddMethod(__Method_ObjectCreateInstances, serviceImpl.ObjectCreateInstances)
          .AddMethod(__Method_ObjectDelete, serviceImpl.ObjectDelete)
          .AddMethod(__Method_ObjectContextId, serviceImpl.ObjectContextId)
          .AddMethod(__Method_ObjectO2WSet, serviceImpl.ObjectO2WSet)
          .AddMethod(__Method_ObjectO2PSet, serviceImpl.ObjectO2PSet).Build();
    }

  }
}
#endregion
