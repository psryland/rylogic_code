//********************************************
// LDraw Demo Scene
//  Copyright (c) Rylogic Ltd 2002
//********************************************
//
//  Syntax:
//    LDraw script (.ldr) expects keywords to be preceded by a '*' character.
//    The syntax that follows the keyword depends on the particular keyword.
//    Braces, { and }, are used to define Sections which control the nesting of
//    data, and allow the parser to skip unrecognised blocks in the script.
//    The parser supports a C-Style preprocessor to allow macro substitutions.
//    Keywords are not case sensitive.
//
//  Summary:
//		*Keyword                    - keywords are identified by '*' characters
//		{// Section begin           - nesting of objects within sections implies parenting
//			// Line comment         - single line comments
//			/* Block comment */     - block comments
//			#eval{1+2}              - macro expression evaluation
//		}// Section end
//
//		C-style preprocessing
//		  #include "include_file"   - include other script files
//		  #define MACRO subst_text  - define text substitution macros
//		MACRO                       - macro substitution
//		  #undef MACRO              - un-defining of macros
//		  #ifdef MACRO              - nestable preprocessor controlled sections
//		  #elif MACRO
//		     #ifndef MACRO
//		     #endif
//		  #else
//		  #endif
//		  #lit
//		  	literal text
//		  #end
//
//  Definitions:
//    context_id - this is a GUID used to identify a source of objects. It allows
//        objects to be added/removed/refreshed in discrete sets.
//    axis_id - is an integer describing an axis number. It must be one
//        of \xc2\xb1""1, \xc2\xb1""2, \xc2\xb1""3 corresponding to \xc2\xb1""X, \xc2\xb1""Y, \xc2\xb1""Z respectively.
//    [field] - fields in square brackets mean optional fields.
//
//  Object Description format:
//       *ObjectType [name] [colour]
//       {
//          ...
//       }
//    The name and colour parameters are optional and have defaults of:
//       name     = <ObjectType>
//       colour   = FFFFFFFF

// Global flags, commands, includes, cameras, and lights
// Allow missing includes to be ignored and not cause errors\n
#ignore_missing "on"
#include "missing_file.ldr"

// Add an explicit dependency on another file. This is basically the same as an #include except
// the dependent file contents are not added to the script. This is useful for triggering an auto refresh.
#depend "trigger_update.txt"

// Minimal Example.
*Box minimal_example FFFF00FF // Object type, name, colour. Name and colour are optional.
{
	*Data {1}    // Object specific data. In this case, a cube with side-length = 1
}

// Object transforms.
// An example of applying a transform to an object.
*Box transforms_example FF00FF00
{
	*Data {1 2 1}
	*o2w
	{
		// All objects have an implicit object-to-parent transform that is identity.
		// Successive 'o2w' sections pre-multiply this transform for the object.
		// Fields within the 'o2w' section are applied in the order they are declared.

		// An empty 'o2w' is equivalent to an identity transform
		//*NonAffine {}                               // Indicates the given transform is intentionally non-affine
		*M4x4 {1 0 0 0  0 1 0 0  0 0 1 0  0 0 0 1}    // {xx xy xz xw  yx yy yz yw  zx zy zz zw  wx wy wz ww} - i.e. row major
		*M3x3 {1 0 0  0 1 0  0 0 1}                   // {xx xy xz  yx yy yz  zx zy zz} - i.e. row major
		//*Rand4x4 {0 1 0 2}                          // {cx cy cz r} - centre position, radius. Random orientation
		//*RandPos {0 1 0 2}                          // {cx cy cz r} - centre position, radius
		//*RandOri {}                                 // Randomises the orientation of the current transform
		*Align {3 0 1 0}                              // {axis_id dx dy dz } - direction vector, and axis id to align to that direction
		//*LookAt {0 0 0}                             // {x y z } - look at point
		*Quat {0 #eval{sin(pi/2)} 0 #eval{cos(pi/2)}} // {x y z s} - quaternion
		*QuatPos {0 1 0 0  1 -1 3}                    // {q.x q.y q.z q.s p.x p.y p.z} - quaternion position
		*Scale {1 1.2 1}                              // { sx sy sz } - multiples the lengths of x,y,z vectors of the current transform. Accepts 1 or 3 values
		*Normalise {}                                 // Normalises the lengths of the vectors of the current transform
		*Orthonormalise {}                            // Normalises the lengths and makes orthogonal the vectors of the current transform
		*Transpose {} *Transpose {}                   // Transposes the current transform
		*Inverse {} *Inverse {}                       // Inverts the current transform
		*Euler {55 30 60}                             // { pitch yaw roll } - all in degrees. Order of rotations is roll, pitch, yaw
		*Pos {-2.5 4 -0.8}                            // {x y z}
	}
}

// Object modifiers.
// There are a number of object modifiers that can be used to
// control the colour, texture, visibility, and animation of objects.
// These modifiers can be applied to any object (except where noted).
*Cone modifiers_example 80FFFFFF
{
	*Data {2 0 55}             // See *Cone example below for parameter meaning
	*AxisId {1}                // Axis to align the cone to. One of: X = \xc2\xb1""1, Y = \xc2\xb1""2, Z = \xc2\xb1""3
	*Colour {FFFF00FF}         // Override the base colour of the model
	*ColourMask {FF000000}     // applies: 'child.colour = (obj.base_colour & mask) | (child.base_colour & ~mask)' to all children recursively
	*Reflectivity {0.3}        // Reflectivity (used with environment mapping)
	*RandColour {}             // Apply a random colour to this object
	//*Hidden {}               // Object is created in an invisible state
	//*Wireframe {}            // Object is created with wireframe fill mode
	//*Font {...}              // A font to apply to this an all child objects. See Text example below
	*Animation                 // Add simple animation to this object
	{
		*Style {Continuous}    // Animation style, one of: NoAnimation, Once, Repeat, Continuous, PingPong
		*Period { 1.6 }        // The period of the animation in seconds
		*Velocity { 0 0 0 }    // Linear velocity vector in m/s
		//*Accel {0 -3 0}      // Linear acceleration vector in m/s^2
		*AngVelocity { 1 0 0 } // Angular velocity vector in rad/s
		//*AngAccel {0 0 0}    // Angular acceleration vector in rad/s^2
	}
	*Texture                   // Texture (only supported on some object types)
	{
		*FilePath {"#checker"} // Texture filepath, stock texture name (e.g. #white, #black, #checker), or texture id (e.g. #1, #3)
		*Addr {Wrap Wrap}      // Optional addressing mode for the texture; U, V. Options: Wrap, Mirror, Clamp, Border, MirrorOnce
		*Filter {Linear}       // Optional filtering of the texture. Options: Point, Linear, Anisotropic
		*Alpha {}              // Optional. Indicates the texture contains alpha pixels
		*o2w                   // Optional 3d texture coord transform
		{
			*Scale {2 2 2}
			*Euler {0 0 45}
		}
	}
	*o2w
	{
		*euler {0 0 90}
		*pos {15 7 -10}
	}
	//*NoZTest {}     // Don't depth-text
	//*NoZWrite {}    // Don't write to the Z buffer
	//*ScreenSpace {} // The object's '*o2w' transform is interpreted as a screen space position/orientation
	// Screen space coordinates are in the volume:
	//    (-1,-1, 0) = bottom, left, near plane
	//    (+1,+1,-1) = top, right, far plane
}

// Object Nesting.
// Nested objects are in the space of their parent so a parent transform is applied to all children.
*Sphere nesting0 A0FFFF00
{
	*Data {0.8 1.4 0.5}
	*o2w {*pos {0 5 -7}}
	*ColourMask { FF000000 } // This colour mask is applied to all child recursively
	*Sphere nested1 FF00FFFF
	{
		*Data {0.8 1.4 0.5}
		*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
		*Sphere nested2 FF00FFFF
		{
			*Data {0.8 1.4 0.5}
			*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
			*Sphere nested3 FF00FFFF
			{
				*Data {0.8 1.4 0.5}
				*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
				*Sphere nested4 FF00FFFF
				{
					*Data {0.8 1.4 0.5}
					*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
					*Sphere nested5 FF00FFFF
					{
						*Data {0.8 1.4 0.5}
						*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
					}
				}
			}
		}
	}
}

// Groups.
// Groups are a special object type that doesn't contain geometry
// but has a coordinate space and child objects.
*Group group
{
	//*Wireframe {}    // Object modifiers applied to groups are applied recursively to children within the group
	*Cylinder barrel FFE0A060
	{
		*Data {3 1}
		*AxisId{+2}
	}
	*Sphere bullet FF0000FF
	{
		*Data {0.7}
		*Animation
		{
			*Style {Repeat}    // Animation style, one of: NoAnimation, Once, Repeat, Continuous, PingPong
			*Period {3}        // The period of the animation in seconds
			*Velocity {0 10 0} // Linear velocity vector in m/s
			*Accel {0 -3 0}
		}
		*o2w{*pos{0 0 0}}
	}
	*Box box FF00FF00 { *Data{1 1 3} *o2w{*pos{0 -1.0 0}}}
	*Box box FF00FF00 { *Data{3 1 1} *o2w{*pos{0 -1.0 0}}}
	*o2w {*pos{-10 1.5 -5}}
}

// Model Instancing.
// An instance can be created from any previously defined object.
// The instance will share the renderable model from the object it is an instance of.
// Note that object modifiers of the object are not inherited by the instance.
*Cylinder instancing_example FF0000FF
{
	*Data {2 0.5}
	*AxisId {+2}
	*RandColour {} // Note: this will not be inherited by the instances
	*Hidden {}     // Don't show this instance
}
*Instance instancing_example FFFF0000 // The name indicates which model to instance
{
	*o2w {*Pos {15 1 -10}}
}
*Instance instancing_example FF0000FF
{
	*o2w {*Pos {15 3 -10}}
}
*Instance instancing_example FF00FF00
{
	*o2w {*Pos {15 5 -10}}
}

// Text.
// Text objects are textured quads that contain D2D rendered text.
// There is support for screen space, billboard, and full 3D text objects.

// Fonts declared at global scope set the default for following objects
// All fields are optional, replacing the default if given.
*Font
{
	*Name {"tahoma"}   // Font name
	*Size {18}         // Font size (in points)
	*Weight {300}      // Font weight (100 = ultra light, 300 = normal, 900 = heavy)
	*Style {Normal}    // Style. One of: Normal Italic Oblique
	*Stretch {5}       // Stretch. 1 = condensed, 5 = normal, 9 = expanded
	//*Underline {}    // Underlined text
	//*Strikeout {}    // Strikethrough text
}

// Screen space text.
*Text camera_space_text
{
	*ScreenSpace {} // This modifier tell Ldraw to treat the object transform as a screen space position/orientation

	// Text data is concatenated, with changes of style/font applied.
	// Text containing multiple lines has the line-end whitespace and indentation tabs removed.
	*Font { *Name {"Times New Roman"} *Colour {FF0000FF} *Size{18}}
	*Data
	{
		"This is camera space 
		text with new lines, and 
		"
	}
	*Font {*Colour {FF00FF00} *Size{24} *Style{Oblique}}
	*Data
	{
		"with varying colours 
		and "
	}
	*Font {*Colour {FFFF0000} *Weight{800} *Style{Italic} *Strikeout {}}
	*Data
	{
		"stiles "
	}
	*Font {*Colour {FFFFFF00} *Style{Italic} *Underline {}}
	*Data
	{
		"styles "
	}

	// The background colour of the quad
	*BackColour {40A0A0A0}

	// Anchor defines the origin of the quad. (-1,-1) = bottom,left. (0,0) = centre (default). (+1,+1) = top,right
	// This is the point that the object transform is applied to.
	*Anchor {-1 +1}

	// Padding between the quad boundary and the text
	*Padding {10 20 10 10}

	// *o2w is interpreted as a 'text to camera space' transform
	// (-1,-1,0) is the lower left corner on the near plane.
	// (+1,+1,1) is the upper right corner on the far plane.
	// The quad is automatically scaled to make the text unscaled on-screen
	*o2w {*pos{-1, +1, 0}}
}

// Billboard text always faces the camera and has the same size independent of distance
*Text billboard_text
{
	*Font {*Colour {FF00FF00}} // Note: Font changes must come before text that uses the font
	*Data {"Billboard text!!"}
	*Billboard {}

	*Anchor {0 0}
	*BackColour {FF308080}

	// The rotational part of *o2w is ignored, only the 3d position is used
	*o2w {*pos{-15,3,5}}
	
	// Create a poll for the billboard 
	*Cylinder poll FF202020 { *Data {4 0.1} *AxisId{+2} *o2w{*pos{0 -1.2 -0.2}}}
}

// Billboard 3D text always faces the camera and scales with distance
*Text billboard3d_text
{
	*Font {*Colour {FF0000FF} *Size{100}}
	*Data {"3D Billboard text!!"}
	*Billboard3D {}

	*Anchor {0 0}
	*BackColour {FF308080}

	// The rotational part of *o2w is ignored, only the 3d position and scale is used
	*o2w {*pos{-18,3,5}}

	// Create a poll for the billboard 
	*Cylinder poll FF202020 { *Data {4 0.1} *AxisId{+2} *o2w{*pos{0 -1.2 -0.2}}}
}

// Texture quad containing text
*Text three_dee_text
{
	*Font {*Name {"Courier New"} *Size {16}}

	// Normal text string, everything between quotes (including new lines)
	*Data
	{
		"LDraw Demo Scene

		This scene contains an example of every supported
		object type. This particular object is an example
		of normal 3D text. 

		"
	}

	// Text can also be given as a C-Style string that uses escape characters.
	// Everything between matched quotes (including new lines, although
	// indentation tabs are not removed for C-Style strings)
	*CString
	{
		"There is also support for \n \"C-Style\" strings"
	}

	*AxisId {+3}    // Optional. Set the direction of the quad normal. One of: X = \xc2\xb1""1, Y = \xc2\xb1""2, Z = \xc2\xb1""3
	*Format         // Optional
	{
		Left      // Horizontal alignment. One of: Left, CentreH, Right
		Top       // Vertical Alignment. One of: Top, CentreV, Bottom
		Wrap      // Text wrapping. One of: NoWrap, Wrap, WholeWord, Character, EmergencyBreak
	}
	*BackColour {FFA0E0E0}
	*o2w {*scale{8} *pos{0 7 -20} }
}

// 2D Shapes ***********************************************

// An "infinite" plane.
*Plane ground FFFFE8A0
{
	*Data {40 40} // Width, height. Quad position is 0,0,0 and normal is Z axis. Use *o2w to position and orient the plane
	*AxisId {+2}  // Optional. Axis to align the plane to. One of: X = \xc2\xb1""1, Y = \xc2\xb1""2, Z = \xc2\xb1""3
	*Texture      // Optional. Planes can have a texture applied. See 'object_modifiers' example above
	{
		*FilePath {"#checker3"}
		*Addr {Wrap Wrap}
		*o2w {*Scale{10 10 1}}
	}
}

// A circle or ellipse
*Circle circle
{
	*Data {1.6}     // {radius}
	*AxisId {+3}    // Optional, normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z 
	*Solid {}       // Optional, if omitted then the circle is an outline only
	*RandColour {}  // Object colour is the outline colour
	*Animation
	{
		*Style {Continuous}
		*Period {1.6}
		*AngVelocity {0.9 1 0}
	}
	*o2w {*pos{5 3 -5}}
}
*Circle ellipse FF0000FF
{
	*Data {0.8 1.6}   // radiusx, radiusy
	*AxisId {+1}      // Optional, normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*Solid {}         // Optional, if omitted then the circle is an outline only
	*RandColour {}    // Object colour is the outline colour
	*Animation
	{
		*Style {Continuous}
		*Period {1.6}
		*AngVelocity {-1 -0.9 0}
	}
	*o2w {*pos{5 3 -5}}
}

// A pie or wedge\n
*Pie pie FF00FFFF
{
	*Data {-90 145 0.4 1.7} // {start-angle, end-angle, inner radius, outer radius}. Angles in degress (from the 'x' axis). Equal values creates a ring
	*AxisId {+3}            // Optional, normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*Scale {1.0 1.0}        // Optional, X,Y scale factors
	*Solid {}               // Optional, if omitted then the shape is an outline only
	*RandColour {}          // Object colour is the outline colour
	*Animation
	{
		*Style {Continuous}
		*Period {1.6}
		*AngVelocity {0 0 1}
	}
	*o2w {*pos{8 3 -5}}
}

// A rectangle
*Rect rect FF0000FF
{
	*Data {2.2 2.3}        // {width, height}. If height is omitted, height = width
	*AxisId {+2}           // Optional, normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*Solid {}              // Optional, if omitted then the shape is an outline only
	*CornerRadius {0.5}    // Optional corner radius for rounded corners
	*Facets {8}            // Optional, controls the smoothness of the corners
	*o2w {*pos{9 3 -5}}
}

// A 2D polygon
*Polygon poly
{
	//*PerItemColour
	*Data
	{
		1.0f, 3.0f   // A list of 2D points with CCW winding order describing the polygon
		1.4f, 1.7f   // Optionally followed by a colour per vertex if *PerItemColour is present
		0.4f, 2.0f   // Note: C-style floating point literals are supported
		1.5f, 1.2f
		1.0f, 0.0f
		1.7f, 1.0f
		2.5f, 0.5f
		2.0f, 1.5f
		2.0f, 2.0f
		1.5f, 2.5f
	}
	*AxisId {3}          // Optional, Normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*Solid {}            // Optional, Filled polygon
	*RandColour {}       // Object colour is the outline colour
	*o2w {*scale{1.5} *pos{ 4 -1 -3}}
}

// A list of triangles
*Triangle triangle
{
	*PerItemColour {}
	*Data
	{
		// Three corner points of the triangle, optionally followed by a colour per vertex
		// The list should contain a multiple of three points.
		+1.5 0 -1.5 FF00FF00
		-1.5 0 -1.5 FFFF0000
		+0.0 0 +1.5 FF0000FF
	}
	*Texture {*FilePath {"#checker3"}} // Optional texture
	*o2w {*euler{45 0 0 } *pos{8 3 -10}}
}

// A quad given by 4 corner points
*Quad quad
{
	*PerItemColour {}
	*Data
	{
		// Four corner points of the quad, followed by an optional vertex colour
		// Corner order should be 'S' layout
		// i.e. (-x,-y)  (x,-y)  (-x,y)  (x,y)
		-1.5 -1.5 0 FFFF0000
		+1.5 -1.5 0 FF00FF00
		-1.5  1.5 0 FF0000FF
		+1.5  1.5 0 FFFF00FF
	}
	*Texture // Optional texture
	{
		*FilePath {"#checker"}                            // texture filepath, stock texture name (e.g. #white, #black, #checker), or texture id (e.g. #1, #3)
		*Addr {Clamp Clamp}                               // Optional addressing mode for the texture; U, V. Options: Wrap, Mirror, Clamp, Border, MirrorOnce
		*Filter {Linear}                                  // Optional filtering of the texture. Options: Point, Linear, Anisotropic
		*o2w {*scale{4 4 1} *pos{-2 -2 0} *euler{0 0 10}} // Optional 3d texture coord transform
	}
	*o2w {*scale {1.3} *euler{-20 0 0 } *pos{4 4 -10}}
}

// A triangle strip of quads following a line
*Ribbon ribbon
{
	*PerItemColour {}
	*Data
	{
		// Vertices of the central line of the ribbon, followed by an optional colour per vertex
		+0  0 -2 FFFF0000
		-1  0 -2 FFFF0000
		+0  1 -1 FF00FF00
		+1  0  0 FFFFFF00
		+0 -1 +1 FF00FFFF
		-1  0 +2 FF0000FF
		+0  0 +2 FF0000FF
	}
	*Width {0.5}                       // Optional. Width (in world space) (default 10)
	*Smooth {}                         // Optional. Generates a spline through the points
	*Texture{*FilePath {"#checker2"}}  // Optional texture repeated along each quad of the ribbon
	*o2w {*pos{10 2 0}}
}


#if 0
			// 3D Shapes
			"// A box\n"
			"*Box box\n"
			"{\n"
			"	0.6 1.2 0.9  // Width, [height], [depth]. Accepts 1, 2, or 3 dimensions. 1=cube, 2=rod, 3=arbitrary box\n"
			"	*RandColour\n"
			"	*o2w{*pos{-5 0.6 5}}\n"
			"}\n"
			"\n"
			"// A box between two points with a width and height in the other two directions\n"
			"*Bar bar\n"
			"{\n"
			"	0 0 0  3 3 0  0.3 0.2   // x0 y0 z0  x1 y1 z1  width [height]. height = width if omitted\n"
			"	*Up {0 1 0}             // Optional. Controls the orientation of width and height for the box\n"
			"	*RandColour\n"
			"	*o2w{*pos{-6.8 0 5}}\n"
			"}\n"
			"\n"
			"// A list of boxes all with the same dimensions at the given locations\n"
			"*BoxList box_stack\n"
			"{\n"
			"	+0.4  0.2  0.5 // Box dimensions: width, height, depth.\n"
			"	-1.0 0.0 0.0 // locations: x,y,z\n"
			"	-0.5 0.0 0.0\n"
			"	 0.0 0.0 0.0\n"
			"	 0.5 0.0 0.0\n"
			"	 1.0 0.0 0.0\n"
			"	-0.75 0.25 0.0\n"
			"	-0.25 0.25 0.0\n"
			"	 0.25 0.25 0.0\n"
			"	 0.75 0.25 0.0\n"
			"	-0.5 0.5 0.0\n"
			"	 0.0 0.5 0.0\n"
			"	 0.5 0.5 0.0\n"
			"	-0.25 0.75 0.0\n"
			"	 0.25 0.75 0.0\n"
			"	 0.0 1.0 0.0\n"
			"	*o2w{*pos{-8 0.1 5}}\n"
			"}\n"
			"\n"
			"// A frustum given by width, height, near plane and far plane.\n"
			"// Width, Height given at '*ViewPlaneZ' if given, falling back to 'near' if not zero, otherwise 1.0.\n"
			"// Frusta grow down the -z axis to be consistent with typical camera views\n"
			"*FrustumWH frustumwh\n"
			"{\n"
			"	2 2 0 1.5                           // width, height, near plane, far plane.\n"
			"	*AxisId {2}                         // Optional. Main axis direction of the frustum: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z\n"
			"	*ViewPlaneZ { 2 }                   // Optional. The distance at which the frustum has dimensions width,height\n"
			"	*Animation { *Style Continuous *Period { 1.6 } *AngVelocity { 0 1 0 } }	\n"
			"	*RandColour\n"
			"	*o2w{*pos{-10 4 8}}\n"
			"}\n"
			"\n"
			"// A frustum given by field of view (in Y), aspect ratio, and near and far plane distances.\n"
			"*FrustumFA frustumfa\n"
			"{\n"
			"	90 1 0.4 1.5                        // fovY, aspect, near plane, far plane. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z\n"
			"	*AxisId {-2}                        // Optional. Main axis direction of the frustum: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z\n"
			"	*Animation { *Style Continuous *Period { 1.6 } *AngVelocity { 0 -1 0 } }	\n"
			"	*RandColour\n"
			"	*o2w{*pos{-10 3.6 8}}\n"
			"}\n"
			"\n"
			"// A sphere given by radius\n"
			"*Sphere sphere\n"
			"{\n"
			"	1.25                                 // radius\n"
			"	*Facets {3}                          // Optional. Controls the faceting of the sphere\n"
			"	*Texture                             // Optional texture\n"
			"	{\n"
			"		*FilePath {\"#checker2\"}\n"
			"		*Addr {Wrap Wrap}\n"
			"		*o2w {*scale{10 10 1}}\n"
			"	}\n"
			"	*Animation { *Style Continuous *Period { 1.6 } *AngVelocity { 0 0 +1 } }	\n"
			"	*RandColour\n"
			"	*o2w{*euler{90 0 0} *pos{-10 1.25 8}}\n"
			"}\n"
			"*Group\n"
			"{\n"
			"	*Sphere ellipsoid\n"
			"	{\n"
			"		1.5 0.3 1.5                      // xradius [yradius] [zradius]\n"
			"		*RandColour\n"
			"		*o2w{*euler{45 0 0}}\n"
			"	}\n"
			"	*Animation { *Style Continuous *Period { 1.6 } *AngVelocity { 0 +1 0 } }	\n"
			"	*o2w{*pos{-10 6.2 8}}\n"
			"}\n"
			"\n"
			"// A cylinder given by axis number, height, and radius\n"
			"*Group cylinder\n"
			"{\n"
			"	*Cylinder\n"
			"	{\n"
			"		2 0.5                             // height, radius\n"
			"		*AxisId {2}                       // Optional. Major axis: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z (default +3)\n"
			"		*Facets {3,50}                    // Optional. layers, wedges. controls the faceting of the cylinder\n"
			"		*Texture {*FilePath {\"#checker3\"}}            // Optional texture\n"
			"		*RandColour\n"
			"		*o2w{*euler{20 0 0}}\n"
			"	}\n"
			"	*Animation { *Style Continuous *Period { 1.6 } *AngVelocity { 0 +1 0 } }	\n"
			"	*o2w{*pos{-14 1.1 10}}\n"
			"}\n"
			"*Group cylinder2 \n"
			"{\n"
			"	*Cylinder\n"
			"	{\n"
			"		2 0.5 0                           // height, base radius, [tip radius].\n"
			"		*AxisId {2}                       // Optional. Major axis: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z (default +3)\n"
			"		*Facets {3,50}                    // Optional. layers, wedges. controls the faceting of the cylinder\n"
			"		*Texture {*FilePath {\"#checker3\"}}            // Optional texture\n"
			"		*RandColour\n"
			"		*o2w{*euler{-20 0 0}}\n"
			"	}\n"
			"	*Animation { *Style Continuous *Period { 1.6 } *AngVelocity { 0 +1 0 } }	\n"
			"	*o2w{*pos{-14 3.3 10}}\n"
			"}\n"
			"\n"
			"// A cone given by axis number, two heights, and solid angle\n"
			"*Cone cone FF00FFFF\n"
			"{\n"
			"	0.3 2.0 25                        // tip-to-top distance, tip-to-base distance, solid angle(deg).\n"
			"	*AxisId {2}                       // Optional. Major axis: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z (default +3)\n"
			"	*Facets {3,50}                    // Optional. layers, wedges. controls the faceting of the cylinder\n"
			"	*Scale {1 1}                      // Optional. X,Y scale factors\n"
			"	*Texture {*FilePath {\"#checker3\"}}            // Optional texture\n"
			"	*RandColour\n"
			"	*o2w{*euler{65 120 0} *pos{-12 0.5 12}}\n"
			"}\n"
			"\n"
			"// An extrusion along a path\n"
			"*Tube tube FFFFFFFF\n"
			"{\n"
			"	*Style\n"
			"	{\n"
			"		// The cross section type; one of Round, Square, CrossSection\n"
			"		//Round 0.2 0.3  // Elliptical profile. radius X [radius Y]  \n"
			"		//Square 0.2 0.3 // Rectangular profile. radius X [radius Y]\n"
			"		CrossSection     // <list of X,Y pairs> Arbitrary profile\n"
			"		-0.2 -0.2\n"
			"		+0.2 -0.2\n"
			"		+0.05 +0.0\n"
			"		+0.2 +0.2\n"
			"		-0.2 +0.2\n"
			"		-0.05 +0.0\n"
			"		*Facets { 50 }  // Optional. Used for Round cross section profiles\n"
			"		//*Smooth       // Optional. Use smooth normals for the walls of the tube\n"
			"	}\n"
			"	*PerItemColour\n"
			"	0  1  0 FFFF0000      // Vertices of the extrusion path, optionally followed by a colour per vertex\n"
			"	0  0  1 FF00FF00\n"
			"	0  1  2 FF0000FF\n"
			"	1  1  2 FFFF00FF\n"
			"	*Smooth               // Optional. Generates a spline through the extrusion path\n"
			"	*Closed               // Optional. Fills in the end caps of the tube\n"
			"	\n"
			"	*o2w{*scale{1.8} *euler{0 20 -40} *pos{-7 0.2 10}}\n"
			"}\n"
			"\n"
			"// A mesh of lines, faces, or tetrahedra.\n"
			"// Syntax:\n"
			"//	*Mesh [name] [colour]\n"
			"//	{\n"
			"//		*Verts { x y z ... }\n"
			"//		[*Normals { nx ny nz ... }]                            // One per vertex\n"
			"//		[*Colours { c0 c1 c2 ... }]                            // One per vertex\n"
			"//		[*TexCoords { tx ty ... }]                             // One per vertex\n"
			"//		*Faces { f00 f01 f02  f10 f11 f12  f20 f21 f22  ...}   // Indices of faces\n"
			"//		*Lines { l00 l01  l10 l11  l20 l21  l30 l31 ...}       // Indices of lines\n"
			"//		*Tetra { t00 t01 t02 t03  t10 t11 t12 t13 ...}         // Indices of tetrahedra\n"
			"//		[GenerateNormals]                                      // Only works for faces or tetras\n"
			"//	}\n"
			"// Each 'Faces', 'Lines', 'Tetra' block is a sub-model within the mesh\n"
			"// Vertex, normal, colour, and texture data must be given before faces, lines, or tetra data\n"
			"// Textures must be defined before faces, lines, or tetra\n"
			"*Mesh mesh 80FFFF00\n"
			"{\n"
			"	*Verts\n"
			"	{\n"
			"		+0.351416f, +3.386084f, +1.194482f\n"
			"		+1.318017f, +3.211035f, +1.136084f\n"
			"		+0.393164f, +3.005762f, +1.127832f\n"
			"		+0.295410f, +4.318945f, +1.079639f\n"
			"		+0.460693f, +2.322070f, +1.025537f\n"
			"		+1.224560f, +3.863135f, +1.000879f\n"
			"		+1.219873f, +2.877783f, +0.975586f\n"
			"		+0.064502f, +3.908057f, +0.967041f\n"
			"		+0.108838f, +2.727783f, +0.868115f\n"
			"		-0.331543f, +3.136865f, +0.850781f\n"
			"		-0.059131f, +1.813574f, +0.804053f\n"
			"		+0.961719f, +2.062647f, +0.780957f\n"
			"		+0.866992f, +2.758594f, +0.764746f\n"
			"		+1.645215f, +3.544043f, +0.724121f\n"
			"		+0.845312f, +4.420264f, +0.705859f\n"
			"		+1.049170f, +1.556592f, +0.505371f\n"
			"		-0.429444f, +4.395215f, +0.465820f\n"
			"		-0.722754f, +2.245068f, +0.409619f\n"
			"		-0.075293f, +1.249219f, +0.377637f\n"
			"		+0.754346f, +1.191748f, +0.356738f\n"
			"		-0.568946f, +4.141357f, +0.354785f\n"
			"		+1.368359f, +4.153516f, +0.338574f\n"
			"		+1.138184f, +0.268750f, +0.322607f\n"
			"		+1.696728f, +3.140186f, +0.290869f\n"
			"		-0.556787f, +2.931836f, +0.273096f\n"
			"		-0.072412f, +0.381494f, +0.271680f\n"
			"		+1.229932f, +2.765625f, +0.235547f\n"
			"		-1.652784f, +5.173975f, +0.223096f\n"
			"		-1.182032f, +4.723486f, +0.212256f\n"
			"		+0.402002f, +4.687012f, +0.210254f\n"
			"		-0.164551f, +4.514942f, +0.129102f\n"
			"		-0.622901f, +3.897412f, +0.128223f\n"
			"		-1.031153f, +5.016797f, +0.107715f\n"
			"		+0.374219f, +0.592969f, +0.090723f\n"
			"		+1.520703f, +2.232666f, +0.084619f\n"
			"		+1.434863f, +1.796387f, +0.071289f\n"
			"		+0.644043f, +0.262647f, +0.022803f\n"
			"		+1.481885f, +0.401758f, -0.068555f\n"
			"		+1.295850f, +3.250195f, -0.075000f\n"
			"		-1.853272f, +5.510547f, -0.093994f\n"
			"		-0.835791f, +1.622217f, -0.105664f\n"
			"		-1.715772f, +4.704102f, -0.163476f\n"
			"		-0.980860f, +4.126855f, -0.166504f\n"
			"		+0.970068f, +4.426904f, -0.181494f\n"
			"		-1.817920f, +4.206445f, -0.229883f\n"
			"		-0.516358f, +3.946533f, -0.240186f\n"
			"		-0.717627f, +4.458545f, -0.240186f\n"
			"		+0.849951f, +4.012989f, -0.265723f\n"
			"		-1.010010f, +2.428467f, -0.279590f\n"
			"		-0.213916f, +1.078467f, -0.311963f\n"
			"		-2.137696f, +4.535791f, -0.313769f\n"
			"		-0.421240f, +4.532178f, -0.319287f\n"
			"		+0.341357f, +0.692578f, -0.320947f\n"
			"		+0.151465f, +4.642627f, -0.352588f\n"
			"		+1.242090f, +0.771240f, -0.366846f\n"
			"		+1.013623f, +0.994287f, -0.368652f\n"
			"		-2.199170f, +5.383154f, -0.418994f\n"
			"		-0.268799f, +0.263721f, -0.445215f\n"
			"		-0.364649f, +3.996777f, -0.482861f\n"
			"		-0.249854f, +5.006201f, -0.483984f\n"
			"		+0.539551f, +0.510840f, -0.503027f\n"
			"		-0.306201f, +0.742090f, -0.519629f\n"
			"		+0.194385f, +4.485449f, -0.519873f\n"
			"		-1.447657f, +5.075830f, -0.530371f\n"
			"		-0.534766f, +3.425488f, -0.566113f\n"
			"		+1.381543f, +2.615527f, -0.622998f\n"
			"		+1.409033f, +0.265479f, -0.634863f\n"
			"		-0.025537f, +4.078271f, -0.659229f\n"
			"		-0.875098f, +0.442871f, -0.673340f\n"
			"		+0.876074f, +3.271680f, -0.698828f\n"
			"		-2.050196f, +5.625635f, -0.810986f\n"
			"		+1.535547f, +1.445068f, -0.814795f\n"
			"		+0.183691f, +3.575342f, -0.844043f\n"
			"		-0.779737f, +3.121729f, -0.868652f\n"
			"		+1.497363f, +0.862647f, -0.892383f\n"
			"		-2.259864f, +4.855664f, -0.915430f\n"
			"		-1.931494f, +4.681055f, -0.974219f\n"
			"		+1.852490f, +0.361231f, -0.993701f\n"
			"		-0.737158f, +1.574219f, -1.052539f\n"
			"		-1.816406f, +5.211328f, -1.062012f\n"
			"		-0.927490f, +0.265576f, -1.119775f\n"
			"		-0.122901f, +4.839355f, -1.130811f\n"
			"		-1.019776f, +5.346924f, -1.168066f\n"
			"		+1.580762f, +2.394727f, -1.177442f\n"
			"		+1.010498f, +3.229443f, -1.358008f\n"
			"		+1.988818f, +2.093408f, -1.386182f\n"
			"		-1.321338f, +1.628320f, -1.428223f\n"
			"		-1.030127f, +4.727490f, -1.445117f\n"
			"		-0.935352f, +2.226953f, -1.461328f\n"
			"		-0.068604f, +3.435107f, -1.461816f\n"
			"		-0.588282f, +5.584619f, -1.477100f\n"
			"		-1.530030f, +5.180615f, -1.502051f\n"
			"		-1.324952f, +5.621680f, -1.555811f\n"
			"		+2.065283f, +1.355713f, -1.559033f\n"
			"		+1.737158f, +0.769434f, -1.572608f\n"
			"		-0.854541f, +0.753809f, -1.593115f\n"
			"		-0.828662f, +2.978076f, -1.632520f\n"
			"		-1.532129f, +5.288428f, -1.768115f\n"
			"		-0.740967f, +4.762256f, -1.776465f\n"
			"		-0.992481f, +4.668994f, -1.818115f\n"
			"		-1.317823f, +2.186035f, -1.825928f\n"
			"		-1.173389f, +5.538965f, -1.909766f\n"
			"		-0.998682f, +0.839404f, -1.918701f\n"
			"		+2.015186f, +2.310889f, -1.974903f\n"
			"		-1.341553f, +1.631934f, -2.061621f\n"
			"		+1.554541f, +3.217578f, -2.127539f\n"
			"		+2.071338f, +1.522949f, -2.135645f\n"
			"		-0.580371f, +3.186328f, -2.180225f\n"
			"		-0.831250f, +2.498047f, -2.307959f\n"
			"		+1.608984f, +0.265576f, -2.323486f\n"
			"		+1.684131f, +0.515430f, -2.337500f\n"
			"		+1.164599f, +3.601856f, -2.393994f\n"
			"		+0.537500f, +3.762402f, -2.437598f\n"
			"		+1.998291f, +2.098584f, -2.460352f\n"
			"		-1.074707f, +1.468311f, -2.497998f\n"
			"		-0.075391f, +3.611621f, -2.539746f\n"
			"		-0.649512f, +0.267578f, -2.741553f\n"
			"		+0.013232f, +0.268799f, -2.746143f\n"
			"		+1.690918f, +1.085547f, -2.756787f\n"
			"		+1.770019f, +2.517432f, -2.757568f\n"
			"		+1.456006f, +0.730225f, -2.762988f\n"
			"		-0.628369f, +0.710254f, -2.821924f\n"
			"		-0.946631f, +2.137695f, -2.833789f\n"
			"		-0.660205f, +2.691650f, -2.890674f\n"
			"		-0.594336f, +3.199512f, -2.961133f\n"
			"		+1.419092f, +3.009424f, -3.121387f\n"
			"		+1.705859f, +1.869092f, -3.144238f\n"
			"		-0.695508f, +1.102148f, -3.154590f\n"
			"		+0.303711f, +3.473584f, -3.188477f\n"
			"		-0.786768f, +1.734717f, -3.196777f\n"
			"		+1.453809f, +0.854443f, -3.213867f\n"
			"		-0.084229f, +0.648926f, -3.269629f\n"
			"		+1.288086f, +0.266748f, -3.363281f\n"
			"		+0.989258f, +3.226611f, -3.387793f\n"
			"		-0.474707f, +2.577344f, -3.412060f\n"
			"		+0.279541f, +0.264697f, -3.523535f\n"
			"		+1.289746f, +2.575586f, -3.592383f\n"
			"		+0.121631f, +1.251270f, -3.705176f\n"
			"		-0.348584f, +2.072119f, -3.708838f\n"
			"		+0.849121f, +0.264014f, -3.718897f\n"
			"		+1.023047f, +1.517871f, -3.761768f\n"
			"		+0.110791f, +2.755762f, -3.807031f\n"
			"		+1.012402f, +2.001758f, -3.857959f\n"
			"		+0.464599f, +1.589307f, -3.872168f\n"
			"		+0.154394f, +1.087891f, -3.998828f\n"
			"		+1.122412f, +1.284912f, -4.100586f\n"
			"		+0.487890f, +1.584229f, -4.149805f\n"
			"		+0.540429f, +1.163672f, -4.211621f\n"
			"	}\n"
			"	*Faces\n"
			"	{\n"
			"		88,  108,  100,  110,  120,  118,  92,  82,  90,  69,  65,  84,  88,  78,  48,  122,  129,  100,  6,  1,  2,  127,  137,  131,  56,  75,  50,  121,  114,  127,  55,  60,\n"
			"		54,  114,  102,  86,  33,  36,  60,  61,  95,  68,  45,  58,  64,  146,  145,  147,  70,  75,  56,  45,  42,  46,  0,  9,  2,  62,  81,  53,  77,  94,  74,  87,\n"
			"		99,  58,  124,  134,  123,  142,  130,  140,  101,  99,  97,  140,  145,  146,  119,  136,  125,  141,  142,  143,  4,  11,  12,  112,  128,  115,  10,  19,  15,  124,  141,  134,\n"
			"		67,  72,  58,  20,  50,  44,  8,  9,  24,  48,  17,  24,  42,  45,  31,  39,  70,  56,  30,  53,  59,  29,  53,  30,  46,  30,  51,  3,  14,  29,  0,  5,\n"
			"		7,  141,  143,  138,  43,  14,  21,  127,  131,  121,  10,  17,  18,  64,  48,  24,  71,  55,  74,  57,  61,  68,  116,  117,  80,  8,  10,  4,  115,  128,  124,  21,\n"
			"		14,  5,  111,  112,  84,  51,  45,  46,  105,  125,  111,  80,  117,  22,  56,  27,  39,  96,  108,  88,  78,  95,  49,  26,  11,  34,  51,  87,  58,  139,  145,  132,\n"
			"		141,  124,  128,  123,  134,  122,  25,  57,  36,  80,  68,  95,  116,  121,  117,  105,  111,  84,  141,  128,  133,  106,  126,  113,  85,  93,  103,  100,  86,  88,  8,  17,\n"
			"		10,  95,  86,  102,  89,  112,  115,  4,  12,  8,  86,  95,  78,  92,  101,  97,  68,  80,  57,  16,  7,  3,  37,  54,  22,  28,  20,  16,  1,  5,  2,  26,\n"
			"		65,  69,  53,  90,  59,  5,  13,  21,  122,  100,  108,  31,  45,  64,  36,  33,  25,  46,  42,  76,  64,  73,  48,  22,  60,  36,  107,  89,  115,  76,  79,  46,\n"
			"		47,  23,  38,  67,  69,  72,  16,  20,  7,  47,  69,  62,  93,  110,  106,  9,  8,  2,  141,  138,  134,  132,  22,  135,  117,  131,  135,  136,  126,  142,  65,  26,\n"
			"		34,  48,  96,  88,  84,  83,  105,  35,  55,  71,  82,  87,  51,  104,  86,  100,  75,  44,  50,  70,  79,  75,  16,  3,  30,  146,  144,  137,  59,  82,  51,  119,\n"
			"		125,  103,  5,  1,  13,  118,  130,  126,  47,  38,  69,  125,  105,  103,  99,  87,  91,  96,  89,  107,  105,  83,  85,  36,  80,  22,  20,  9,  7,  35,  34,  15,\n"
			"		62,  69,  67,  140,  146,  143,  146,  147,  144,  83,  71,  85,  89,  96,  64,  109,  22,  132,  40,  78,  49,  71,  83,  65,  57,  25,  61,  132,  145,  140,  104,  114,\n"
			"		86,  82,  59,  90,  101,  92,  90,  31,  24,  20,  6,  23,  13,  92,  97,  91,  93,  85,  71,  47,  21,  23,  59,  51,  30,  138,  143,  137,  81,  90,  53,  137,\n"
			"		143,  146,  121,  116,  95,  66,  74,  54,  145,  139,  147,  55,  52,  60,  112,  89,  84,  77,  66,  109,  117,  135,  22,  3,  7,  5,  88,  86,  78,  27,  56,  41,\n"
			"		3,  29,  30,  65,  83,  84,  96,  123,  108,  63,  70,  39,  109,  110,  94,  74,  55,  54,  25,  33,  52,  21,  47,  43,  129,  127,  114,  103,  106,  113,  105,  85,\n"
			"		103,  124,  123,  107,  40,  18,  17,  77,  109,  94,  47,  62,  43,  27,  41,  28,  57,  80,  36,  133,  125,  136,  35,  71,  34,  49,  61,  52,  120,  109,  132,  61,\n"
			"		49,  95,  118,  120,  130,  64,  72,  89,  133,  112,  111,  54,  37,  66,  129,  122,  134,  4,  15,  11,  26,  69,  38,  112,  133,  128,  31,  64,  24,  142,  140,  143,\n"
			"		12,  11,  26,  48,  40,  17,  79,  76,  75,  71,  65,  34,  137,  129,  138,  44,  31,  20,  10,  18,  19,  4,  10,  15,  63,  79,  70,  62,  29,  43,  42,  31,\n"
			"		44,  137,  127,  129,  41,  50,  20,  133,  136,  141,  60,  22,  54,  102,  121,  95,  125,  133,  111,  26,  38,  23,  24,  17,  8,  18,  40,  49,  91,  97,  99,  81,\n"
			"		101,  90,  32,  28,  16,  144,  135,  137,  15,  19,  55,  74,  66,  77,  132,  140,  130,  62,  67,  81,  27,  28,  32,  99,  67,  58,  139,  132,  135,  103,  93,  106,\n"
			"		12,  2,  8,  37,  22,  66,  56,  50,  41,  44,  76,  42,  60,  52,  33,  121,  131,  117,  144,  147,  135,  18,  49,  19,  142,  126,  130,  32,  16,  30,  89,  72,\n"
			"		84,  74,  94,  93,  40,  48,  78,  107,  123,  96,  115,  124,  107,  100,  114,  104,  87,  82,  91,  25,  52,  61,  76,  44,  75,  93,  71,  74,  3,  5,  14,  1,\n"
			"		6,  13,  119,  103,  113,  129,  134,  138,  41,  20,  28,  126,  106,  118,  81,  67,  98,  30,  46,  63,  72,  69,  84,  98,  101,  81,  137,  135,  131,  5,  0,  2,\n"
			"		49,  55,  19,  136,  142,  141,  32,  39,  27,  46,  79,  63,  26,  6,  12,  114,  121,  102,  93,  94,  110,  29,  14,  43,  15,  55,  35,  119,  126,  136,  6,  2,\n"
			"		12,  119,  113,  126,  147,  139,  135,  20,  24,  9,  129,  114,  100,  96,  48,  73,  53,  29,  62,  26,  23,  6,  52,  55,  49,  73,  64,  96,  95,  116,  80,  51,\n"
			"		58,  45,  7,  9,  0,  110,  109,  120,  11,  15,  34,  23,  21,  13,  32,  30,  63,  66,  22,  109,  123,  122,  108,  110,  118,  106,  32,  63,  39,  91,  82,  92,\n"
			"		120,  132,  130,  58,  72,  64,  98,  67,  99,  101,  98,  99, \n"
			"	}\n"
			"	*GenerateNormals {10}\n"
			"	*o2w{*euler{0 -45 0} *pos{5 0 10}}\n"
			"}\n"
			"\n"
			"// Find the convex hull of a point cloud\n"
			"*ConvexHull convexhull FFFFFF00\n"
			"{\n"
			"	*Verts {\n"
			"	-0.998  0.127 -0.614\n"
			"	+0.618  0.170 -0.040\n"
			"	-0.300  0.792  0.646\n"
			"	+0.493 -0.652  0.718\n"
			"	+0.421  0.027 -0.392\n"
			"	-0.971 -0.818 -0.271\n"
			"	-0.706 -0.669  0.978\n"
			"	-0.109 -0.762 -0.991\n"
			"	-0.983 -0.244  0.063\n"
			"	+0.142  0.204  0.214\n"
			"	-0.668  0.326 -0.098\n"
			"	}\n"
			"	*GenerateNormals {30}\n"
			"	*RandColour\n"
			"	*o2w{*pos{4 0.8 12}}\n"
			"}\n"
			"\n"
			"// Create a chart from a table of values.\n"
			"// Expects text data in a 2D matrix. Plots columns 1,2,3,.. vs. column 0.\n"
			"*Chart chart\n"
			"{\n"
			"	// *Source { \"my_data.csv\" } // Reference an external file containing CSV data\n"
			"	*Data\n"
			"	{\n"
			"		index, col1, col2 // Rows containing non-number values are ignored\n"
			"		0.0,  1.0,  0.0,  // Chart data\n"
			"		0.5,  1.2,  0.3,\n"
			"		1.0,  0.2,  0.9,\n"
			"		1.5,  0.8,  1.2,\n"
			"		2.0,  1.5,  1.1,\n"
			"		2.5,  1.2,  0.8,\n"
			"		3.0,  0.9,  0.5,\n"
			"		3.5,  0.7,  0.6,\n"
			"		4.0,  0.3,  0.7,    // Trailing blank values are ignored\n"
			"		// Trailing new lines are ignored\n"
			"	}\n"
			"	*Series plot1 FF00A0E0 // Colour is auto assigned if not given\n"
			"	{\n"
			"		*XAxis { \"C0\" }            // Expression for the X values\n"
			"		*YAxis { \"abs(C2 - C1)\" }  // Expression for the Y values\n"
			"		*Width { 7 }               // Optional. A width for the lines\n"
			"	}\n"
			"	*Series plot2 FFA000E0 // Colour is auto assigned if not given\n"
			"	{\n"
			"		*XAxis { \"C1\" }\n"
			"		*YAxis { \"sin(C2) + 0.1*C0)\" }\n"
			"		*Width { 5 }\n"
			"	}\n"
			"	*o2w{*pos{15 0 10}}\n"
			"}\n"
			"\n"
			"// Model from a 3D model file.\n"
			"// Supported formats: *.3ds, *.stl, *.p3d, (so far)\n"
			"//*Model model_from_file\n"
			"//{\n"
			"//	\"filepath\"                   // The file to create the model from\n"
			"//	*GenerateNormals {30}        // Generate normals for the model (smoothing angle between faces)\n"
			"//	*BakeTransform {*pos{0 0 0}} // Optional. Bake a transform into the model (independent of *o2w)\n"
			"//}\n"
			"\n"
			"*Equation equation\n"
			"{\n"
			"	\"sin(x) + cos(y) + a\"         // The equation to plot\n"
			"	*Resolution {3000}            // Optional. The number of vertices to use\n"
			"	*Param {\"a\" 0.2}              // Optional. Set a variable to a constant\n"
			"	*Weight {0.5}                 // Optional. Controls the density of points at the focus point\n"
			"	*XAxis { -10 +10 }          // Optional. Set the range to display on the x axis\n"
			"	*YAxis { *Range {-10 +10} } // Optional. Alternative way to set the range to display on the y axis\n"
			"	*ZAxis\n"
			"	{\n"
			"		*Range {-5 +5}\n"
			"		*Colours                  // Colour bands for value ranges\n"
			"		{\n"
			"			-1.0 FF0000FF         // Value, colour.\n"
			"			 0.0 FFFF00FF\n"
			"			+1.0 FFFFFF00\n"
			"		}\n"
			"	}\n"
			"	*o2w{*scale{0.5} *euler{-90 0 0 } *pos{15 1.1 3}}\n"
			"}\n"
			"\n"

#endif

// A camera section must be at the top level in the script.
// Camera descriptions raise an event immediately after being parsed.
// The application handles this event to set the camera position.
*Camera
{
	// Note: order is important. Camera properties are set in the order declared
	*o2w {*pos{0 30 35}}      // Camera position/orientation within the scene
	*LookAt {0 0 0}           // Optional. Point the camera at {x,y,z} from where it currently is. Sets the focus distance
	*Align {0 1 0}            // Optional. Lock the camera's up axis to  {x,y,z}
	//*Aspect {1.0}           // Optional. Aspect ratio (w/h). FovY is unchanged, FovX is changed. Default is 1
	//*FovX {45}              // Optional. X field of view (deg). Y field of view is determined by aspect ratio
	//*FovY {45}              // Optional. Y field of view (deg). X field of view is determined by aspect ratio (default 45 deg)
	//*Fov {45 45}            // Optional. {Horizontal,Vertical} field of view (deg). Implies aspect ratio.
	//*Near {0.01}            // Optional. Near clip plane distance
	//*Far {100.0}            // Optional. Far clip plane distance
	//*Orthographic           // Optional. Use an orthographic projection rather than perspective
}

// Light sources can be top level objects, children of other objects, or contain child objects.
// In some ways they are like a *Group object, they have no geometry of their own but can contain
// objects with geometry.
*LightSource sun FFFFFF00     // Colour attribute is the colour of the light source
{
	*Style {Directional}      // One of: Directional, Point, Spot
	*Ambient {FF101010 }      // Optional. Ambient colour
	*Diffuse {FF404040 }      // Optional. Diffuse colour
	*Specular {FFFFFFFF 1000} // Optional. Specular colour and power
	*Range {100 0}            // Optional. range, falloff. Default is infinite.
	*Cone {30 60}             // Optional. Inner angle (deg), Outer angle (deg). Only for spot lights
	*CastShadow {10}          // Optional. range. Shadows are cast from this light source out to this range
	*o2w {*pos{5 5 5}}        // Position/orientation of the light. Directional lights shine down -z
}