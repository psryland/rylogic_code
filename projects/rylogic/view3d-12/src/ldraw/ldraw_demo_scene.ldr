//********************************************
// LDraw Demo Scene
//  Copyright (c) Rylogic Ltd 2002
//********************************************
//
//  Syntax:
//    LDraw script (.ldr) expects keywords to be preceded by a '*' character.
//    The syntax that follows the keyword depends on the particular keyword.
//    Braces, { and }, are used to define Sections which control the nesting of
//    data, and allow the parser to skip unrecognised blocks in the script.
//    The parser supports a C-Style preprocessor to allow macro substitutions.
//    Keywords are not case sensitive.
//
//  Summary:
//		*Keyword                    - keywords are identified by '*' characters
//		{// Section begin           - nesting of objects within sections implies parenting
//			// Line comment         - single line comments
//			/* Block comment */     - block comments
//			#eval{1+2}              - macro expression evaluation
//		}// Section end
//
//		C-style preprocessing
//		  #include "include_file"   - include other script files
//		  #define MACRO subst_text  - define text substitution macros
//		MACRO                       - macro substitution
//		  #undef MACRO              - un-defining of macros
//		  #ifdef MACRO              - nestable preprocessor controlled sections
//		  #elif MACRO
//		     #ifndef MACRO
//		     #endif
//		  #else
//		  #endif
//		  #lit
//		  	literal text
//		  #end
//
//  Definitions:
//    context_id - this is a GUID used to identify a source of objects. It allows
//        objects to be added/removed/refreshed in discrete sets.
//    axis_id - is an integer describing an axis number. It must be one
//        of \xc2\xb1""1, \xc2\xb1""2, \xc2\xb1""3 corresponding to \xc2\xb1""X, \xc2\xb1""Y, \xc2\xb1""Z respectively.
//    [field] - fields in square brackets mean optional fields.
//
//  Object Description format:
//       *ObjectType [name] [colour]
//       {
//          ...
//       }
//    The name and colour parameters are optional and have defaults of:
//       name     = <ObjectType>
//       colour   = FFFFFFFF

// Global flags, commands, includes, cameras, and lights
// Allow missing includes to be ignored and not cause errors\n
#ignore_missing "on"
#include "missing_file.ldr"

// Add an explicit dependency on another file. This is basically the same as an #include except
// the dependent file contents are not added to the script. This is useful for triggering an auto refresh.
#depend "trigger_update.txt"

// Minimal Example.
*Box minimal_example FFFF00FF // Object type, name, colour. Name and colour are optional.
{
	*Data {1}    // Object specific data. In this case, a cube with side-length = 1
}

// Object transforms.
// An example of applying a transform to an object.
*Box transforms_example FF00FF00
{
	*Data {1 2 1}
	*o2w
	{
		// All objects have an implicit object-to-parent transform that is identity.
		// Successive 'o2w' sections pre-multiply this transform for the object.
		// Fields within the 'o2w' section are applied in the order they are declared.

		// An empty 'o2w' is equivalent to an identity transform
		//*NonAffine {}                               // Indicates the given transform is intentionally non-affine
		*M4x4 {1 0 0 0  0 1 0 0  0 0 1 0  0 0 0 1}    // {xx xy xz xw  yx yy yz yw  zx zy zz zw  wx wy wz ww} - i.e. row major
		*M3x3 {1 0 0  0 1 0  0 0 1}                   // {xx xy xz  yx yy yz  zx zy zz} - i.e. row major
		//*Rand4x4 {0 1 0 2}                          // {cx cy cz r} - centre position, radius. Random orientation
		//*RandPos {0 1 0 2}                          // {cx cy cz r} - centre position, radius
		//*RandOri {}                                 // Randomises the orientation of the current transform
		*Align {3 0 1 0}                              // {axis_id dx dy dz } - direction vector, and axis id to align to that direction
		//*LookAt {0 0 0}                             // {x y z } - look at point
		*Quat {0 #eval{sin(pi/2)} 0 #eval{cos(pi/2)}} // {x y z s} - quaternion
		*QuatPos {0 1 0 0  1 -1 3}                    // {q.x q.y q.z q.s p.x p.y p.z} - quaternion position
		*Scale {1 1.2 1}                              // { sx sy sz } - multiples the lengths of x,y,z vectors of the current transform. Accepts 1 or 3 values
		*Normalise {}                                 // Normalises the lengths of the vectors of the current transform
		*Orthonormalise {}                            // Normalises the lengths and makes orthogonal the vectors of the current transform
		*Transpose {} *Transpose {}                   // Transposes the current transform
		*Inverse {} *Inverse {}                       // Inverts the current transform
		*Euler {55 30 60}                             // { pitch yaw roll } - all in degrees. Order of rotations is roll, pitch, yaw
		*Pos {-2.5 4 -0.8}                            // {x y z}
	}
}

// Object modifiers.
// There are a number of object modifiers that can be used to
// control the colour, texture, visibility, and animation of objects.
// These modifiers can be applied to any object (except where noted).
*Cone modifiers_example 80FFFFFF
{
	*Data {55 0 2}             // See *Cone example below for parameter meaning
	*AxisId {1}                // Axis to align the cone to. One of: X = \xc2\xb1""1, Y = \xc2\xb1""2, Z = \xc2\xb1""3
	*Colour {FFFF00FF}         // Override the base colour of the model
	*ColourMask {FF000000}     // applies: 'child.colour = (obj.base_colour & mask) | (child.base_colour & ~mask)' to all children recursively
	*Reflectivity {0.3}        // Reflectivity (used with environment mapping)
	*RandColour {}             // Apply a random colour to this object
	//*Hidden {}               // Object is created in an invisible state
	//*Wireframe {}            // Object is created with wireframe fill mode
	//*Font {...}              // A font to apply to this an all child objects. See Text example below
	*Animation                 // Add simple animation to this object
	{
		*Style {Continuous}    // Animation style, one of: NoAnimation, Once, Repeat, Continuous, PingPong
		*Period { 1.6 }        // The period of the animation in seconds
		*Velocity { 0 0 0 }    // Linear velocity vector in m/s
		//*Accel {0 -3 0}      // Linear acceleration vector in m/s^2
		*AngVelocity { 1 0 0 } // Angular velocity vector in rad/s
		//*AngAccel {0 0 0}    // Angular acceleration vector in rad/s^2
	}
	*Texture                   // Texture (only supported on some object types)
	{
		*FilePath {"#checker"} // Texture filepath, stock texture name (e.g. #white, #black, #checker), or texture id (e.g. #1, #3)
		*Addr {Wrap Wrap}      // Optional addressing mode for the texture; U, V. Options: Wrap, Mirror, Clamp, Border, MirrorOnce
		*Filter {Linear}       // Optional filtering of the texture. Options: Point, Linear, Anisotropic
		*Alpha {}              // Optional. Indicates the texture contains alpha pixels
		*o2w                   // Optional 3d texture coord transform
		{
			*Scale {2 2 2}
			*Euler {0 0 45}
		}
	}
	*o2w
	{
		*euler {0 0 90}
		*pos {15 7 -10}
	}
	//*NoZTest {}     // Don't depth-text
	//*NoZWrite {}    // Don't write to the Z buffer
	//*ScreenSpace {} // The object's '*o2w' transform is interpreted as a screen space position/orientation
	// Screen space coordinates are in the volume:
	//    (-1,-1, 0) = bottom, left, near plane
	//    (+1,+1,-1) = top, right, far plane
}

// Object Nesting.
// Nested objects are in the space of their parent so a parent transform is applied to all children.
*Sphere nesting0 A0FFFF00
{
	*Data {0.8 1.4 0.5}
	*o2w {*pos {0 5 -7}}
	*ColourMask { FF000000 } // This colour mask is applied to all child recursively
	*Sphere nested1 FF00FFFF
	{
		*Data {0.8 1.4 0.5}
		*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
		*Sphere nested2 FF00FFFF
		{
			*Data {0.8 1.4 0.5}
			*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
			*Sphere nested3 FF00FFFF
			{
				*Data {0.8 1.4 0.5}
				*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
				*Sphere nested4 FF00FFFF
				{
					*Data {0.8 1.4 0.5}
					*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
					*Sphere nested5 FF00FFFF
					{
						*Data {0.8 1.4 0.5}
						*o2w {*pos {0 1.4 0} *euler{0 0 60} *pos {0 -1.4 0}}
					}
				}
			}
		}
	}
}

// Groups.
// Groups are a special object type that doesn't contain geometry
// but has a coordinate space and child objects.
*Group group
{
	//*Wireframe {}    // Object modifiers applied to groups are applied recursively to children within the group
	*Cylinder barrel FFE0A060
	{
		*Data {3 1}
		*AxisId{+2}
	}
	*Sphere bullet FF0000FF
	{
		*Data {0.7}
		*Animation
		{
			*Style {Repeat}    // Animation style, one of: NoAnimation, Once, Repeat, Continuous, PingPong
			*Period {3}        // The period of the animation in seconds
			*Velocity {0 10 0} // Linear velocity vector in m/s
			*Accel {0 -3 0}
		}
		*o2w{*pos{0 0 0}}
	}
	*Box box FF00FF00 { *Data{1 1 3} *o2w{*pos{0 -1.0 0}}}
	*Box box FF00FF00 { *Data{3 1 1} *o2w{*pos{0 -1.0 0}}}
	*o2w {*pos{-10 1.5 -5}}
}

// Model Instancing.
// An instance can be created from any previously defined object.
// The instance will share the renderable model from the object it is an instance of.
// Note that object modifiers of the object are not inherited by the instance.
*Cylinder instancing_example FF0000FF
{
	*Data {2 0.5}
	*AxisId {+2}
	*RandColour {} // Note: this will not be inherited by the instances
	*Hidden {}     // Don't show this instance
}
*Instance instancing_example FFFF0000 // The name indicates which model to instance
{
	*o2w {*Pos {15 1 -10}}
}
*Instance instancing_example FF0000FF
{
	*o2w {*Pos {15 3 -10}}
}
*Instance instancing_example FF00FF00
{
	*o2w {*Pos {15 5 -10}}
}

// Text.
// Text objects are textured quads that contain D2D rendered text.
// There is support for screen space, billboard, and full 3D text objects.

// Fonts declared at global scope set the default for following objects
// All fields are optional, replacing the default if given.
*Font
{
	*Name {"tahoma"}     // Font name
	*Size {18}           // Font size (in points)
	//*Colour {FF0000FF} // Font colour
	*Weight {300}        // Font weight (100 = ultra light, 300 = normal, 900 = heavy)
	*Style {Normal}      // Style. One of: Normal Italic Oblique
	*Stretch {5}         // Stretch. 1 = condensed, 5 = normal, 9 = expanded
	//*Underline {}      // Underlined text
	//*Strikeout {}      // Strikethrough text
}

// Screen space text.
*Text camera_space_text
{
	*ScreenSpace {} // This modifier tell Ldraw to treat the object transform as a screen space position/orientation

	// Text data is concatenated, with changes of style/font applied.
	// Text containing multiple lines has the line-end whitespace and indentation tabs removed.
	*Font { *Name {"Times New Roman"} *Colour {FF0000FF} *Size{18}}
	*Data
	{
		"This is camera space 
		text with new lines, and 
		"
	}
	*Font {*Colour {FF00FF00} *Size{24} *Style{Oblique}}
	*Data
	{
		"with varying colours 
		and "
	}
	*Font {*Colour {FFFF0000} *Weight{800} *Style{Italic} *Strikeout {}}
	*Data
	{
		"stiles "
	}
	*Font {*Colour {FFFFFF00} *Style{Italic} *Underline {}}
	*Data
	{
		"styles "
	}

	// The background colour of the quad
	*BackColour {40A0A0A0}

	// Anchor defines the origin of the quad. (-1,-1) = bottom,left. (0,0) = centre (default). (+1,+1) = top,right
	// This is the point that the object transform is applied to.
	*Anchor {-1 +1}

	// Padding between the quad boundary and the text
	*Padding {10 20 10 10}

	// *o2w is interpreted as a 'text to camera space' transform
	// (-1,-1,0) is the lower left corner on the near plane.
	// (+1,+1,1) is the upper right corner on the far plane.
	// The quad is automatically scaled to make the text unscaled on-screen
	*o2w {*pos{-1, +1, 0}}
}

// Billboard text always faces the camera and has the same size independent of distance
*Text billboard_text
{
	*Font {*Colour {FF00FF00}} // Note: Font changes must come before text that uses the font
	*Data {"Billboard text!!"}
	*Billboard {}

	*Anchor {0 0}
	*BackColour {FF308080}

	// The rotational part of *o2w is ignored, only the 3d position is used
	*o2w {*pos{-15,3,5}}
	
	// Create a poll for the billboard 
	*Cylinder poll FF202020 { *Data {4 0.1} *AxisId{+2} *o2w{*pos{0 -1.2 -0.2}}}
}

// Billboard 3D text always faces the camera and scales with distance
*Text billboard3d_text
{
	*Font {*Colour {FF0000FF} *Size{100}}
	*Data {"3D Billboard text!!"}
	*Billboard3D {}

	*Anchor {0 0}
	*BackColour {FF308080}

	// The rotational part of *o2w is ignored, only the 3d position and scale is used
	*o2w {*pos{-18,3,5}}

	// Create a poll for the billboard 
	*Cylinder poll FF202020 { *Data {4 0.1} *AxisId{+2} *o2w{*pos{0 -1.2 -0.2}}}
}

// Texture quad containing text
*Text three_dee_text
{
	*Font {*Name {"Courier New"} *Size {16}}

	// Normal text string, everything between quotes (including new lines)
	*Data
	{
		"LDraw Demo Scene

		This scene contains an example of every supported
		object type. This particular object is an example
		of normal 3D text. 

		"
	}

	// Text can also be given as a C-Style string that uses escape characters.
	// Everything between matched quotes (including new lines, although
	// indentation tabs are not removed for C-Style strings)
	*CString
	{
		"There is also support for \n \"C-Style\" strings"
	}

	*AxisId {+3}    // Optional. Set the direction of the quad normal. One of: X = \xc2\xb1""1, Y = \xc2\xb1""2, Z = \xc2\xb1""3
	*Format         // Optional
	{
		Left      // Horizontal alignment. One of: Left, CentreH, Right
		Top       // Vertical Alignment. One of: Top, CentreV, Bottom
		Wrap      // Text wrapping. One of: NoWrap, Wrap, WholeWord, Character, EmergencyBreak
	}
	*BackColour {FFA0E0E0}
	*o2w {*scale{8} *pos{0 7 -20} }
}

// ************************************************************************************
// Objects
// ************************************************************************************
// Below is an example of every supported object type with notes on their syntax.

// Points ***********************************************

// A list of points
*Point pts
{
	*PerItemColour {}
	*Data
	{
		// {x y z, [colour]} point positions
		-0.32182515 -0.11282351 -0.33979280 FF8DFD8F
		-0.09884672 +0.20496936 -0.11294128 FF84BDF2
		+0.32952994 +0.12638773 -0.16279069 FFA1B6C5
		-0.28267866 +0.12046398 +0.37289724 FFB3DFE2
		+0.07734887 -0.30069580 +0.15674202 FFFCE3E9
		+0.14382900 +0.27675366 -0.35658675 FFE09789
		+0.29473856 -0.11315139 +0.27820430 FF90D0C8
		-0.04522936 -0.41357175 +0.00881479 FFC283AF
		+0.28132004 +0.22615014 +0.31323278 FFCAA0EA
		-0.09371998 +0.09980434 +0.18248796 FFE7AF98
		-0.02596593 +0.18868162 -0.19324471 FFD7D8DB
		+0.36394337 -0.21930681 -0.05467778 FFF4B2AC
		+0.14113660 +0.45059928 +0.13722318 FFCED899
		+0.18176337 -0.24681160 -0.12977648 FFA7D8AE
		+0.38887858 +0.24615003 +0.06563436 FFB9BA96
	}
	*Size {40 40}             // Optional. {width, [height]} Specify a size for the point
	*Style {Star}         // Optional. One of: Square, Circle, Triangle, Star, Annulus. Requires 'Width'
	*Texture { *FilePath {"#whitespot"}} // Optional. A texture for each point sprite. Requires 'Width'. Ignored if 'Style' given.
	*o2w{*pos{16 6 6}}
}

// Lines ***********************************************

// Line modifiers:
//   *Width {w} - Render the lines with the thickness 'w' specified (in pixels).
//   *Param {t0 t1} - Clip/Extend the previous line to the parametric values given.
//   *Dashed {on off} - Convert the line to a dashed line with dashes of length 'on' and gaps of length 'off'.
//   For objects that support optional colours, all or none of the points/lines/segments must have colours.

// A model containing an arbitrary list of line segments
*Line lines
{
	// Optional. Each line segment can have a different colour
	*PerItemColour {}
	*Data
	{
		// {x0 y0 z0  x1 y1 z1 [colour]}. Start and end points for a line followed by optional colour
		0 1 0 -1 10 -1 FFFF0000
		0 1 0 -1 10  0 FF00FF00
		0 1 0 -1 10 +1 FF0000FF
		0 1 0  0 10 -1 FFFFFF00
		0 1 0  0 10  0 FFFF00FF
		0 1 0  0 10 +1 FF00FFFF
		0 1 0 +1 10 -1 FFF00FFF
		0 1 0 +1 10  0 FFFF00FF
		0 1 0 +1 10 +1 FFFFF00F
	}
	*o2w{*pos{-15 0 -10}}
}

// A list of line segments given point and direction
*LineD directions
{
	*PerItemColour {}
	*PerItemParametrics {} // Optional. Each line segment has parametric values
	*Data
	{
		// {x y z dx dy dz [colour]}. Start and direction for a line followed by optional colour
		#define P  0.2 0.6 // Optional. Parametric values for each line
		0 1 0 -1 1 -1 FFFF0000 P
		0 1 0 -1 1  0 FF00FF00 P
		0 1 0 -1 1 +1 FF0000FF P
		0 1 0  0 1 -1 FFFFFF00 P
		0 1 0  0 1  0 FFFF00FF P
		0 1 0  0 1 +1 FF00FFFF P
		0 1 0 +1 1 -1 FFF00FFF P
		0 1 0 +1 1  0 FFFF00FF P
		0 1 0 +1 1 +1 FFFFF00F P
		#undef P
	}
	*Parametrics
	{
		// {line index, t0, t1}. Parametric values for numbered line segments
		0 0.1 0.9
		8 0.1 0.9
	}
	*o2w{*pos{-15 0 -5}}
}

// A model containing a sequence of line segments given by a list of points
*LineStrip linestrip
{
	*PerItemColour {}
	*Data
	{
		// {x y z [colour]}. A vertex in the line strip followed by an optional colour
		0 0 0 FF00FF00
		-1 -1 1 FF0000FF
		0 1 4 FFFF00FF
		1 1 2 FFFFFF00
		1 1 4 FF00FFFF
		1 0 3 FFFFFFFF
		0 0 5 FFFFFFFF
	}
	*Parametrics
	{
		// {line index, t0, t1}. Note, line count equals vertex count - 1
		2 0.2 0.8
	}
	*Dashed {0.1 0.05}
	*Width {7}
	*Smooth {} // Optional. Turns the line segments into a smooth spline
	*o2w{*pos{-15 1 -10}}
}

// A cuboid made from lines
*LineBox linebox
{
	 // {width, height, depth}. Accepts 1, 2, or 3 dimensions. 1dim = cube, 2 = rod, 3 = arbitrary box
	*Data {0.5 1 0.5}
	*o2w{*pos{-15 1 -5}}
}

// A grid of lines
*Grid grid FF2080E0
{
	// {width, height, [w,h divisions]}. If w,h are omitted, defaults to width/height
	*Data {4 5 8 10}
	*AxisId {+2}
	*o2w{*pos{-15 1 -10}}
}

// A curve described by a start and end point and two control points.
*Spline spline
{
	*PerItemColour {}
	*Data
	{
		// {p0 p1 p2 p3 [colour]} - all points are positions.
		// Tangents infered from p1-p0, p3-p2.
		// each spline is a separate spline segment
		0 0 0  -1 1 0  -1 2 0  0 1.5 0 FF00FF00
		0 0 0  +1 1 0  +1 2 0  0 1.5 0 FFFF0000
	}
	*Width {4} // Optional line width
	*o2w {*pos{-15 1 0}}
}

// A line with pointy ends
*Arrow arrow
{
	*Style {Fwd}      // Type of  arrow. One of Line, Fwd, Back, or FwdBack
	*PerItemColour {} // Optional. Each line segment can have a different colour
	*Data
	{
		-0.8 +0.2  0.0 FF00FF00      // Corner points forming a line strip of connected lines, followed by optional colour
		+0.3  0.7  0.2 FFFF0000      // Note, colour blends smoothly between each vertex
		-0.3  1.2 -0.2 FFFF0000      // Note, colour blends smoothly between each vertex
		+1.0 +1.7  0.0 FFFFFF00
	}
	*Smooth {}    // Optional. Turns the line segments into a smooth spline
	*Width { 10 } // Optional line width and arrow head size
	*o2w {*pos{-15 1 0}}
}

// A set of basis vectors
*CoordFrame a2b
{
	*Scale {0.5}   // Optional, scale (not recursive like in *o2w)
	*LeftHanded {} // Optional, create a left handed coordinate frame
	*o2w {*pos{15 3 3}}
}

// 2D Shapes ***********************************************

// An "infinite" plane.
*Plane ground FFFFE8A0
{
	*Data {40 40} // Width, height. Quad position is 0,0,0 and normal is Z axis. Use *o2w to position and orient the plane
	*AxisId {+2}  // Optional. Axis to align the plane to. One of: X = \xc2\xb1""1, Y = \xc2\xb1""2, Z = \xc2\xb1""3
	*Texture      // Optional. Planes can have a texture applied. See 'object_modifiers' example above
	{
		*FilePath {"#checker3"}
		*Addr {Wrap Wrap}
		*o2w {*Scale{10 10 1}}
	}
}

// A circle or ellipse
*Circle circle
{
	*Data {1.6}     // {radius}
	*AxisId {+3}    // Optional, normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z 
	*Solid {}       // Optional, if omitted then the circle is an outline only
	*RandColour {}  // Object colour is the outline colour
	*Animation
	{
		*Style {Continuous}
		*Period {1.6}
		*AngVelocity {0.9 1 0}
	}
	*o2w {*pos{5 3 -5}}
}
*Circle ellipse FF0000FF
{
	*Data {0.8 1.6}   // radiusx, radiusy
	*AxisId {+1}      // Optional, normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*Solid {}         // Optional, if omitted then the circle is an outline only
	*RandColour {}    // Object colour is the outline colour
	*Animation
	{
		*Style {Continuous}
		*Period {1.6}
		*AngVelocity {-1 -0.9 0}
	}
	*o2w {*pos{5 3 -5}}
}

// A pie or wedge\n
*Pie pie FF00FFFF
{
	*Data {-90 145 0.4 1.7} // {start-angle, end-angle, inner radius, outer radius}. Angles in degress (from the 'x' axis). Equal values creates a ring
	*AxisId {+3}            // Optional, normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*Scale {1.0 1.0}        // Optional, X,Y scale factors
	*Solid {}               // Optional, if omitted then the shape is an outline only
	*RandColour {}          // Object colour is the outline colour
	*Animation
	{
		*Style {Continuous}
		*Period {1.6}
		*AngVelocity {0 0 1}
	}
	*o2w {*pos{8 3 -5}}
}

// A rectangle
*Rect rect FF0000FF
{
	*Data {2.2 2.3}        // {width, height}. If height is omitted, height = width
	*AxisId {+2}           // Optional, normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*Solid {}              // Optional, if omitted then the shape is an outline only
	*CornerRadius {0.5}    // Optional corner radius for rounded corners
	*Facets {8}            // Optional, controls the smoothness of the corners
	*o2w {*pos{9 3 -5}}
}

// A 2D polygon
*Polygon poly
{
	//*PerItemColour
	*Data
	{
		1.0f, 3.0f   // A list of 2D points with CCW winding order describing the polygon
		1.4f, 1.7f   // Optionally followed by a colour per vertex if *PerItemColour is present
		0.4f, 2.0f   // Note: C-style floating point literals are supported
		1.5f, 1.2f
		1.0f, 0.0f
		1.7f, 1.0f
		2.5f, 0.5f
		2.0f, 1.5f
		2.0f, 2.0f
		1.5f, 2.5f
	}
	*AxisId {3}          // Optional, Normal direction. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*Solid {}            // Optional, Filled polygon
	*RandColour {}       // Object colour is the outline colour
	*o2w {*scale{1.5} *pos{ 4 -1 -3}}
}

// A list of triangles
*Triangle triangle
{
	*PerItemColour {}
	*Data
	{
		// Three corner points of the triangle, optionally followed by a colour per vertex
		// The list should contain a multiple of three points.
		+1.5 0 -1.5 FF00FF00
		-1.5 0 -1.5 FFFF0000
		+0.0 0 +1.5 FF0000FF
	}
	*Texture {*FilePath {"#checker3"}} // Optional texture
	*o2w {*euler{45 0 0 } *pos{8 3 -10}}
}

// A quad given by 4 corner points
*Quad quad
{
	*PerItemColour {}
	*Data
	{
		// Four corner points of the quad, followed by an optional vertex colour
		// Corner order should be 'S' layout
		// i.e. (-x,-y)  (x,-y)  (-x,y)  (x,y)
		-1.5 -1.5 0 FFFF0000
		+1.5 -1.5 0 FF00FF00
		-1.5  1.5 0 FF0000FF
		+1.5  1.5 0 FFFF00FF
	}
	*Texture // Optional texture
	{
		*FilePath {"#checker"}                            // texture filepath, stock texture name (e.g. #white, #black, #checker), or texture id (e.g. #1, #3)
		*Addr {Clamp Clamp}                               // Optional addressing mode for the texture; U, V. Options: Wrap, Mirror, Clamp, Border, MirrorOnce
		*Filter {Linear}                                  // Optional filtering of the texture. Options: Point, Linear, Anisotropic
		*o2w {*scale{4 4 1} *pos{-2 -2 0} *euler{0 0 10}} // Optional 3d texture coord transform
	}
	*o2w {*scale {1.3} *euler{-20 0 0 } *pos{4 4 -10}}
}

// A triangle strip of quads following a line
*Ribbon ribbon
{
	*PerItemColour {}
	*Data
	{
		// Vertices of the central line of the ribbon, followed by an optional colour per vertex
		+0  0 -2 FFFF0000
		-1  0 -2 FFFF0000
		+0  1 -1 FF00FF00
		+1  0  0 FFFFFF00
		+0 -1 +1 FF00FFFF
		-1  0 +2 FF0000FF
		+0  0 +2 FF0000FF
	}
	*Width {0.5}                       // Optional. Width (in world space) (default 10)
	*Smooth {}                         // Optional. Generates a spline through the points
	*Texture{*FilePath {"#checker2"}}  // Optional texture repeated along each quad of the ribbon
	*o2w {*pos{10 2 0}}
}

// 3D Shapes ***********************************************

// A box
*Box box
{
	*Data {0.6 1.2 0.9}  // {width, height, depth}. Accepts 1, 2, or 3 dimensions. 1=cube, 2=rod, 3=arbitrary box
	*RandColour {}
	*o2w{*pos{-5 0.6 5}}
}

// A box between two points with a width and height in the other two directions
*Bar bar
{
	*Data {0 0 0  3 3 0  0.3 0.2} // x0 y0 z0  x1 y1 z1  width height. height = width if omitted.
	*Up {0 1 0}                   // Optional. Controls the orientation of width and height for the box
	*RandColour {}
	*o2w{*pos{-6.8 0 5}}
}

// A list of boxes all with the same dimensions at the given locations
*BoxList box_stack
{
	*Dim {+0.4 0.2 0.5} // Box dimensions: width, height, depth.
	*Data
	{
		// locations: x,y,z
		-1.0 0.0 0.0
		-0.5 0.0 0.0
		0.0 0.0 0.0
		0.5 0.0 0.0
		1.0 0.0 0.0
		-0.75 0.25 0.0
		-0.25 0.25 0.0
		0.25 0.25 0.0
		0.75 0.25 0.0
		-0.5 0.5 0.0
		0.0 0.5 0.0
		0.5 0.5 0.0
		-0.25 0.75 0.0
		0.25 0.75 0.0
		0.0 1.0 0.0
	}
	*o2w{*pos{-8 0.1 5}}
}

// A frustum given by width, height, near plane and far plane.
// Width, Height given at '*ViewPlaneZ' if given, falling back to 'near' if not zero, otherwise 1.0.
// Frusta grow down the -z axis to be consistent with typical camera views
*FrustumWH frustumwh
{
	*Data {2 2 0 1.5} // {width, height, near plane, far plane}.
	*AxisId {2}       // Optional. Main axis direction of the frustum: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*ViewPlaneZ {2}   // Optional. The distance at which the frustum has dimensions {width,height}
	*Animation {*Style {Continuous} *Period {1.6} *AngVelocity {0 1 0}}
	*RandColour {}
	*o2w{*pos{-10 4 8}}
}

// A frustum given by field of view (in Y), aspect ratio, and near and far plane distances.
*FrustumFA frustumfa
{
	*Data {90 1 0.4 1.5} // {fovY, aspect, near plane, far plane}. axis_id: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*AxisId {-2}         // Optional. Main axis direction of the frustum: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z
	*Animation {*Style {Continuous} *Period {1.6} *AngVelocity {0 -1 0}}
	*RandColour {}
	*o2w{*pos{-10 3.6 8}}
}

// A sphere given by radius
*Sphere sphere
{
	*Data {1.25} // {radius}
	*Facets {3}  // Optional. Controls the faceting of the sphere
	*Texture     // Optional texture
	{
		*FilePath {"#checker2"}
		*Addr {Wrap Wrap}
		*o2w {*scale{10 10 1}}
	}
	*Animation {*Style {Continuous} *Period {1.6} *AngVelocity {0 0 +1}}
	*RandColour {}
	*o2w{*euler{90 0 0} *pos{-10 1.25 8}}
}

// A group used to set the parent space of the ellipsoid
*Group
{
	// An ellipsoid given by radii in x, y, and z
	*Sphere ellipsoid
	{
		*Data {1.5 0.3 1.5} // {xradius yradius zradius}. Accepts 1, 2, or 3 dimensions.
		*RandColour {}
		*o2w{*euler{45 0 0}}
	}
	*Animation {*Style {Continuous} *Period {1.6} *AngVelocity {0 +1 0}}
	*o2w{*pos{-10 6.2 8}}
}

// A cylinder given by height, and radii
*Cylinder cylinder
{
	*Data {2 0.5}                      // {height, radius}
	*AxisId {2}                        // Optional. Major axis: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z (default +3)
	*Facets {3 50}                     // Optional. layers, wedges. controls the faceting of the cylinder
	*Scale {1 1}                       // Optional. X,Y scale factors for creating ovoid cylinders
	*Texture {*FilePath {"#checker3"}} // Optional texture
	*RandColour {}
	*Animation {*Style {Continuous} *Period {1.6} *AngVelocity {0 +1 0}}
	*o2w{*euler{20 0 0} *pos{-14 1.1 10}}
}
*Cylinder cone
{
	{2 0.5 0}                          // {height, base radius, tip radius}.
	*AxisId {2}                        // Optional. Major axis: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z (default +3)
	*Facets {3 50}                     // Optional. layers, wedges. controls the faceting of the cylinder
	*Scale {0.9 1.1}                   // Optional. X,Y scale factors for creating ovoid cylinders
	*Texture {*FilePath {"#checker3"}} // Optional texture
	*RandColour {}
	*Animation {*Style {Continuous} *Period {1.6} *AngVelocity {0 +1 0}}
	*o2w{*euler{-20 0 0} *pos{-14 3.3 10}}
}

// A cone given by a solid angle and two heights
*Cone cone FF00FFFF
{
	// Note this is similar to a cylinder, but described using solid angle and distances from the cone tip.
	*Data {25 0.3 2.0}                 // {solid angle(deg), tip-to-top distance, tip-to-base distance}.
	*AxisId {2}                        // Optional. Major axis: \xc2\xb1""1 = \xc2\xb1""x, \xc2\xb1""2 = \xc2\xb1""y, \xc2\xb1""3 = \xc2\xb1""z (default +3)
	*Facets {3,50}                     // Optional. layers, wedges. controls the faceting of the cylinder
	*Scale {1 1}                       // Optional. X,Y scale factors
	*Texture {*FilePath {"#checker3"}} // Optional texture
	*RandColour {}
	*o2w{*euler{65 120 0} *pos{-12 0.5 12}}
}

// An extrusion along a path
*Tube tube FFFFFFFF
{
	*CrossSection
	{
		// The cross section type; one of Round, Square, CrossSection
		//*Round {0.2 0.3}  // Elliptical profile. radius X [radius Y]  
		//*Square {0.2 0.3} // Rectangular profile. radius X [radius Y]
		*Polygon            // List of X,Y pairs. Arbitrary cross section profile
		{
			-0.2 -0.2
			+0.2 -0.2
			+0.05 +0.0
			+0.2 +0.2
			-0.2 +0.2
			-0.05 +0.0
		}
		*Facets {50}  // Optional. Used for Round cross section profiles
		//*Smooth {}  // Optional. Use smooth normals for the walls of the tube
	}
	*PerItemColour {}
	*Data
	{
		0  1  0 FFFF0000      // Vertices of the extrusion path, optionally followed by a colour per vertex
		0  0  1 FF00FF00
		0  1  2 FF0000FF
		1  1  2 FFFF00FF
	}
	*Smooth {} // Optional. Generates a spline through the extrusion path
	*Closed {} // Optional. Fills in the end caps of the tube
	
	*o2w{*scale{1.8} *euler{0 20 -40} *pos{-7 0.2 10}}
}

// A mesh of lines, faces, or tetrahedra.
// Syntax:
//	*Mesh [name] [colour]
//	{
//		*Verts { x y z ... }
//		[*Normals { nx ny nz ... }]                            // One per vertex
//		[*Colours { c0 c1 c2 ... }]                            // One per vertex
//		[*TexCoords { tx ty ... }]                             // One per vertex
//		*Faces { f00 f01 f02  f10 f11 f12  f20 f21 f22  ...}   // Indices of faces
//		*Lines { l00 l01  l10 l11  l20 l21  l30 l31 ...}       // Indices of lines
//		*Tetra { t00 t01 t02 t03  t10 t11 t12 t13 ...}         // Indices of tetrahedra
//		[GenerateNormals]                                      // Only works for faces or tetras
//	}
// Each 'Faces', 'Lines', 'Tetra' block is a sub-model within the mesh
// Vertex, normal, colour, and texture data must be given before faces, lines, or tetra data
// Textures must be defined before faces, lines, or tetra
*Mesh mesh 80FFFF00
{
	*Verts
	{
		+0.351416f, +3.386084f, +1.194482f
		+1.318017f, +3.211035f, +1.136084f
		+0.393164f, +3.005762f, +1.127832f
		+0.295410f, +4.318945f, +1.079639f
		+0.460693f, +2.322070f, +1.025537f
		+1.224560f, +3.863135f, +1.000879f
		+1.219873f, +2.877783f, +0.975586f
		+0.064502f, +3.908057f, +0.967041f
		+0.108838f, +2.727783f, +0.868115f
		-0.331543f, +3.136865f, +0.850781f
		-0.059131f, +1.813574f, +0.804053f
		+0.961719f, +2.062647f, +0.780957f
		+0.866992f, +2.758594f, +0.764746f
		+1.645215f, +3.544043f, +0.724121f
		+0.845312f, +4.420264f, +0.705859f
		+1.049170f, +1.556592f, +0.505371f
		-0.429444f, +4.395215f, +0.465820f
		-0.722754f, +2.245068f, +0.409619f
		-0.075293f, +1.249219f, +0.377637f
		+0.754346f, +1.191748f, +0.356738f
		-0.568946f, +4.141357f, +0.354785f
		+1.368359f, +4.153516f, +0.338574f
		+1.138184f, +0.268750f, +0.322607f
		+1.696728f, +3.140186f, +0.290869f
		-0.556787f, +2.931836f, +0.273096f
		-0.072412f, +0.381494f, +0.271680f
		+1.229932f, +2.765625f, +0.235547f
		-1.652784f, +5.173975f, +0.223096f
		-1.182032f, +4.723486f, +0.212256f
		+0.402002f, +4.687012f, +0.210254f
		-0.164551f, +4.514942f, +0.129102f
		-0.622901f, +3.897412f, +0.128223f
		-1.031153f, +5.016797f, +0.107715f
		+0.374219f, +0.592969f, +0.090723f
		+1.520703f, +2.232666f, +0.084619f
		+1.434863f, +1.796387f, +0.071289f
		+0.644043f, +0.262647f, +0.022803f
		+1.481885f, +0.401758f, -0.068555f
		+1.295850f, +3.250195f, -0.075000f
		-1.853272f, +5.510547f, -0.093994f
		-0.835791f, +1.622217f, -0.105664f
		-1.715772f, +4.704102f, -0.163476f
		-0.980860f, +4.126855f, -0.166504f
		+0.970068f, +4.426904f, -0.181494f
		-1.817920f, +4.206445f, -0.229883f
		-0.516358f, +3.946533f, -0.240186f
		-0.717627f, +4.458545f, -0.240186f
		+0.849951f, +4.012989f, -0.265723f
		-1.010010f, +2.428467f, -0.279590f
		-0.213916f, +1.078467f, -0.311963f
		-2.137696f, +4.535791f, -0.313769f
		-0.421240f, +4.532178f, -0.319287f
		+0.341357f, +0.692578f, -0.320947f
		+0.151465f, +4.642627f, -0.352588f
		+1.242090f, +0.771240f, -0.366846f
		+1.013623f, +0.994287f, -0.368652f
		-2.199170f, +5.383154f, -0.418994f
		-0.268799f, +0.263721f, -0.445215f
		-0.364649f, +3.996777f, -0.482861f
		-0.249854f, +5.006201f, -0.483984f
		+0.539551f, +0.510840f, -0.503027f
		-0.306201f, +0.742090f, -0.519629f
		+0.194385f, +4.485449f, -0.519873f
		-1.447657f, +5.075830f, -0.530371f
		-0.534766f, +3.425488f, -0.566113f
		+1.381543f, +2.615527f, -0.622998f
		+1.409033f, +0.265479f, -0.634863f
		-0.025537f, +4.078271f, -0.659229f
		-0.875098f, +0.442871f, -0.673340f
		+0.876074f, +3.271680f, -0.698828f
		-2.050196f, +5.625635f, -0.810986f
		+1.535547f, +1.445068f, -0.814795f
		+0.183691f, +3.575342f, -0.844043f
		-0.779737f, +3.121729f, -0.868652f
		+1.497363f, +0.862647f, -0.892383f
		-2.259864f, +4.855664f, -0.915430f
		-1.931494f, +4.681055f, -0.974219f
		+1.852490f, +0.361231f, -0.993701f
		-0.737158f, +1.574219f, -1.052539f
		-1.816406f, +5.211328f, -1.062012f
		-0.927490f, +0.265576f, -1.119775f
		-0.122901f, +4.839355f, -1.130811f
		-1.019776f, +5.346924f, -1.168066f
		+1.580762f, +2.394727f, -1.177442f
		+1.010498f, +3.229443f, -1.358008f
		+1.988818f, +2.093408f, -1.386182f
		-1.321338f, +1.628320f, -1.428223f
		-1.030127f, +4.727490f, -1.445117f
		-0.935352f, +2.226953f, -1.461328f
		-0.068604f, +3.435107f, -1.461816f
		-0.588282f, +5.584619f, -1.477100f
		-1.530030f, +5.180615f, -1.502051f
		-1.324952f, +5.621680f, -1.555811f
		+2.065283f, +1.355713f, -1.559033f
		+1.737158f, +0.769434f, -1.572608f
		-0.854541f, +0.753809f, -1.593115f
		-0.828662f, +2.978076f, -1.632520f
		-1.532129f, +5.288428f, -1.768115f
		-0.740967f, +4.762256f, -1.776465f
		-0.992481f, +4.668994f, -1.818115f
		-1.317823f, +2.186035f, -1.825928f
		-1.173389f, +5.538965f, -1.909766f
		-0.998682f, +0.839404f, -1.918701f
		+2.015186f, +2.310889f, -1.974903f
		-1.341553f, +1.631934f, -2.061621f
		+1.554541f, +3.217578f, -2.127539f
		+2.071338f, +1.522949f, -2.135645f
		-0.580371f, +3.186328f, -2.180225f
		-0.831250f, +2.498047f, -2.307959f
		+1.608984f, +0.265576f, -2.323486f
		+1.684131f, +0.515430f, -2.337500f
		+1.164599f, +3.601856f, -2.393994f
		+0.537500f, +3.762402f, -2.437598f
		+1.998291f, +2.098584f, -2.460352f
		-1.074707f, +1.468311f, -2.497998f
		-0.075391f, +3.611621f, -2.539746f
		-0.649512f, +0.267578f, -2.741553f
		+0.013232f, +0.268799f, -2.746143f
		+1.690918f, +1.085547f, -2.756787f
		+1.770019f, +2.517432f, -2.757568f
		+1.456006f, +0.730225f, -2.762988f
		-0.628369f, +0.710254f, -2.821924f
		-0.946631f, +2.137695f, -2.833789f
		-0.660205f, +2.691650f, -2.890674f
		-0.594336f, +3.199512f, -2.961133f
		+1.419092f, +3.009424f, -3.121387f
		+1.705859f, +1.869092f, -3.144238f
		-0.695508f, +1.102148f, -3.154590f
		+0.303711f, +3.473584f, -3.188477f
		-0.786768f, +1.734717f, -3.196777f
		+1.453809f, +0.854443f, -3.213867f
		-0.084229f, +0.648926f, -3.269629f
		+1.288086f, +0.266748f, -3.363281f
		+0.989258f, +3.226611f, -3.387793f
		-0.474707f, +2.577344f, -3.412060f
		+0.279541f, +0.264697f, -3.523535f
		+1.289746f, +2.575586f, -3.592383f
		+0.121631f, +1.251270f, -3.705176f
		-0.348584f, +2.072119f, -3.708838f
		+0.849121f, +0.264014f, -3.718897f
		+1.023047f, +1.517871f, -3.761768f
		+0.110791f, +2.755762f, -3.807031f
		+1.012402f, +2.001758f, -3.857959f
		+0.464599f, +1.589307f, -3.872168f
		+0.154394f, +1.087891f, -3.998828f
		+1.122412f, +1.284912f, -4.100586f
		+0.487890f, +1.584229f, -4.149805f
		+0.540429f, +1.163672f, -4.211621f
	}
	*Faces
	{
		88,  108,  100,  110,  120,  118,  92,  82,  90,  69,  65,  84,  88,  78,  48,  122,  129,  100,  6,  1,  2,  127,  137,  131,  56,  75,  50,  121,  114,  127,  55,  60,
		54,  114,  102,  86,  33,  36,  60,  61,  95,  68,  45,  58,  64,  146,  145,  147,  70,  75,  56,  45,  42,  46,  0,  9,  2,  62,  81,  53,  77,  94,  74,  87,
		99,  58,  124,  134,  123,  142,  130,  140,  101,  99,  97,  140,  145,  146,  119,  136,  125,  141,  142,  143,  4,  11,  12,  112,  128,  115,  10,  19,  15,  124,  141,  134,
		67,  72,  58,  20,  50,  44,  8,  9,  24,  48,  17,  24,  42,  45,  31,  39,  70,  56,  30,  53,  59,  29,  53,  30,  46,  30,  51,  3,  14,  29,  0,  5,
		7,  141,  143,  138,  43,  14,  21,  127,  131,  121,  10,  17,  18,  64,  48,  24,  71,  55,  74,  57,  61,  68,  116,  117,  80,  8,  10,  4,  115,  128,  124,  21,
		14,  5,  111,  112,  84,  51,  45,  46,  105,  125,  111,  80,  117,  22,  56,  27,  39,  96,  108,  88,  78,  95,  49,  26,  11,  34,  51,  87,  58,  139,  145,  132,
		141,  124,  128,  123,  134,  122,  25,  57,  36,  80,  68,  95,  116,  121,  117,  105,  111,  84,  141,  128,  133,  106,  126,  113,  85,  93,  103,  100,  86,  88,  8,  17,
		10,  95,  86,  102,  89,  112,  115,  4,  12,  8,  86,  95,  78,  92,  101,  97,  68,  80,  57,  16,  7,  3,  37,  54,  22,  28,  20,  16,  1,  5,  2,  26,
		65,  69,  53,  90,  59,  5,  13,  21,  122,  100,  108,  31,  45,  64,  36,  33,  25,  46,  42,  76,  64,  73,  48,  22,  60,  36,  107,  89,  115,  76,  79,  46,
		47,  23,  38,  67,  69,  72,  16,  20,  7,  47,  69,  62,  93,  110,  106,  9,  8,  2,  141,  138,  134,  132,  22,  135,  117,  131,  135,  136,  126,  142,  65,  26,
		34,  48,  96,  88,  84,  83,  105,  35,  55,  71,  82,  87,  51,  104,  86,  100,  75,  44,  50,  70,  79,  75,  16,  3,  30,  146,  144,  137,  59,  82,  51,  119,
		125,  103,  5,  1,  13,  118,  130,  126,  47,  38,  69,  125,  105,  103,  99,  87,  91,  96,  89,  107,  105,  83,  85,  36,  80,  22,  20,  9,  7,  35,  34,  15,
		62,  69,  67,  140,  146,  143,  146,  147,  144,  83,  71,  85,  89,  96,  64,  109,  22,  132,  40,  78,  49,  71,  83,  65,  57,  25,  61,  132,  145,  140,  104,  114,
		86,  82,  59,  90,  101,  92,  90,  31,  24,  20,  6,  23,  13,  92,  97,  91,  93,  85,  71,  47,  21,  23,  59,  51,  30,  138,  143,  137,  81,  90,  53,  137,
		143,  146,  121,  116,  95,  66,  74,  54,  145,  139,  147,  55,  52,  60,  112,  89,  84,  77,  66,  109,  117,  135,  22,  3,  7,  5,  88,  86,  78,  27,  56,  41,
		3,  29,  30,  65,  83,  84,  96,  123,  108,  63,  70,  39,  109,  110,  94,  74,  55,  54,  25,  33,  52,  21,  47,  43,  129,  127,  114,  103,  106,  113,  105,  85,
		103,  124,  123,  107,  40,  18,  17,  77,  109,  94,  47,  62,  43,  27,  41,  28,  57,  80,  36,  133,  125,  136,  35,  71,  34,  49,  61,  52,  120,  109,  132,  61,
		49,  95,  118,  120,  130,  64,  72,  89,  133,  112,  111,  54,  37,  66,  129,  122,  134,  4,  15,  11,  26,  69,  38,  112,  133,  128,  31,  64,  24,  142,  140,  143,
		12,  11,  26,  48,  40,  17,  79,  76,  75,  71,  65,  34,  137,  129,  138,  44,  31,  20,  10,  18,  19,  4,  10,  15,  63,  79,  70,  62,  29,  43,  42,  31,
		44,  137,  127,  129,  41,  50,  20,  133,  136,  141,  60,  22,  54,  102,  121,  95,  125,  133,  111,  26,  38,  23,  24,  17,  8,  18,  40,  49,  91,  97,  99,  81,
		101,  90,  32,  28,  16,  144,  135,  137,  15,  19,  55,  74,  66,  77,  132,  140,  130,  62,  67,  81,  27,  28,  32,  99,  67,  58,  139,  132,  135,  103,  93,  106,
		12,  2,  8,  37,  22,  66,  56,  50,  41,  44,  76,  42,  60,  52,  33,  121,  131,  117,  144,  147,  135,  18,  49,  19,  142,  126,  130,  32,  16,  30,  89,  72,
		84,  74,  94,  93,  40,  48,  78,  107,  123,  96,  115,  124,  107,  100,  114,  104,  87,  82,  91,  25,  52,  61,  76,  44,  75,  93,  71,  74,  3,  5,  14,  1,
		6,  13,  119,  103,  113,  129,  134,  138,  41,  20,  28,  126,  106,  118,  81,  67,  98,  30,  46,  63,  72,  69,  84,  98,  101,  81,  137,  135,  131,  5,  0,  2,
		49,  55,  19,  136,  142,  141,  32,  39,  27,  46,  79,  63,  26,  6,  12,  114,  121,  102,  93,  94,  110,  29,  14,  43,  15,  55,  35,  119,  126,  136,  6,  2,
		12,  119,  113,  126,  147,  139,  135,  20,  24,  9,  129,  114,  100,  96,  48,  73,  53,  29,  62,  26,  23,  6,  52,  55,  49,  73,  64,  96,  95,  116,  80,  51,
		58,  45,  7,  9,  0,  110,  109,  120,  11,  15,  34,  23,  21,  13,  32,  30,  63,  66,  22,  109,  123,  122,  108,  110,  118,  106,  32,  63,  39,  91,  82,  92,
		120,  132,  130,  58,  72,  64,  98,  67,  99,  101,  98,  99, 
	}
	*GenerateNormals {10}
	*o2w{*euler{0 -45 0} *pos{5 0 10}}
}

// Find the convex hull of a point cloud
*ConvexHull convexhull FFFFFF00
{
	*Verts
	{
		// A cloud of points to wrap in a convex hull
		-0.998  0.127 -0.614
		+0.618  0.170 -0.040
		-0.300  0.792  0.646
		+0.493 -0.652  0.718
		+0.421  0.027 -0.392
		-0.971 -0.818 -0.271
		-0.706 -0.669  0.978
		-0.109 -0.762 -0.991
		-0.983 -0.244  0.063
		+0.142  0.204  0.214
		-0.668  0.326 -0.098
	}
	*GenerateNormals {30}
	*RandColour {}
	*o2w{*pos{4 0.8 12}}
}

// Create a chart from a table of values.
// Expects text data in a 2D matrix. Plots columns 1,2,3,.. vs. column 0.
*Chart chart
{
	// Reference an external file containing CSV data
	// *FilePath {"my_data.csv"}

	// The dimensions of the data
	*Dim {3} // {columns, [rows]}. Optional if 'FilePath' is used.

	// Or embed the data directly in the script
	*Data
	{
		// Data values. Can be layed out in any way
		0.0,  1.0,  0.0,
		0.5,  1.2,  0.3,
		1.0,  0.2,  0.9,
		1.5,  0.8,  1.2,
		2.0,  1.5,  1.1,
		2.5,  1.2,  0.8,
		3.0,  0.9,  0.5,
		3.5,  0.7,  0.6,
		4.0,  0.3,  0.7,
	}
	*Series plot1 FF00A0E0 // Colour is auto assigned if not given
	{
		*XAxis {"C0"}            // Expression for the X values
		*YAxis {"abs(C2 - C1)"}  // Expression for the Y values
		*Width {7}               // Optional. A width for the lines
		*Dashed {0.1 0.1}        // Optional. Dashed line pattern
	}
	*Series plot2 FFA000E0 // Colour is auto assigned if not given
	{
		*XAxis {"C1"}
		*YAxis {"sin(C2) + 0.1*C0)"}
		*Width {5}
		*Smooth {} // Optional. Smooth the line
	}
	*o2w{*pos{15 0 10}}
}

// Model from a 3D model file.
// Supported formats: *.3ds, *.stl, *.p3d, (so far)
*Model model_from_file
{
	//*FilePath {"<model-filepath>"} // The file to create the model from
	*GenerateNormals {30}          // Generate normals for the model (smoothing angle between faces)
	*BakeTransform {*pos{0 0 0}}   // Optional. Bake a transform into the model (independent of *o2w)
}


// PLot a 2D or 3D function
*Equation equation
{
	*Data {"sin(x) + cos(y) + a"} // The equation to plot
	*Resolution {3000}            // Optional. The number of vertices to use
	*Param {"a" 0.2}              // Optional. Set a variable to a constant
	*Weight {0.5}                 // Optional. Controls the density of points at the focus point
	*XAxis {*Range {-10 +10}}     // Optional. Set the range to display on the x axis
	*YAxis {*Range {-10 +10}}     // Optional. Set the range to display on the y axis
	*ZAxis
	{
		*Range {-5 +5}
		*Colours                  // Colour bands for value ranges
		{
			-1.0 FF0000FF         // Value, colour.
			 0.0 FFFF00FF
			+1.0 FFFFFF00
		}
	}
	*o2w {*scale{0.5} *euler{-90 0 0 } *pos{15 1.1 3}}
}

// A camera section must be at the top level in the script.
// Camera descriptions raise an event immediately after being parsed.
// The application handles this event to set the camera position.
*Camera
{
	// Note: order is important. Camera properties are set in the order declared
	*o2w {*pos{0 30 35}}      // Camera position/orientation within the scene
	*LookAt {0 0 0}           // Optional. Point the camera at {x,y,z} from where it currently is. Sets the focus distance
	*Align {0 1 0}            // Optional. Lock the camera's up axis to  {x,y,z}
	//*Aspect {1.0}           // Optional. Aspect ratio (w/h). FovY is unchanged, FovX is changed. Default is 1
	//*FovX {45}              // Optional. X field of view (deg). Y field of view is determined by aspect ratio
	//*FovY {45}              // Optional. Y field of view (deg). X field of view is determined by aspect ratio (default 45 deg)
	//*Fov {45 45}            // Optional. {Horizontal,Vertical} field of view (deg). Implies aspect ratio.
	//*Near {0.01}            // Optional. Near clip plane distance
	//*Far {100.0}            // Optional. Far clip plane distance
	//*Orthographic           // Optional. Use an orthographic projection rather than perspective
}

// Light sources can be top level objects, children of other objects, or contain child objects.
// In some ways they are like a *Group object, they have no geometry of their own but can contain
// objects with geometry.
*LightSource sun FFFFFF00     // Colour attribute is the colour of the light source
{
	*Style {Directional}      // One of: Directional, Point, Spot
	*Ambient {FF101010}       // Optional. Ambient colour
	*Diffuse {FF404040}       // Optional. Diffuse colour
	*Specular {FFFFFFFF 1000} // Optional. Specular colour and power
	*Range {100 0}            // Optional. range, falloff. Default is infinite.
	*Cone {30 60}             // Optional. Inner angle (deg), Outer angle (deg). Only for spot lights
	*CastShadow {10}          // Optional. range. Shadows are cast from this light source out to this range
	*o2w {*pos{5 5 5}}        // Position/orientation of the light. Directional lights shine down -z
}

// A global setting to draw everything in wireframe mode
//*Wireframe {}

*Command
{
	*Name {AddToScene}
}
