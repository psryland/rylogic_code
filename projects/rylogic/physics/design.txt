//*********************************************
// Physics engine
//	(c)opyright Paul Ryland 2006
//*********************************************

1)	Broad phase produces a collection of 'CollisionPairs' for the frame
	struct CollisionPair
	{
		broadphase::Entity* m_objectA;
		broadphase::Entity* m_objectB;
	};

2)	Narrow phase rejects non collisions and turns actual collisions into
	'ContactManifold's.  1 CollisionPair => 1+ ContactManifolds
	struct Contact
	{
		v4			m_pointA;				// The contact point on objectA in world space relative to objectA
		v4			m_pointB;				// The contact point on objectB in world space relative to objectB
		float		m_depth;				// The depth of penetration. > 0.0f indicates contact
		std::size_t	m_material_indexA;		// The material index for pointA
		std::size_t	m_material_indexB;		// The material index for pointB
	};
	struct ContactManifold
	{
		CollisionPair	m_pair;				// Objects in contact
		Contact			m_contact[64];		// Contacts in the manifold
		v4				m_normal;			// The contact normal in world space (the direction objectB needs to move to stop penetration objectA)
		float			m_lamda_force;		// The magnitude of the contact force.	Bounded [0,+inf]
		float			m_lamda_torque;		// The magnitude of the contact torque.	Bounded [0,+inf]
	};

3)	Constraint Matrix Building. ContactManifolds used to create constraint matrix.
	Each contact in the manifold adds a normal constraint and two friction
	constraints to the matrix. Joint constraints are also added to the matrix.

4)	Iterative improvement of 'm_lamda's using Projected Gauss-Seidel algorithm
	Lamda forces set in objects in collision pair. (Lamda forces in other objects should be zero)

5)	Integration. Sum constraint forces and external forces/torques to get acceleration, velocity, position...
	      





"double buffer"-style ph::Instance update e.g.
struct Instance
{
	// Read only variables - read by engine and client
	// Write variables - used by engine during update, not accessable by client
	void UpdateState() - copies updated variables to read only variables (in client thread)
	shared matrix
}

Use case:
	Client creates an instance of a broad phase.
	Client creates an instance of the physics engine. The engine contains:
		reference to the broad phase. (IBroadphase)
		collision dispatcher
		constraint solver
		integrator (integrates all of the dynamic physics objects)
		lists of physics objects (static, dynamic)
		lists of constraint objects
		lists of action objects
	Client creates physics objects:
		1) constructed from existing rigid body data
		2) pre-constructed in memory (use directly)
		Physics objects automatically added to broadphase
	Client steps simulation
		do collision detection to produce simulation islands and collision pairs
		per simulation island:
			1) apply external forces/torques (including from action objects) to change velocities
			2) use collision agents to produce contact manifolds and then set up constraint forces
			3) solve for constraint forces (using solver)
			4) integrate all objects forwards in time
		Havok 3 approach:
			1) Integrate to a potential state using above
			2) collision detection. calculates potential contacts and time of impact events
			3) process TOI events chronologically

General
	Use an allocator/deallocator approach. I know Steve hates this but it means the physics
	engine controls the lifetime of the physics objects making multi-threading more robust.
	The engine should handle allocation failure gracefully.
	
Constraints
	Fixed
	Point to plane
	Point to line
	DOF6
	Motors
	Pulleys
	Action objects managed by the engine and called each step. Used to apply continuous forces

Broadphase
	Use sweep'n'prune but make it memory efficent
	Use one broadphase for both static and dynamic objects
	Allow for "spooled" broadphase regions
	Allow any collidable object to be in the BP, (i.e. ghosts for collision notification)
	Use ghosts for containing a ray for speedy ray vs. world testing

Collision Detection
	Broadphase (sweep and prune) produces BP pairs
	Collision dispatcher converts BP pairs into appropriate ph::Instances/StaticInstances
		then constructs a collision agent (with appropriate collision detection function)
		based on the collision shape types. Collision agents should be cached.
	Collision agents are all processed, each collision adds constraints to the solver
	
	Supported primitives: any convex object, including 1 and 2D objects
		Implicit surfaces:
			sphere
			cylinder
			box
			client defined
		Explicit surfaces:
			Polytope
	GJK detection
		penetration depth
		manifold = contact points with the same normal
	
	Collision normals always point in the direction that B needs to move to get away from A.
		Prevents normal "flipping"	between penetration and separation
	Linear velocity based continuous collision detection (line vs. world (+) CCD sphere)
	
Collision Resolution
	Constraint solver
	bounce velocity threshold >bounce <0 restitution
	
Sleeping/Waking objects
Global friction scaling