//**********************************
// Ldr Binary Script
//  Copyright (c) Rylogic Ltd 2025
//**********************************

uint HashI(const char str[])
{
	#define FNV_offset_basis32 2166136261U
	#define FNV_prime32 16777619U
	local uint ch, h = FNV_offset_basis32;
    local int i, iend = Strlen(str);
	for (i = 0; i != iend; ++i)
	{
		ch = (uint)ToLower(str[i]);
		h = (h ^ ch) * FNV_prime32;
	}
	return h;
}

struct float2 { float x, y; };
struct float3 { float x, y, z; };
struct float4 { float x, y, z, w; };

enum <uint> EKeyword
{
	// AUTO-GENERATED-KEYWORDS-BEGIN
	Accel = HashI("Accel"),
	Addr = HashI("Addr"),
	Align = HashI("Align"),
	Alpha = HashI("Alpha"),
	Ambient = HashI("Ambient"),
	Anchor = HashI("Anchor"),
	AngAccel = HashI("AngAccel"),
	AngVelocity = HashI("AngVelocity"),
	Animation = HashI("Animation"),
	Arrow = HashI("Arrow"),
	Aspect = HashI("Aspect"),
	Axis = HashI("Axis"),
	AxisId = HashI("AxisId"),
	BackColour = HashI("BackColour"),
	BakeTransform = HashI("BakeTransform"),
	Bar = HashI("Bar"),
	Billboard = HashI("Billboard"),
	Billboard3D = HashI("Billboard3D"),
	Box = HashI("Box"),
	BoxList = HashI("BoxList"),
	Camera = HashI("Camera"),
	CastShadow = HashI("CastShadow"),
	Chart = HashI("Chart"),
	Circle = HashI("Circle"),
	Closed = HashI("Closed"),
	Colour = HashI("Colour"),
	ColourMask = HashI("ColourMask"),
	Colours = HashI("Colours"),
	Commands = HashI("Commands"),
	Cone = HashI("Cone"),
	ConvexHull = HashI("ConvexHull"),
	CoordFrame = HashI("CoordFrame"),
	CornerRadius = HashI("CornerRadius"),
	CrossSection = HashI("CrossSection"),
	CString = HashI("CString"),
	Custom = HashI("Custom"),
	Cylinder = HashI("Cylinder"),
	Dashed = HashI("Dashed"),
	Data = HashI("Data"),
	Depth = HashI("Depth"),
	Diffuse = HashI("Diffuse"),
	Dim = HashI("Dim"),
	Direction = HashI("Direction"),
	Divisions = HashI("Divisions"),
	Equation = HashI("Equation"),
	Euler = HashI("Euler"),
	Faces = HashI("Faces"),
	Facets = HashI("Facets"),
	Far = HashI("Far"),
	FilePath = HashI("FilePath"),
	Filter = HashI("Filter"),
	Font = HashI("Font"),
	ForeColour = HashI("ForeColour"),
	Format = HashI("Format"),
	Fov = HashI("Fov"),
	FovX = HashI("FovX"),
	FovY = HashI("FovY"),
	FrustumFA = HashI("FrustumFA"),
	FrustumWH = HashI("FrustumWH"),
	GenerateNormals = HashI("GenerateNormals"),
	Grid = HashI("Grid"),
	Group = HashI("Group"),
	Hidden = HashI("Hidden"),
	Instance = HashI("Instance"),
	Inverse = HashI("Inverse"),
	Layers = HashI("Layers"),
	LeftHanded = HashI("LeftHanded"),
	LightSource = HashI("LightSource"),
	Line = HashI("Line"),
	LineBox = HashI("LineBox"),
	LineD = HashI("LineD"),
	LineList = HashI("LineList"),
	Lines = HashI("Lines"),
	LineStrip = HashI("LineStrip"),
	LookAt = HashI("LookAt"),
	M3x3 = HashI("M3x3"),
	M4x4 = HashI("M4x4"),
	Mesh = HashI("Mesh"),
	Model = HashI("Model"),
	Name = HashI("Name"),
	Near = HashI("Near"),
	NewLine = HashI("NewLine"),
	NonAffine = HashI("NonAffine"),
	Normalise = HashI("Normalise"),
	Normals = HashI("Normals"),
	NoZTest = HashI("NoZTest"),
	NoZWrite = HashI("NoZWrite"),
	O2W = HashI("O2W"),
	Orthographic = HashI("Orthographic"),
	Orthonormalise = HashI("Orthonormalise"),
	Padding = HashI("Padding"),
	Param = HashI("Param"),
	Parametrics = HashI("Parametrics"),
	Part = HashI("Part"),
	Period = HashI("Period"),
	PerItemColour = HashI("PerItemColour"),
	PerItemParametrics = HashI("PerItemParametrics"),
	Pie = HashI("Pie"),
	Plane = HashI("Plane"),
	Point = HashI("Point"),
	Polygon = HashI("Polygon"),
	Pos = HashI("Pos"),
	Position = HashI("Position"),
	Quad = HashI("Quad"),
	Quat = HashI("Quat"),
	QuatPos = HashI("QuatPos"),
	Rand4x4 = HashI("Rand4x4"),
	RandColour = HashI("RandColour"),
	RandOri = HashI("RandOri"),
	RandPos = HashI("RandPos"),
	Range = HashI("Range"),
	Rect = HashI("Rect"),
	Reflectivity = HashI("Reflectivity"),
	Resolution = HashI("Resolution"),
	Ribbon = HashI("Ribbon"),
	Round = HashI("Round"),
	Scale = HashI("Scale"),
	ScreenSpace = HashI("ScreenSpace"),
	Series = HashI("Series"),
	Size = HashI("Size"),
	Smooth = HashI("Smooth"),
	Solid = HashI("Solid"),
	Source = HashI("Source"),
	Specular = HashI("Specular"),
	Sphere = HashI("Sphere"),
	Spline = HashI("Spline"),
	Square = HashI("Square"),
	Step = HashI("Step"),
	Stretch = HashI("Stretch"),
	Strikeout = HashI("Strikeout"),
	Style = HashI("Style"),
	Tetra = HashI("Tetra"),
	TexCoords = HashI("TexCoords"),
	Text = HashI("Text"),
	TextLayout = HashI("TextLayout"),
	Texture = HashI("Texture"),
	Transpose = HashI("Transpose"),
	Triangle = HashI("Triangle"),
	TriList = HashI("TriList"),
	TriStrip = HashI("TriStrip"),
	Tube = HashI("Tube"),
	Txfm = HashI("Txfm"),
	Underline = HashI("Underline"),
	Unknown = HashI("Unknown"),
	Up = HashI("Up"),
	Velocity = HashI("Velocity"),
	Verts = HashI("Verts"),
	Video = HashI("Video"),
	ViewPlaneZ = HashI("ViewPlaneZ"),
	Wedges = HashI("Wedges"),
	Weight = HashI("Weight"),
	Width = HashI("Width"),
	Wireframe = HashI("Wireframe"),
	XAxis = HashI("XAxis"),
	XColumn = HashI("XColumn"),
	YAxis = HashI("YAxis"),
	ZAxis = HashI("ZAxis"),
	// AUTO-GENERATED-KEYWORDS-END
};

void Sections(uint end);

// Sections that contain data only
struct DataSection
{
	local int64 fpos = FTell();

	// The hash of the keyword (4-bytes)
	EKeyword m_keyword;

	// The length of the section in bytes (excluding the header size)
	int m_size;

	// The payload of this section
    switch (m_keyword)
    {
        case Name:
        {
            char m_name[m_size];
            break;
        }
        case Colour:
        {
            uint32 m_colour <format=hex>;
            break;
        }
        default:
    	{
            byte m_data[m_size];
            break;
        }
    }

	FSeek(fpos + 8 + m_size);
};

// Sections that contain nested sections
struct NestedSection
{
	local int64 fpos = FTell();

	// The hash of the keyword (4-bytes)
	EKeyword m_keyword;

	// The length of the section in bytes (excluding the header size)
	int m_size;

	Sections(fpos + 8 + m_size);

	FSeek(fpos + 8 + m_size);
};


void Sections(uint end)
{
	local EKeyword kw;

	while (FTell() < end)
	{
		kw = (EKeyword)ReadUInt(FTell());
		switch (kw)
		{
			case Arrow:
			case Bar:
			case Box:
			case BoxList:
			case Chart:
			case Circle:
            case Commands:
			case Cone:
			case ConvexHull:
			case CoordFrame:
			case Custom:
			case Cylinder:
			case Equation:
			case FrustumFA:
			case FrustumWH:
			case Grid:
			case Group:
			case Instance:
			case LightSource:
			case Line:
			case LineBox:
			case LineD:
			case LineStrip:
			case Mesh:
			case Model:
			case Pie:
			case Plane:
			case Point:
			case Polygon:
			case Quad:
			case Rect:
			case Ribbon:
			case Series:
			case Sphere:
			case Spline:
			case Text:
			case Triangle:
			case Tube:
			case Unknown:
			{
				NestedSection object <name=EnumToString(this.m_keyword)>;
				break;
			}
	
			// Field Names
			case Accel:
			case Addr:
			case Align:
			case Alpha:
			case Anchor:
			case AngAccel:
			case AngVelocity:
			case Animation:
			case Aspect:
			case Axis:
			case AxisId:
			case BackColour:
			case BakeTransform:
			case Billboard:
			case Billboard3D:
			case Camera:
			case CastShadow:
			case Closed:
			case Colour:
			case ColourMask:
			case Colours:
			case CornerRadius:
			case CrossSection:
			case CString:
			case Dashed:
			case Data:
			case Depth:
			case Dim:
			case Direction:
			case Divisions:
			case Euler:
			case Faces:
			case Facets:
			case Far:
			case FilePath:
			case Filter:
			case Font:
			case ForeColour:
			case Format:
			case Fov:
			case FovX:
			case FovY:
			case GenerateNormals:
			case Hidden:
			case Inverse:
			case Layers:
			case LeftHanded:
			case LineList:
			case Lines:
			case LookAt:
			case M3x3:
			case M4x4:
			case Name:
			case Near:
			case NewLine:
			case NonAffine:
			case Normalise:
			case Normals:
			case NoZTest:
			case NoZWrite:
			case O2W:
			case Orthographic:
			case Orthonormalise:
			case Padding:
			case Param:
			case Part:
			case Period:
			case PerItemColour:
			case Pos:
			case Position:
			case Quat:
			case QuatPos:
			case Rand4x4:
			case RandColour:
			case RandOri:
			case RandPos:
			case Range:
			case Reflectivity:
			case Resolution:
			case Round:
			case Scale:
			case ScreenSpace:
			case Size:
			case Smooth:
			case Solid:
			case Source:
			case Specular:
			case Square:
			case Step:
			case Stretch:
			case Strikeout:
			case Style:
			case Tetra:
			case TexCoords:
			case TextLayout:
			case Texture:
			case Transpose:
			case TriList:
			case TriStrip:
			case Txfm:
			case Underline:
			case Up:
			case Velocity:
			case Verts:
			case Video:
			case ViewPlaneZ:
			case Wedges:
			case Weight:
			case Width:
			case Wireframe:
			case XAxis:
			case XColumn:
			case YAxis:
			case ZAxis:
			{
				DataSection data <name=EnumToString(this.m_keyword)>;
				break;
			}
			default:
			{
				DataSection unknown <name=EnumToString(this.m_keyword)>;
				break;
			}
		}
	}
}

Sections(FileSize());