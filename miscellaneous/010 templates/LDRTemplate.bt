//**********************************
// Ldr Binary Script
//  Copyright (c) Rylogic Ltd 2025
//**********************************

typedef struct { float x, y; } float2 <read=Str("%g  %g", this.x, this.y)>;
typedef struct { float x, y, z; } float3 <read=Str("%g  %g  %g", this.x, this.y, this.z)>;
typedef struct { float x, y, z, w; } float4 <read=Str("%g  %g  %g  %g", this.x, this.y, this.z, this.w)>;
typedef struct { float4 x, y, z, w; } float4x4;
typedef struct { float3 pt; uint col <format=hex>; } PtColour <read=Str("%g  %g  %g  0x%8.8x", this.pt.x, this.pt.y, this.pt.z, this.col)>;

enum <uint> EKeyword
{
	// AUTO-GENERATED-KEYWORDS-BEGIN
	Accel = 3784776339,
	Addr = 1087856498,
	Align = 1613521886,
	Alpha = 1569418667,
	Ambient = 479609067,
	Anchor = 1122880180,
	AngAccel = 801436173,
	AngVelocity = 2226367268,
	Animation = 3779456605,
	Arrow = 2220107398,
	Aspect = 2929999953,
	Axis = 1831579124,
	AxisId = 1558262649,
	BackColour = 1583172070,
	BakeTransform = 3697187404,
	Bar = 1991736602,
	Billboard = 3842439780,
	Billboard3D = 3185018435,
	BinaryStream = 1110191492,
	Box = 1892056626,
	BoxList = 282663022,
	Camera = 2663290958,
	CastShadow = 3890809582,
	Chart = 1487494731,
	Circle = 673280137,
	Closed = 3958264005,
	Colour = 33939709,
	Colours = 3175120778,
	Commands = 3062934995,
	Cone = 3711978346,
	ConvexHull = 1990998937,
	CoordFrame = 3958982335,
	CornerRadius = 2396916310,
	CrossSection = 3755993582,
	CString = 2719639595,
	Custom = 542584942,
	Cylinder = 2904473583,
	Dashed = 4029489596,
	Data = 3631407781,
	Depth = 4269121258,
	Diffuse = 1416505917,
	Dim = 3496118841,
	Direction = 3748513642,
	Divisions = 555458703,
	Equation = 2486886355,
	Euler = 1180123250,
	Faces = 455960701,
	Facets = 3463018577,
	Far = 3170376174,
	FilePath = 1962937316,
	Filter = 3353438327,
	Font = 659427984,
	ForeColour = 3815865055,
	Format = 3114108242,
	Fov = 2968750556,
	FovX = 862039340,
	FovY = 878816959,
	Frame = 3523899814,
	FrameRange = 1562558803,
	FrustumFA = 3281884904,
	FrustumWH = 3334630522,
	GenerateNormals = 750341558,
	Grid = 2944866961,
	Group = 1605967500,
	GroupColour = 2738848320,
	Hidden = 4128829753,
	Instance = 193386898,
	Inverse = 2986472067,
	Layers = 2411172191,
	LeftHanded = 1992685208,
	LightSource = 2597226090,
	LineNew = 2239024967,
	Line = 400234023,
	LineBox = 3297263992,
	LineD = 3504606073,
	LineList = 419493935,
	Lines = 3789825596,
	LineStrip = 4082781759,
	LoadAtFrame = 2484361697,
	LookAt = 3951693683,
	M3x3 = 1709156072,
	M4x4 = 3279345952,
	Mesh = 2701180604,
	Model = 2961925722,
	Name = 2369371622,
	Near = 1425233679,
	NewLine = 4281549323,
	NonAffine = 3876544483,
	Normalise = 4066511049,
	Normals = 247908339,
	NoZTest = 329427844,
	NoZWrite = 1339143375,
	O2W = 2877203913,
	Orthographic = 3824181163,
	Orthonormalise = 2850748489,
	Padding = 2157316278,
	Param = 1309554226,
	Parametrics = 4148475404,
	Part = 2088252948,
	Parts = 1480434725,
	Period = 2580104964,
	PerItemColour = 1734234667,
	PerItemParametrics = 2079701142,
	Pie = 1782644405,
	Plane = 3435855957,
	Point = 414084241,
	Polygon = 85768329,
	Pos = 1412654217,
	Position = 2471448074,
	Quad = 1738228046,
	Quat = 1469786142,
	QuatPos = 1842422916,
	Rand4x4 = 1326225514,
	RandColour = 1796074266,
	RandOri = 55550374,
	RandPos = 4225427356,
	Range = 4208725202,
	Rect = 3940830471,
	Reflectivity = 3111471187,
	Resolution = 488725647,
	Ribbon = 1119144745,
	RootAnimation = 464566237,
	Round = 1326178875,
	Scale = 2190941297,
	ScreenSpace = 3267318065,
	Series = 3703783856,
	Size = 597743964,
	Smooth = 24442543,
	Solid = 2973793012,
	Source = 466561496,
	Specular = 3195258592,
	Sphere = 2950268184,
	Spline = 1222691708,
	Square = 3031831110,
	Step = 3343129103,
	Stretch = 3542801962,
	Strikeout = 3261692833,
	Style = 2888859350,
	Tetra = 1647597299,
	TexCoords = 536531680,
	Text = 3185987134,
	TextLayout = 2881593448,
	TextStream = 998584670,
	Texture = 1013213428,
	TimeRange = 1138166793,
	Transpose = 3224470464,
	Triangle = 84037765,
	TriList = 3668920810,
	TriStrip = 1312470952,
	Tube = 1747223167,
	Txfm = 2438414104,
	Underline = 3850515583,
	Unknown = 2608177081,
	Up = 1128467232,
	Velocity = 846470194,
	Verts = 3167497763,
	Video = 3472427884,
	ViewPlaneZ = 458706800,
	Wedges = 451463732,
	Weight = 1352703673,
	Width = 2508680735,
	Wireframe = 305834533,
	XAxis = 3274667154,
	XColumn = 3953029077,
	YAxis = 1077811589,
	ZAxis = 3837765916,
	// AUTO-GENERATED-KEYWORDS-END
};
enum <uint> ECommandId
{
	// AUTO-GENERATED-COMMANDS-BEGIN
	Invalid = 3419534640,
	AddToScene = 3734185163,
	CameraToWorld = 1798355577,
	CameraPosition = 109155401,
	ObjectToWorld = 1059927965,
	Render = 4009327117,
	// AUTO-GENERATED-COMMANDS-END
};

uint HashI(const char str[])
{
	#define FNV_offset_basis32 2166136261U
	#define FNV_prime32 16777619U
	local uint ch, h = FNV_offset_basis32;
	local int i, iend = Strlen(str);
	for (i = 0; i != iend; ++i)
	{
		ch = (uint)ToLower(str[i]);
		h = (h ^ ch) * FNV_prime32;
	}
	return h;
}

struct SectionHeader
{
	EKeyword m_keyword;
	int m_section_size;
};

void Sections(uint end, EKeyword parent);

void NestingObject(EKeyword parent)
{
	struct L
	{
		local int64 fpos = FTell();
		local byte per_item_colour = 0;

		SectionHeader header <name="Header">;
		Sections(fpos + 8 + header.m_section_size, header.m_keyword);
		FSeek(fpos + 8 + header.m_section_size);
	} object <name=EnumToString(this.header.m_keyword)>;
}
void DataPayload(EKeyword parent, uint payload_size)
{
	switch (parent)
	{
		case Arrow:
		{
			if (parentof(this).per_item_colour == 0)
				float3 pt[payload_size/sizeof(float3)] <name="pts">;
			else
				PtColour pts[payload_size/sizeof(PtColour)] <name="pts">;
			break;
		}
		case Box:
		{
			float3 dim;
			break;
		}
		case Cone:
		{
			float angle;
			float to_tip;
			float to_base;
			break;
		}
		case Commands:
		{
			ECommandId command_id;
			break;
		}
		case LineStrip:
		{
			if (parentof(this).per_item_colour == 0)
				float3 pt[payload_size/sizeof(float3)] <name="pts">;
			else
				PtColour pts[payload_size/sizeof(PtColour)] <name="pts">;
			break;
		}
		case Plane:
		{
			float width;
			float height;
			break;
		}
		case Point:
		{
			if (parentof(this).per_item_colour == 0)
				float3 pt[payload_size/sizeof(float3)] <name="pts">;
			else
				PtColour pts[payload_size/sizeof(PtColour)] <name="pts">;
			break;
		}
		case Sphere:
		{
			float radius;
			break;
		}
		default:
		{
			byte data[payload_size];
			break;
		}
	}
}
void DataSection(EKeyword parent)
{
	struct D (EKeyword parent)
	{
		local int64 fpos = FTell();

		SectionHeader header <name="Header">;

		// The payload of this section
		switch (header.m_keyword)
		{
			case Addr:
			{
				if (header.m_section_size > 0*sizeof(int))
					int addrU;
				if (header.m_section_size > 1*sizeof(int))
					int addrV;
				if (header.m_section_size > 2*sizeof(int))
					int addrV;
				break;
			}
			case AxisId:
			{
				int axis_id;
				break;
			}
			case Colour:
			{
				uint32 colour <format=hex>;
				break;
			}
			case Data:
			{
				DataPayload(parent, header.m_section_size);
				break;
			}
			case FilePath:
			{
				char path[header.m_section_size];
				break;
			}
			case Filter:
			{
				int filter;
				break;
			}
			case GroupColour:
			{
				uint32 colour <format=hex>;
				break;
			}
			case M4x4:
			{
				float4x4 o2w;
				break;
			}
			case Name:
			{
				char name[header.m_section_size];
				break;
			}
			case PerItemColour:
			{
				parentof(this).per_item_colour = 1;
				break;
			}
			case Pos:
			{
				float3 pos;
				break;
			}
			case Size:
			{
				float2 dim;
				break;
			}
			case Style:
			{
				if (parent == Point)
					byte style;
				else
					byte data[header.m_section_size];
				break;
			}
			case Width:
			{
				if (parent == LineStrip)
					float width;
				else
					byte data[header.m_section_size];
				break;
			}

			// Nested sections
			case O2W:
			case Texture:
			{
				Sections(fpos + 8 + header.m_section_size, header.m_keyword);
				break;
			}
			default:
			{
				byte data[header.m_section_size];
				break;
			}
		}

		FSeek(fpos + 8 + header.m_section_size);
	} data(parent) <name=EnumToString(this.header.m_keyword)>;
}

// Recursive Sections function
void Sections(uint end, EKeyword parent)
{
	local EKeyword kw;

	while (FTell() < end)
	{
		kw = (EKeyword)ReadUInt(FTell());
		switch (kw)
		{
			case Arrow:
			case Bar:
			case Box:
			case BoxList:
			case Chart:
			case Circle:
			case Commands:
			case Cone:
			case ConvexHull:
			case CoordFrame:
			case Custom:
			case Cylinder:
			case Equation:
			case FrustumFA:
			case FrustumWH:
			case Grid:
			case Group:
			case Instance:
			case LightSource:
			case Line:
			case LineBox:
			case LineD:
			case LineStrip:
			case Mesh:
			case Model:
			case Pie:
			case Plane:
			case Point:
			case Polygon:
			case Quad:
			case Rect:
			case Ribbon:
			case Series:
			case Sphere:
			case Spline:
			case Text:
			case Triangle:
			case Tube:
			case Unknown:
			{
				NestingObject(parent);
				break;
			}
			default:
			{
				DataSection(parent);
				break;
			}
		}
	}
}

Sections(FileSize(), 0);
