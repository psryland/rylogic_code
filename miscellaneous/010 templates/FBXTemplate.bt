// Endian
LittleEndian();

// Structs
typedef ubyte u1;
typedef ushort u2;
typedef uint32 u4;
typedef uint64 u8;
typedef byte i1;
typedef short i2;
typedef int32 i4;
typedef int64 i8;
typedef float f4;
typedef double f8;

// Property type codes
enum <char> EPropType
{
	Bool = 'C',
	Int16 = 'Y',
	Int32 = 'I',
	Int64 = 'L',
	Float32 = 'F',
	Float64 = 'D',
	BoolArray = 'b',
	Int32Array = 'i',
	Int64Array = 'l',
	Float32Array = 'f',
	Float64Array = 'd',
	String = 'S',
	Raw = 'R',
};

// Forwards
struct Node;
struct NodeHeader;
struct NodeProperty;
void NodeTree(u4 end);
string NodeName(Node& n);
string PropValue(NodeProperty& p);

// Types
struct PropertyArray (EPropType type)
{
	u4 length;
	u4 encoding;
	u4 compressed_length;

	if (encoding == 1)
	{
		u1 compressed[compressed_length];
	}
	else switch (type)
	{
		case BoolArray: u1 items[length]; break;
		case Int32Array: i4 items[length]; break;
		case Int64Array: i8 items[length]; break;
		case Float32Array: f4 items[length]; break;
		case Float64Array: f8 items[length];  break;
	}
};

struct NodeHeader
{
	u4 node_end;
	u4 prop_count;
	u4 prop_length;
	u1 name_length;
	if (name_length != 0)
		char name[name_length];
};

struct NodeProperty
{
	EPropType type;
	switch (type)
	{
		case Bool:
		{
			u1 n;
			break;
		}
		case Int16:
		{
			i2 n;
			break;
		}
		case Int32:
		{
			i4 n;
			break;
		}
		case Int64:
		{
			i8 n;
			break;
		}
		case Float32:
		{
			f4 n;
			break;
		}
		case Float64:
		{
			f8 n;
			break;
		}
		case BoolArray:
		case Int32Array:
		case Int64Array:
		case Float32Array:
		case Float64Array:
		{
			PropertyArray arr(type);
			break;
		}
		case String:
		{
			u4 len;
			if (len != 0) char str[len];
			break;
		}
		case Raw:
		{
			u4 len;
			if (len != 0) u1 bytes[len];
			break;
		}
		default:
		{
			Warning("Unknown Property Type");
			Exit(1);
		}
	}
};

struct Node
{
	local int i;
	NodeHeader hdr <name="hdr", optimize=false>;
	for (i = 0; i != hdr.prop_count; i++)
		NodeProperty prop <name="prop", read=PropValue, optimize=false>;

	NodeTree(hdr.node_end);
};

string NodeName(Node& n)
{
	if (n.hdr.name_length != 0)
		return Str("Node %s", n.hdr.name);
	else
		return "null";
}

string PropValue(NodeProperty& p)
{
	switch (p.type)
	{
		case Bool:
		case Int16:
		case Int32:
		case Int64:
		{
			return Str("%Ld", p.n);
		}
		case Float32:
		case Float64:
		{
			return Str("%f", p.n);
		}
		case BoolArray:
		case Int32Array:
		case Int64Array:
		case Float32Array:
		case Float64Array:
		{
			return Str("Length: %d, Encoding: %d", p.arr.length, p.arr.encoding);
		}
		case String:
		{
			return p.len != 0 ? p.str : "";
		}
		case Raw:
		{
			return Str("bytes[%d]", p.len);
		}
		default:
		{
			return "Unknown Property Type";
		}
	}
}

void NodeTree(u4 end)
{
	while (FTell() < end)
	{
		Node node <name=NodeName, optimize=false>;
		if (node.hdr.node_end == 0)
			break;
	}
}

struct
{
	char magic[23];
	u4 version;
	if (magic != "Kaydara FBX Binary  ")
	{
		Warning("Bad FBX file!");
		Exit(1);
	}

	NodeTree(FileSize() - FTell());
} fbx;
