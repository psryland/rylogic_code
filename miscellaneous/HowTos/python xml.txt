Import the element tree module:
  import xml.etree.ElementTree as ET


Create a dictionary of the namespaces. If unknown, you'll have to read them out of the xml file.
The namespaces have to be registered before parsing the xml file. Registering only effects loading
and saving xml files, not searching :-/
   nsmap = {
	''    :'http://schemas.microsoft.com/developer/msbuild/2003',
	'blah':'http://schemas.blah.com/blah',
	}
   for k,v in nsmap.items(): ET.register_namespace(k, v)


Load the xml file:
  # Create an ElementTree instance (constructed by parsing the file)
  tree = ET.parse(r"file_path")
  r = tree.getroot()

Save the xml file with formatting:
  tree.write(r"R:\dump\test.xml", xml_declaration = True, method = "xml");

Navigate:
  # All children on the node 'r'
  for n in r:
     print(str(n))

  # Rather shitly, you have to use fully quanlified element names.
  ns = '{'+nsmap['']+'}'
  
  # First element of 'r' (not recursive)
  n = r.find(ns+"Child")
  print(str(n))

  # All 'Child' elements of node 'r' (not recursive)
  for n in r.findall(ns+"Child"):
     print(str(n))

  # You can do this, but it only works for non-default namespaces
  for n in r.findall('blah:Child', nsmap):
     print(str(n))

  # For all children recursively, use iter()
  for n in r.iter(ns+'Child'):
     print(str(n))

Rename elements:
  e = r.find(ns+"Child")
  e.tag = "NewNodeName"

Add elements:
  c = ET.SubElement(r, ns+"child")
  c.text = "Hello"

Remove elements:
  # Remove one element
  r.remove(n.find(ns+"child"))

  # Remove multiple elements (note the list to make a copy of n so that it isn't modified during iteration)
  for c in list(n):
     n.remove(c)
