//***************************************************************************************************
// Ldr Gizmo
//  Copyright (c) Rylogic Ltd 2015
//***************************************************************************************************

#include <exception>
#include "pr/geometry/geometry.h"
#include "pr/geometry/models_cylinder.h"
#include "pr/renderer11/renderer.h"
#include "pr/ldraw/ldr_gizmo.h"

namespace pr
{
	namespace ldr
	{
		#pragma region Gizmo Model Data
		namespace TranslateGizmo
		{
			#pragma region Verts
			static pr::rdr::Vert const verts[] =
			{
				{{-0.174072f, +0.000000f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.901757f, -0.000260f, -0.432244f, 0.0f}, {-6.796443f, +24.952000f}},
				{{-0.168152f, -0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.870113f, -0.233286f, -0.434145f, 0.0f}, {-5.006906f, +27.434067f}},
				{{-0.168152f, +0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.870136f, +0.233560f, -0.433951f, 0.0f}, {-8.585980f, +28.205254f}},
				{{-0.167786f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.901760f, -0.000288f, -0.432237f, 0.0f}, {-6.763902f, +26.860504f}},
				{{-0.162048f, -0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.870256f, -0.233317f, -0.433840f, 0.0f}, {-4.572176f, +26.315193f}},
				{{-0.162048f, +0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.870094f, +0.233572f, -0.434027f, 0.0f}, {-0.474391f, +8.564793f}},
				{{-0.150757f, -0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.779526f, -0.450199f, -0.435500f, 0.0f}, {-2.815179f, +25.725159f}},
				{{-0.150757f, +0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.779526f, +0.450199f, -0.435500f, 0.0f}, {-8.716853f, +21.025810f}},
				{{-0.145264f, -0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.779614f, -0.450392f, -0.435143f, 0.0f}, {-2.127622f, +26.032921f}},
				{{-0.145264f, +0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.779614f, +0.450392f, -0.435142f, 0.0f}, {-1.134312f, +10.157982f}},
				{{-0.123108f, -0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.635789f, -0.635789f, -0.437659f, 0.0f}, {-0.370625f, +26.125376f}},
				{{-0.123108f, +0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.636103f, +0.635642f, -0.437416f, 0.0f}, {-8.716853f, +19.479492f}},
				{{-0.118591f, -0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.635950f, -0.635950f, -0.437189f, 0.0f}, {-0.403166f, +26.032921f}},
				{{-0.118591f, +0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.636126f, +0.635614f, -0.437424f, 0.0f}, {-8.749394f, +30.720282f}},
				{{-0.087036f, -0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.450199f, -0.779526f, -0.435500f, 0.0f}, {+2.815179f, +25.725159f}},
				{{-0.087036f, +0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.450139f, +0.779762f, -0.435138f, 0.0f}, {-10.506391f, +31.293842f}},
				{{-0.083862f, -0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.450392f, -0.779614f, -0.435142f, 0.0f}, {+2.847720f, +26.315193f}},
				{{-0.083862f, +0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.450144f, +0.779562f, -0.435491f, 0.0f}, {-3.552197f, +12.575867f}},
				{{-0.059998f, +0.000000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.997793f, -0.066404f, +0.000000f, 0.0f}, {-7.382882f, -0.000000f}},
				{{-0.059998f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-1.000000f, +0.000000f, +0.000000f, 0.0f}, {-7.382882f, +30.311646f}},
				{{-0.057922f, -0.015503f, -0.015503f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.947168f, -0.320737f, +0.000000f, 0.0f}, {-4.018277f, -0.611384f}},
				{{-0.057922f, -0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.965724f, -0.259573f, +0.000000f, 0.0f}, {-5.593345f, +30.311646f}},
				{{-0.057922f, +0.015503f, +0.015503f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.980055f, +0.198724f, +0.000000f, 0.0f}, {-8.648276f, +0.611384f}},
				{{-0.057922f, +0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.965724f, +0.259572f, +0.000000f, 0.0f}, {-4.573375f, +7.466473f}},
				{{-0.051941f, -0.029968f, -0.029968f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.834821f, -0.550521f, +0.000000f, 0.0f}, {-3.401618f, -1.181102f}},
				{{-0.051941f, -0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.866590f, -0.499021f, +0.000000f, 0.0f}, {-3.401618f, +30.311646f}},
				{{-0.051941f, +0.029968f, +0.029968f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.893932f, +0.448203f, +0.000000f, 0.0f}, {-9.264935f, +1.181102f}},
				{{-0.051941f, +0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.866590f, +0.499021f, +0.000000f, 0.0f}, {-9.264935f, +30.311646f}},
				{{-0.045044f, -0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.233286f, -0.870113f, -0.434145f, 0.0f}, {+4.604716f, +26.888756f}},
				{{-0.045044f, +0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.233423f, +0.870231f, -0.433833f, 0.0f}, {-9.851375f, +32.347301f}},
				{{-0.043396f, -0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.233317f, -0.870256f, -0.433840f, 0.0f}, {+4.572176f, +26.315193f}},
				{{-0.043396f, +0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.233390f, +0.870087f, -0.434141f, 0.0f}, {-6.828984f, +32.718246f}},
				{{-0.042419f, -0.042419f, -0.042419f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.707107f, -0.707107f, +0.000000f, 0.0f}, {+0.957064f, -1.670331f}},
				{{-0.042419f, -0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.707107f, -0.707107f, +0.000000f, 0.0f}, {+0.957064f, +30.311646f}},
				{{-0.042419f, +0.042419f, +0.042419f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.741318f, +0.671153f, +0.000000f, 0.0f}, {-9.303292f, +1.670331f}},
				{{-0.042419f, +0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.707107f, +0.707107f, +0.000000f, 0.0f}, {-9.303292f, +30.311646f}},
				{{-0.029968f, -0.051941f, -0.029968f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.550521f, -0.834821f, +0.000000f, 0.0f}, {+1.573724f, -1.181102f}},
				{{-0.029968f, -0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.499021f, -0.866590f, +0.000000f, 0.0f}, {+1.573724f, +30.311646f}},
				{{-0.029968f, +0.051941f, +0.051941f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.529831f, +0.848103f, +0.000000f, 0.0f}, {-9.919951f, +2.045729f}},
				{{-0.029968f, +0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.499021f, +0.866590f, +0.000000f, 0.0f}, {-8.648276f, +30.311646f}},
				{{-0.015503f, -0.057922f, -0.015503f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.320737f, -0.947168f, +0.000000f, 0.0f}, {+4.018277f, -0.611384f}},
				{{-0.015503f, -0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.259573f, -0.965724f, +0.000000f, 0.0f}, {+4.018277f, +30.311646f}},
				{{-0.015503f, +0.057922f, +0.057922f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.278041f, +0.960569f, +0.000000f, 0.0f}, {-9.264935f, +2.281714f}},
				{{-0.015503f, +0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.259573f, +0.965724f, +0.000000f, 0.0f}, {-9.264935f, +30.311646f}},
				{{-0.005188f, +0.000000f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.468760f, +0.000000f, +0.883325f, 0.0f}, {+6.648972f, +6.855089f}},
				{{-0.005005f, -0.001343f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.450745f, -0.118729f, +0.884722f, 0.0f}, {-3.736851f, +36.514133f}},
				{{-0.005005f, +0.001343f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.450745f, +0.118729f, +0.884722f, 0.0f}, {-8.929702f, +33.308411f}},
				{{-0.004517f, -0.002563f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.407072f, -0.233771f, +0.882974f, 0.0f}, {-1.292298f, +36.914349f}},
				{{-0.004517f, +0.002563f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.407072f, +0.233771f, +0.882974f, 0.0f}, {-8.983509f, +33.308411f}},
				{{-0.003662f, -0.003662f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.330027f, -0.329765f, +0.884499f, 0.0f}, {+1.238490f, +36.914349f}},
				{{-0.003662f, +0.003662f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.330031f, +0.330031f, +0.884397f, 0.0f}, {-9.584718f, +30.268467f}},
				{{-0.002563f, -0.004517f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.233396f, -0.407451f, +0.882898f, 0.0f}, {+3.683044f, +36.514133f}},
				{{-0.002563f, +0.004517f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.233771f, +0.407072f, +0.882974f, 0.0f}, {-9.638526f, +30.268467f}},
				{{-0.001343f, -0.005005f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.119211f, -0.450825f, +0.884616f, 0.0f}, {+5.874771f, +35.740974f}},
				{{-0.001343f, +0.005005f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.118729f, +0.450745f, +0.884722f, 0.0f}, {+6.801742f, +7.054183f}},
				{{+0.000000f, -0.174072f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000260f, -0.901757f, -0.432244f, 0.0f}, {+6.796443f, +24.952000f}},
				{{+0.000000f, -0.167786f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000288f, -0.901760f, -0.432237f, 0.0f}, {-6.855089f, +0.249304f}},
				{{+0.000000f, -0.059998f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.066404f, -0.997793f, +0.000000f, 0.0f}, {+6.210004f, -0.000000f}},
				{{+0.000000f, -0.059998f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, -1.000000f, +0.000000f, 0.0f}, {-6.855089f, +4.492885f}},
				{{+0.000000f, -0.005188f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000129f, -0.468627f, +0.883396f, 0.0f}, {+6.855089f, +6.648972f}},
				{{+0.000000f, +0.005188f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000129f, +0.468627f, +0.883396f, 0.0f}, {-5.874771f, +26.342276f}},
				{{+0.000000f, +0.059998f, +0.059998f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +1.000000f, +0.000000f, 0.0f}, {-7.999541f, +2.362205f}},
				{{+0.000000f, +0.059998f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +1.000000f, +0.000000f, 0.0f}, {-7.999541f, +30.311646f}},
				{{+0.000000f, +0.167786f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000288f, +0.901760f, -0.432237f, 0.0f}, {-6.855089f, +13.460875f}},
				{{+0.000000f, +0.174072f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000260f, +0.901757f, -0.432244f, 0.0f}, {-5.006906f, +34.062996f}},
				{{+0.001343f, -0.005005f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.118729f, -0.450745f, +0.884722f, 0.0f}, {+7.718115f, +34.647564f}},
				{{+0.001343f, +0.005005f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.119211f, +0.450825f, +0.884616f, 0.0f}, {+6.908436f, +7.054183f}},
				{{+0.002563f, -0.004517f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.233771f, -0.407072f, +0.882974f, 0.0f}, {+8.983509f, +33.308411f}},
				{{+0.002563f, +0.004517f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.233396f, +0.407451f, +0.882899f, 0.0f}, {-3.736851f, +25.569118f}},
				{{+0.003662f, -0.003662f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.330031f, -0.330031f, +0.884397f, 0.0f}, {+7.000836f, +6.709342f}},
				{{+0.003662f, +0.003662f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.330027f, +0.329765f, +0.884499f, 0.0f}, {+7.000836f, +7.000836f}},
				{{+0.004517f, -0.002563f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.407072f, -0.233771f, +0.882974f, 0.0f}, {+7.033592f, +6.752031f}},
				{{+0.004517f, +0.002563f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.407072f, +0.233771f, +0.882974f, 0.0f}, {+3.736851f, +25.569118f}},
				{{+0.005005f, -0.001343f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.450745f, -0.118729f, +0.884722f, 0.0f}, {+7.054183f, +6.801742f}},
				{{+0.005005f, +0.001343f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.450586f, +0.118817f, +0.884791f, 0.0f}, {+3.683044f, +25.569118f}},
				{{+0.005188f, +0.000000f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.468627f, -0.000129f, +0.883396f, 0.0f}, {+7.718115f, +27.435688f}},
				{{+0.015503f, -0.057922f, +0.015503f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.198724f, -0.980055f, +0.000000f, 0.0f}, {+7.999541f, +0.611384f}},
				{{+0.015503f, -0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.259572f, -0.965724f, +0.000000f, 0.0f}, {+7.999541f, +30.311646f}},
				{{+0.015503f, +0.057922f, +0.057922f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.278041f, +0.960569f, +0.000000f, 0.0f}, {-6.210004f, +2.281714f}},
				{{+0.015503f, +0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.259573f, +0.965724f, +0.000000f, 0.0f}, {-3.401618f, +30.311646f}},
				{{+0.029968f, -0.051941f, +0.029968f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.448203f, -0.893932f, +0.000000f, 0.0f}, {+9.264935f, +1.181102f}},
				{{+0.029968f, -0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.499022f, -0.866590f, +0.000000f, 0.0f}, {+9.303292f, +30.311646f}},
				{{+0.029968f, +0.051941f, +0.051941f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.529831f, +0.848103f, +0.000000f, 0.0f}, {-0.957064f, +2.045729f}},
				{{+0.029968f, +0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.499021f, +0.866590f, +0.000000f, 0.0f}, {-8.036192f, +8.900819f}},
				{{+0.042419f, -0.042419f, +0.042419f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.671154f, -0.741318f, +0.000000f, 0.0f}, {+9.303292f, +1.670331f}},
				{{+0.042419f, -0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.707107f, -0.707107f, +0.000000f, 0.0f}, {-8.525420f, +5.184758f}},
				{{+0.042419f, +0.042419f, +0.042419f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.707107f, +0.707107f, +0.000000f, 0.0f}, {-1.573724f, +1.670331f}},
				{{+0.042419f, +0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.707107f, +0.707107f, +0.000000f, 0.0f}, {+1.573724f, +30.311646f}},
				{{+0.043396f, -0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.233390f, -0.870087f, -0.434141f, 0.0f}, {+8.553440f, +27.631691f}},
				{{+0.043396f, +0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.233317f, +0.870256f, -0.433840f, 0.0f}, {-2.847720f, +34.034744f}},
				{{+0.045044f, -0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.233423f, -0.870231f, -0.433833f, 0.0f}, {+8.585980f, +28.205254f}},
				{{+0.045044f, +0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.233286f, +0.870113f, -0.434145f, 0.0f}, {-2.815179f, +34.608307f}},
				{{+0.051941f, -0.029968f, +0.051941f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.848103f, -0.529831f, +0.000000f, 0.0f}, {+9.919951f, +2.045729f}},
				{{+0.051941f, -0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.866590f, -0.499021f, +0.000000f, 0.0f}, {-8.900819f, +5.673987f}},
				{{+0.051941f, +0.029968f, +0.051941f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.848103f, +0.529831f, +0.000000f, 0.0f}, {+0.957064f, +2.045729f}},
				{{+0.051941f, +0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.866590f, +0.499021f, +0.000000f, 0.0f}, {+0.957064f, +30.311646f}},
				{{+0.057922f, -0.015503f, +0.057922f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.960569f, -0.278041f, +0.000000f, 0.0f}, {+7.382882f, +2.281714f}},
				{{+0.057922f, -0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.965724f, -0.259573f, +0.000000f, 0.0f}, {-9.136804f, +6.243706f}},
				{{+0.057922f, +0.015503f, +0.057922f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.960569f, +0.278041f, +0.000000f, 0.0f}, {+3.401618f, +2.281714f}},
				{{+0.057922f, +0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.965724f, +0.259572f, +0.000000f, 0.0f}, {-9.136804f, +7.466473f}},
				{{+0.059998f, +0.000000f, +0.059998f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+1.000000f, +0.000000f, +0.000000f, 0.0f}, {+7.999541f, +2.362205f}},
				{{+0.059998f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+1.000000f, -0.000000f, +0.000000f, 0.0f}, {-9.217294f, +6.855089f}},
				{{+0.083862f, -0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.450144f, -0.779562f, -0.435491f, 0.0f}, {-10.157982f, +1.134312f}},
				{{+0.083862f, +0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.450392f, +0.779614f, -0.435142f, 0.0f}, {-4.572176f, +34.034744f}},
				{{+0.087036f, -0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.450139f, -0.779762f, -0.435138f, 0.0f}, {+9.851375f, +29.149759f}},
				{{+0.087036f, +0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.450199f, +0.779526f, -0.435500f, 0.0f}, {-0.370625f, +14.379927f}},
				{{+0.118591f, -0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.636126f, -0.635614f, -0.437424f, 0.0f}, {+8.749394f, +30.720282f}},
				{{+0.118591f, +0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.635950f, +0.635950f, -0.437189f, 0.0f}, {+2.127622f, +34.317020f}},
				{{+0.123108f, -0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.636103f, -0.635642f, -0.437416f, 0.0f}, {+8.716853f, +31.293842f}},
				{{+0.123108f, +0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.635789f, +0.635789f, -0.437659f, 0.0f}, {+2.160163f, +14.379927f}},
				{{+0.145264f, -0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.779614f, -0.450392f, -0.435143f, 0.0f}, {+10.473850f, +30.720282f}},
				{{+0.145264f, +0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.779614f, +0.450392f, -0.435142f, 0.0f}, {+0.403166f, +34.317020f}},
				{{+0.150757f, -0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.779526f, -0.450199f, -0.435500f, 0.0f}, {+10.506391f, +31.293842f}},
				{{+0.150757f, +0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.779526f, +0.450199f, -0.435500f, 0.0f}, {+4.604716f, +14.780144f}},
				{{+0.162048f, -0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.870256f, -0.233317f, -0.433840f, 0.0f}, {-13.235787f, +5.145386f}},
				{{+0.162048f, +0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.870094f, +0.233572f, -0.434027f, 0.0f}, {-13.235787f, +8.564793f}},
				{{+0.167786f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.901760f, -0.000288f, -0.432237f, 0.0f}, {-13.460875f, +6.855089f}},
				{{+0.168152f, -0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.870113f, -0.233286f, -0.434145f, 0.0f}, {+6.796443f, +33.291809f}},
				{{+0.168152f, +0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.870136f, +0.233560f, -0.433951f, 0.0f}, {+2.815179f, +34.608307f}},
				{{+0.174072f, +0.000000f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.901757f, -0.000260f, -0.432244f, 0.0f}, {+8.585980f, +33.291809f}},
				{{-0.043396f, +0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.828984f, +32.718246f}},
				{{-0.059998f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-7.382882f, +30.311646f}},
				{{-0.083862f, +0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-3.552197f, +12.575867f}},
				{{-0.057922f, +0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {-4.573375f, +7.466473f}},
				{{-0.051941f, +0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-9.264935f, +30.311646f}},
				{{-0.042419f, +0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-9.303292f, +30.311646f}},
				{{+0.000000f, +0.167786f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.855089f, +13.460875f}},
				{{-0.029968f, +0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {-8.648276f, +30.311646f}},
				{{-0.015503f, +0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-9.264935f, +30.311646f}},
				{{+0.000000f, +0.059998f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-7.999541f, +30.311646f}},
				{{+0.015503f, +0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-3.401618f, +30.311646f}},
				{{+0.043396f, +0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-2.847720f, +34.034744f}},
				{{+0.029968f, +0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {-8.036192f, +8.900819f}},
				{{+0.042419f, +0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+1.573724f, +30.311646f}},
				{{+0.051941f, +0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+0.957064f, +30.311646f}},
				{{+0.083862f, +0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-4.572176f, +34.034744f}},
				{{+0.057922f, +0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {-9.136804f, +7.466473f}},
				{{+0.059998f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-9.217294f, +6.855089f}},
				{{+0.083862f, -0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-10.157982f, +1.134312f}},
				{{+0.118591f, -0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+8.749394f, +30.720282f}},
				{{+0.118591f, +0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+2.127622f, +34.317020f}},
				{{+0.145264f, -0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+10.473850f, +30.720282f}},
				{{+0.145264f, +0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+0.403166f, +34.317020f}},
				{{+0.162048f, -0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-13.235787f, +5.145386f}},
				{{+0.162048f, +0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-13.235787f, +8.564793f}},
				{{+0.167786f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-13.460875f, +6.855089f}},
				{{-0.162048f, +0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-0.474391f, +8.564793f}},
				{{-0.162048f, -0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-4.572176f, +26.315193f}},
				{{-0.167786f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, -0.000000f, -1.000000f, 0.0f}, {-6.763902f, +26.860504f}},
				{{-0.145264f, -0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-2.127622f, +26.032921f}},
				{{-0.145264f, +0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-1.134312f, +10.157982f}},
				{{-0.118591f, -0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-0.403166f, +26.032921f}},
				{{-0.118591f, +0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.749394f, +30.720282f}},
				{{-0.083862f, -0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+2.847720f, +26.315193f}},
				{{-0.043396f, -0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+4.572176f, +26.315193f}},
				{{-0.057922f, -0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-5.593345f, +30.311646f}},
				{{-0.051941f, -0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-3.401618f, +30.311646f}},
				{{-0.042419f, -0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+0.957064f, +30.311646f}},
				{{+0.000000f, -0.167786f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.855089f, +0.249304f}},
				{{-0.029968f, -0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+1.573724f, +30.311646f}},
				{{-0.015503f, -0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+4.018277f, +30.311646f}},
				{{+0.000000f, -0.059998f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.855089f, +4.492885f}},
				{{+0.015503f, -0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+7.999541f, +30.311646f}},
				{{+0.043396f, -0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+8.553440f, +27.631691f}},
				{{+0.029968f, -0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+9.303292f, +30.311646f}},
				{{+0.042419f, -0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.525420f, +5.184758f}},
				{{+0.051941f, -0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.900819f, +5.673987f}},
				{{+0.057922f, -0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-9.136804f, +6.243706f}},
				{{-0.150757f, +0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.683491f, +0.394417f, +0.614228f, 0.0f}, {-8.716853f, +21.025810f}},
				{{-0.123108f, +0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.557957f, +0.557957f, +0.614302f, 0.0f}, {-8.716853f, +19.479492f}},
				{{-0.174072f, +0.000000f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.789125f, +0.000000f, +0.614232f, 0.0f}, {-6.796443f, +24.952000f}},
				{{-0.168152f, +0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.762260f, +0.204157f, +0.614231f, 0.0f}, {-8.585980f, +28.205254f}},
				{{+0.087036f, +0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.394395f, +0.683497f, +0.614235f, 0.0f}, {-0.370625f, +14.379927f}},
				{{+0.045044f, +0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.204174f, +0.762246f, +0.614242f, 0.0f}, {-2.815179f, +34.608307f}},
				{{+0.000000f, +0.174072f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000005f, +0.789131f, +0.614225f, 0.0f}, {-5.006906f, +34.062996f}},
				{{-0.087036f, +0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.394417f, +0.683491f, +0.614228f, 0.0f}, {-10.506391f, +31.293842f}},
				{{+0.168152f, -0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.762260f, -0.204157f, +0.614231f, 0.0f}, {+6.796443f, +33.291809f}},
				{{+0.150757f, -0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.683491f, -0.394417f, +0.614228f, 0.0f}, {+10.506391f, +31.293842f}},
				{{+0.168152f, +0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.762264f, +0.204165f, +0.614224f, 0.0f}, {+2.815179f, +34.608307f}},
				{{+0.150757f, +0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.683491f, +0.394417f, +0.614228f, 0.0f}, {+4.604716f, +14.780144f}},
				{{-0.045044f, +0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.204157f, +0.762260f, +0.614231f, 0.0f}, {-9.851375f, +32.347301f}},
				{{-0.168152f, -0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.762260f, -0.204157f, +0.614231f, 0.0f}, {-5.006906f, +27.434067f}},
				{{-0.123108f, -0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.557969f, -0.557957f, +0.614291f, 0.0f}, {-0.370625f, +26.125376f}},
				{{-0.087036f, -0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.394395f, -0.683497f, +0.614235f, 0.0f}, {+2.815179f, +25.725159f}},
				{{-0.150757f, -0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.683491f, -0.394417f, +0.614228f, 0.0f}, {-2.815179f, +25.725159f}},
				{{-0.045044f, -0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.204174f, -0.762246f, +0.614242f, 0.0f}, {+4.604716f, +26.888756f}},
				{{+0.000000f, -0.174072f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000005f, -0.789131f, +0.614225f, 0.0f}, {+6.796443f, +24.952000f}},
				{{+0.174072f, +0.000000f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.789131f, -0.000005f, +0.614225f, 0.0f}, {+8.585980f, +33.291809f}},
				{{+0.045044f, -0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.204157f, -0.762260f, +0.614231f, 0.0f}, {+8.585980f, +28.205254f}},
				{{+0.087036f, -0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.394417f, -0.683491f, +0.614228f, 0.0f}, {+9.851375f, +29.149759f}},
				{{+0.123108f, -0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.557957f, -0.557957f, +0.614302f, 0.0f}, {+8.716853f, +31.293842f}},
				{{+0.123108f, +0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.557969f, +0.557957f, +0.614291f, 0.0f}, {+2.160163f, +14.379927f}},
			};
			#pragma endregion
			#pragma region Indices
			static uint16 const idxs[] =
			{
				29,  63,  31,  63,  29,  64,  15,  31,  17,  31,  15,  29,  39,  42,  38,  42,  39,  43,  14,  12,  16,  12,  14,  10,  1,  8,  6,  8,  1,  4,  0,  4,
				1,  4,  0,  3,  21,  24,  25,  24,  21,  20,  6,  12,  10,  12,  6,  8,  36,  33,  32,  33,  36,  37,  108,  102,  106,  102,  108,  104,  98,  101,  100,  101,
				98,  99,  57,  41,  40,  41,  57,  58,  105,  107,  103,  107,  105,  109,  114,  119,  117,  119,  114,  116,  90,  56,  88,  56,  90,  55,  55,  30,  56,  30,  55,  28,
				80,  77,  76,  77,  80,  81,  84,  81,  80,  81,  84,  85,  84,  93,  85,  93,  84,  92,  104,  88,  102,  88,  104,  90,  96,  101,  97,  101,  96,  100,  110,  117,
				112,  117,  110,  114,  82,  87,  86,  87,  82,  83,  116,  118,  119,  118,  116,  115,  107,  113,  111,  113,  107,  109,  76,  58,  57,  58,  76,  77,  111,  118,  115,  118,
				111,  113,  94,  87,  95,  87,  94,  86,  106,  112,  108,  112,  106,  110,  28,  16,  30,  16,  28,  14,  91,  103,  89,  103,  91,  105,  61,  79,  78,  79,  61,  62,
				64,  89,  63,  89,  64,  91,  2,  3,  0,  3,  2,  5,  7,  13,  9,  13,  7,  11,  35,  26,  27,  26,  35,  34,  2,  9,  5,  9,  2,  7,  11,  17,
				13,  17,  11,  15,  19,  22,  18,  22,  19,  23,  120,  121,  122,  121,  120,  123,  123,  120,  124,  124,  120,  125,  125,  120,  126,  125,  126,  127,  127,  126,  128,  128,
				126,  129,  129,  126,  130,  130,  126,  131,  130,  131,  132,  132,  131,  133,  133,  131,  134,  134,  131,  135,  134,  135,  136,  136,  135,  137,  137,  135,  138,  138,  135,  139,
				139,  135,  140,  139,  140,  141,  141,  140,  142,  141,  142,  143,  143,  142,  144,  143,  144,  145,  146,  147,  148,  147,  146,  149,  149,  146,  150,  149,  150,  151,  151,  150,
				152,  151,  152,  153,  153,  152,  122,  153,  122,  154,  154,  122,  121,  154,  121,  155,  154,  155,  156,  154,  156,  157,  154,  157,  158,  158,  157,  159,  158,  159,  160,  158,
				160,  161,  158,  161,  162,  158,  162,  163,  163,  162,  164,  163,  164,  165,  163,  165,  166,  163,  166,  138,  138,  166,  167,  138,  167,  137,  50,  168,  48,  168,  50,  169,
				46,  170,  44,  170,  46,  171,  45,  46,  44,  46,  45,  48,  48,  45,  47,  48,  47,  50,  50,  47,  49,  50,  49,  52,  52,  49,  51,  52,  51,  53,  52,  53,
				54,  54,  53,  60,  60,  53,  59,  60,  59,  66,  66,  59,  65,  66,  65,  67,  66,  67,  68,  68,  67,  69,  68,  69,  70,  70,  69,  72,  72,  69,  71,  72,
				71,  73,  72,  73,  74,  74,  73,  75,  66,  172,  173,  172,  66,  68,  60,  173,  174,  173,  60,  66,  48,  171,  46,  171,  48,  168,  50,  175,  169,  175,  50,  52,
				176,  71,  177,  71,  176,  73,  178,  72,  74,  72,  178,  179,  54,  174,  180,  174,  54,  60,  52,  180,  175,  180,  52,  54,  45,  170,  181,  170,  45,  44,  51,  182,
				183,  182,  51,  49,  47,  181,  184,  181,  47,  45,  49,  184,  182,  184,  49,  47,  59,  185,  186,  185,  59,  53,  187,  73,  176,  73,  187,  75,  65,  186,  188,  186,
				65,  59,  69,  189,  190,  189,  69,  67,  53,  183,  185,  183,  53,  51,  179,  70,  72,  70,  179,  191,  177,  69,  190,  69,  177,  71,  178,  75,  187,  75,  178,  74,
				68,  191,  172,  191,  68,  70,  67,  188,  189,  188,  67,  65,  25,  32,  33,  32,  25,  24,  40,  37,  36,  37,  40,  41,  92,  97,  93,  97,  92,  96,  98,  95,
				99,  95,  98,  94,  19,  20,  21,  20,  19,  18,  23,  26,  22,  26,  23,  27,  35,  38,  34,  38,  35,  39,  43,  61,  42,  61,  43,  62,  78,  83,  82,  83,
				78,  79, 
			};
			#pragma endregion
			#pragma region BoundingBox
			static BBox const bbox = {{+0.000000f, +0.000000f, +0.478787f, 1.0f}, {+0.174119f, +0.174119f, +0.521213f, 0.0f}};
			#pragma endregion
		}
		namespace RotateGizmo
		{
			#pragma region Verts
			static pr::rdr::Vert const verts[] =
			{
				{{+0.000000f, +0.000000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -1.000000f, +0.000000f, 0.0f}, {+6.110260f, +0.000000f}},
				{{+0.000000f, +0.000000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -1.000000f, +0.000000f, 0.0f}, {+0.000000f, -0.000000f}},
				{{+0.000000f, +0.125000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-1.000000f, +0.000000f, +0.000000f, 0.0f}, {+6.110260f, +4.921260f}},
				{{+0.000000f, +0.125000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-1.000000f, +0.000000f, +0.000000f, 0.0f}, {+0.000000f, +4.921260f}},
				{{+0.335754f, +0.858582f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.993998f, +0.109402f, -0.000001f, 0.0f}, {+6.110260f, +34.551960f}},
				{{+0.336426f, +0.859436f, -0.003906f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.951446f, +0.161842f, -0.261835f, 0.0f}, {-2.795208f, +29.686373f}},
				{{+0.336426f, +0.859436f, +0.003906f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.951446f, +0.161842f, +0.261834f, 0.0f}, {+12.768210f, +31.299715f}},
				{{+0.338318f, +0.861755f, -0.007568f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.871380f, +0.234689f, -0.430834f, 0.0f}, {-6.617428f, +31.925325f}},
				{{+0.338318f, +0.861755f, +0.007568f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.871380f, +0.234689f, +0.430834f, 0.0f}, {+14.365742f, +33.172302f}},
				{{+0.341370f, +0.865540f, -0.010742f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.790891f, +0.316887f, -0.523521f, 0.0f}, {+5.685827f, +34.903572f}},
				{{+0.341370f, +0.865540f, +0.010742f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.790891f, +0.316887f, +0.523521f, 0.0f}, {+6.534693f, +34.903572f}},
				{{+0.345398f, +0.870422f, -0.013184f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.723606f, +0.383953f, -0.573562f, 0.0f}, {-9.172128f, +33.825928f}},
				{{+0.345398f, +0.870422f, +0.013184f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.723606f, +0.383954f, +0.573563f, 0.0f}, {+6.630082f, +35.152203f}},
				{{+0.350037f, +0.876099f, -0.014709f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.667205f, +0.444262f, -0.597887f, 0.0f}, {-10.744116f, +35.001892f}},
				{{+0.350037f, +0.876099f, +0.014709f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.667204f, +0.444262f, +0.597887f, 0.0f}, {+15.280632f, +34.383209f}},
				{{+0.355042f, +0.882263f, -0.015198f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.619342f, +0.502463f, -0.603279f, 0.0f}, {-12.555735f, +35.699535f}},
				{{+0.355042f, +0.882263f, +0.015198f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.619342f, +0.502463f, +0.603279f, 0.0f}, {+15.055371f, +32.798622f}},
				{{+0.359985f, +0.888367f, -0.014709f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.569911f, +0.565347f, -0.596309f, 0.0f}, {-13.285627f, +35.347107f}},
				{{+0.359985f, +0.888367f, +0.014709f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.569911f, +0.565347f, +0.596309f, 0.0f}, {+14.956147f, +31.084229f}},
				{{+0.364685f, +0.894043f, -0.013184f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.517624f, +0.634938f, -0.573515f, 0.0f}, {-13.458706f, +35.586834f}},
				{{+0.364685f, +0.894043f, +0.013184f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.517624f, +0.634938f, +0.573515f, 0.0f}, {+15.129225f, +31.323956f}},
				{{+0.368652f, +0.898926f, -0.010742f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.469049f, +0.710733f, -0.524263f, 0.0f}, {-14.078074f, +34.226604f}},
				{{+0.368652f, +0.898926f, +0.010742f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.469049f, +0.710732f, +0.524263f, 0.0f}, {+14.490156f, +22.898602f}},
				{{+0.371704f, +0.902710f, -0.007568f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.411822f, +0.801784f, -0.433066f, 0.0f}, {+5.810140f, +36.792084f}},
				{{+0.371704f, +0.902710f, +0.007568f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.411822f, +0.801784f, +0.433066f, 0.0f}, {+13.816984f, +13.512725f}},
				{{+0.373657f, +0.905090f, -0.003906f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.345910f, +0.900239f, -0.264415f, 0.0f}, {-15.824052f, +7.410501f}},
				{{+0.373657f, +0.905090f, +0.003906f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.345879f, +0.900256f, +0.264400f, 0.0f}, {+13.908661f, +13.676846f}},
				{{+0.374268f, +0.905884f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.331760f, +0.943364f, +0.000029f, 0.0f}, {-15.916359f, +7.541982f}},
				{{+0.494263f, +0.368103f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.951544f, -0.307511f, +0.000000f, 0.0f}, {+10.356278f, +8.548683f}},
				{{+0.500977f, +0.376343f, -0.040161f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.885540f, -0.273488f, -0.375529f, 0.0f}, {-7.703056f, +10.150335f}},
				{{+0.500977f, +0.376343f, +0.040161f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.885540f, -0.273488f, +0.375529f, 0.0f}, {+11.956258f, +8.886986f}},
				{{+0.520569f, +0.400330f, -0.077576f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.733409f, -0.190659f, -0.652503f, 0.0f}, {-3.055130f, +25.169159f}},
				{{+0.520569f, +0.400330f, +0.077576f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.733409f, -0.190659f, +0.652503f, 0.0f}, {+19.324640f, +12.735453f}},
				{{+0.551758f, +0.438599f, -0.109741f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.572609f, -0.093301f, -0.814502f, 0.0f}, {-18.119471f, +16.812641f}},
				{{+0.551758f, +0.438599f, +0.109741f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.572609f, -0.093301f, +0.814502f, 0.0f}, {+24.054779f, +17.203964f}},
				{{+0.592346f, +0.488403f, -0.134399f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.437404f, +0.002582f, -0.899261f, 0.0f}, {-19.989384f, +18.775307f}},
				{{+0.592346f, +0.488403f, +0.134399f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.437404f, +0.002582f, +0.899261f, 0.0f}, {+25.924690f, +19.166630f}},
				{{+0.621704f, +0.524353f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774728f, -0.632295f, -0.000047f, 0.0f}, {+6.110260f, +3.344501f}},
				{{+0.621704f, +0.524353f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.773917f, -0.633287f, +0.000439f, 0.0f}, {-6.307110f, +31.468533f}},
				{{+0.639648f, +0.546387f, -0.149902f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.328172f, +0.097048f, -0.939619f, 0.0f}, {-0.208202f, +32.589539f}},
				{{+0.639648f, +0.546387f, +0.149902f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.328172f, +0.097048f, +0.939619f, 0.0f}, {-12.012318f, +32.589539f}},
				{{+0.641724f, +0.494812f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.861434f, -0.507869f, +0.000000f, 0.0f}, {+6.110260f, +5.919540f}},
				{{+0.641724f, +0.494812f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.861434f, -0.507869f, +0.000000f, 0.0f}, {+25.265604f, +19.481798f}},
				{{+0.685730f, +0.408142f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {-26.999634f, +16.070108f}},
				{{+0.685730f, +0.408142f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+6.307110f, +6.009396f}},
				{{+0.690430f, +0.608643f, -0.155151f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.238392f, +0.194421f, -0.951509f, 0.0f}, {+0.000000f, +35.752441f}},
				{{+0.690430f, +0.608643f, +0.155151f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.238392f, +0.194421f, +0.951509f, 0.0f}, {-12.220519f, +35.752441f}},
				{{+0.718567f, +0.316650f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {+6.110260f, +6.034519f}},
				{{+0.718567f, +0.316650f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+28.291904f, +12.467815f}},
				{{+0.739685f, +0.221741f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {-29.121994f, +8.731852f}},
				{{+0.739685f, +0.221741f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+29.121994f, +8.731852f}},
				{{+0.741211f, +0.670898f, -0.149902f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.161051f, +0.301869f, -0.939648f, 0.0f}, {-0.208202f, +38.915344f}},
				{{+0.741211f, +0.670898f, +0.149902f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.161051f, +0.301869f, +0.939648f, 0.0f}, {+30.551483f, +21.938150f}},
				{{+0.748657f, +0.125000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+6.110260f, +29.476780f}},
				{{+0.748657f, +0.125000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +1.000000f, -0.000000f, 0.0f}, {+6.307110f, +29.476780f}},
				{{+0.757202f, +0.690552f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774980f, -0.631986f, +0.000031f, 0.0f}, {-29.813053f, +27.187624f}},
				{{+0.757202f, +0.690552f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774980f, -0.631986f, -0.000034f, 0.0f}, {-6.307110f, +1.000593f}},
				{{+0.788513f, +0.728943f, -0.134399f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.090588f, +0.427798f, -0.899323f, 0.0f}, {-0.818620f, +41.862701f}},
				{{+0.788513f, +0.728943f, +0.134399f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.090588f, +0.427798f, +0.899323f, 0.0f}, {+31.772478f, +20.697956f}},
				{{+0.813538f, +0.625610f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.799870f, +0.600173f, +0.000000f, 0.0f}, {-6.110260f, +3.335353f}},
				{{+0.813538f, +0.625610f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.799870f, +0.600173f, +0.000000f, 0.0f}, {+32.030487f, +24.631521f}},
				{{+0.829163f, +0.778748f, -0.109741f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.023743f, +0.579840f, -0.814384f, 0.0f}, {-32.438560f, +28.823168f}},
				{{+0.829163f, +0.778748f, +0.109741f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.023743f, +0.579840f, +0.814384f, 0.0f}, {+32.606384f, +16.725529f}},
				{{+0.860352f, +0.816956f, -0.077576f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.039280f, +0.756636f, -0.652655f, 0.0f}, {-33.884518f, +26.536762f}},
				{{+0.860352f, +0.816956f, +0.077576f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.039280f, +0.756636f, +0.652655f, 0.0f}, {+33.838577f, +18.688883f}},
				{{+0.879944f, +0.841003f, -0.040161f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.089908f, +0.922626f, -0.375071f, 0.0f}, {-34.934753f, +19.231625f}},
				{{+0.879944f, +0.841003f, +0.040161f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.089902f, +0.922629f, +0.375065f, 0.0f}, {+33.553371f, +9.223856f}},
				{{+0.885742f, +0.513672f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.876536f, +0.481337f, +0.000000f, 0.0f}, {-6.110260f, -1.909656f}},
				{{+0.885742f, +0.513672f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.876536f, +0.481337f, +0.000000f, 0.0f}, {-6.307110f, -1.909656f}},
				{{+0.886658f, +0.849182f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.772928f, -0.634493f, +0.000000f, 0.0f}, {-33.978542f, -1.710179f}},
				{{+0.941467f, +0.392639f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.935735f, +0.352704f, +0.000000f, 0.0f}, {-37.066185f, +15.459221f}},
				{{+0.941467f, +0.392639f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.935735f, +0.352704f, +0.000000f, 0.0f}, {+37.066185f, +15.459221f}},
				{{+0.979492f, +0.264954f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.976171f, +0.217005f, +0.000000f, 0.0f}, {-6.110260f, +4.634235f}},
				{{+0.979492f, +0.264954f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.976171f, +0.217005f, +0.000000f, 0.0f}, {+38.563992f, +10.432621f}},
				{{+0.999146f, +0.133179f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.997019f, +0.077157f, +0.000000f, 0.0f}, {-6.110260f, -0.610774f}},
				{{+0.999146f, +0.133179f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.997019f, +0.077157f, +0.000000f, 0.0f}, {-6.307110f, -0.610774f}},
				{{+1.000000f, +0.000000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.999979f, +0.006416f, +0.000000f, 0.0f}, {-6.110260f, +39.370079f}},
				{{+1.000000f, +0.000000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.999979f, +0.006416f, +0.000000f, 0.0f}, {+39.370079f, -0.000000f}},
				{{+0.639648f, +0.546387f, -0.149902f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774938f, -0.632037f, -0.000053f, 0.0f}, {-0.208202f, +32.589539f}},
				{{+0.592346f, +0.488403f, -0.134399f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774949f, -0.632024f, -0.000066f, 0.0f}, {-19.989384f, +18.775307f}},
				{{+0.690430f, +0.608643f, -0.155151f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774907f, -0.632075f, +0.000195f, 0.0f}, {+0.000000f, +35.752441f}},
				{{+0.741211f, +0.670898f, -0.149902f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.775006f, -0.631953f, +0.000178f, 0.0f}, {-0.208202f, +38.915344f}},
				{{+0.788513f, +0.728943f, -0.134399f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774962f, -0.632008f, +0.000064f, 0.0f}, {-0.818620f, +41.862701f}},
				{{+0.788513f, +0.728943f, +0.134399f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774961f, -0.632009f, -0.000065f, 0.0f}, {+31.772478f, +20.697956f}},
				{{+0.829163f, +0.778748f, +0.109741f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774703f, -0.632325f, +0.000000f, 0.0f}, {+32.606384f, +16.725529f}},
				{{+0.829163f, +0.778748f, -0.109741f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774703f, -0.632325f, +0.000000f, 0.0f}, {-32.438560f, +28.823168f}},
				{{+0.860352f, +0.816956f, +0.077576f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774819f, -0.632183f, +0.000000f, 0.0f}, {+33.838577f, +18.688883f}},
				{{+0.860352f, +0.816956f, -0.077576f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774819f, -0.632183f, +0.000000f, 0.0f}, {-33.884518f, +26.536762f}},
				{{+0.879944f, +0.841003f, -0.040161f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.775048f, -0.631902f, +0.000000f, 0.0f}, {-34.934753f, +19.231625f}},
				{{+0.879944f, +0.841003f, +0.040161f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.775048f, -0.631902f, +0.000000f, 0.0f}, {+33.553371f, +9.223856f}},
				{{+0.500977f, +0.376343f, -0.040161f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774556f, -0.632506f, +0.000000f, 0.0f}, {-7.703056f, +10.150335f}},
				{{+0.500977f, +0.376343f, +0.040161f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774556f, -0.632506f, +0.000000f, 0.0f}, {+11.956258f, +8.886986f}},
				{{+0.494263f, +0.368103f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.775235f, -0.631673f, +0.000000f, 0.0f}, {+10.356278f, +8.548683f}},
				{{+0.520569f, +0.400330f, -0.077576f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.775001f, -0.631960f, +0.000000f, 0.0f}, {-3.055130f, +25.169159f}},
				{{+0.520569f, +0.400330f, +0.077576f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.775001f, -0.631960f, +0.000000f, 0.0f}, {+19.324640f, +12.735453f}},
				{{+0.551758f, +0.438599f, +0.109741f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.775178f, -0.631743f, +0.000000f, 0.0f}, {+24.054779f, +17.203964f}},
				{{+0.551758f, +0.438599f, -0.109741f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.775178f, -0.631743f, +0.000000f, 0.0f}, {-18.119471f, +16.812641f}},
				{{+0.592346f, +0.488403f, +0.134399f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774994f, -0.631969f, +0.000000f, 0.0f}, {+25.924690f, +19.166630f}},
				{{+0.639648f, +0.546387f, +0.149902f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774915f, -0.632065f, +0.000004f, 0.0f}, {-12.012318f, +32.589539f}},
				{{+0.690430f, +0.608643f, +0.155151f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.774907f, -0.632075f, -0.000202f, 0.0f}, {-12.220519f, +35.752441f}},
				{{+0.741211f, +0.670898f, +0.149902f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.775006f, -0.631954f, -0.000184f, 0.0f}, {+30.551483f, +21.938150f}},
				{{+0.886658f, +0.849182f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.109996f, +0.993932f, +0.000005f, 0.0f}, {-33.978542f, -1.710179f}},
				{{+1.000000f, +0.000000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -1.000000f, +0.000000f, 0.0f}, {+39.370079f, -0.000000f}},
				{{+1.000000f, +0.000000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -1.000000f, -0.000000f, 0.0f}, {-6.110260f, +39.370079f}},
				{{+0.000000f, +0.000000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-1.000000f, +0.000000f, +0.000000f, 0.0f}, {+6.110260f, +0.000000f}},
				{{+0.000000f, +0.000000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-1.000000f, -0.000000f, +0.000000f, 0.0f}, {+0.000000f, -0.000000f}},
				{{+0.621704f, +0.524353f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.827816f, -0.560999f, +0.000000f, 0.0f}, {-6.307110f, +31.468533f}},
				{{+0.621704f, +0.524353f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.827816f, -0.560999f, -0.000000f, 0.0f}, {+6.110260f, +3.344501f}},
				{{+0.757202f, +0.690552f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-29.813053f, +27.187624f}},
				{{+0.641724f, +0.494812f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+6.110260f, +5.919540f}},
				{{+0.621704f, +0.524353f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, -1.000000f, 0.0f}, {+6.110260f, +3.344501f}},
				{{+0.000000f, +0.000000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+6.110260f, +0.000000f}},
				{{+0.000000f, +0.125000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, -1.000000f, 0.0f}, {+6.110260f, +4.921260f}},
				{{+1.000000f, +0.000000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.110260f, +39.370079f}},
				{{+0.813538f, +0.625610f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.110260f, +3.335353f}},
				{{+0.885742f, +0.513672f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.110260f, -1.909656f}},
				{{+0.941467f, +0.392639f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-37.066185f, +15.459221f}},
				{{+0.979492f, +0.264954f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.110260f, +4.634235f}},
				{{+0.999146f, +0.133179f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.110260f, -0.610774f}},
				{{+0.757202f, +0.690552f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.755384f, +0.655282f, +0.000000f, 0.0f}, {-29.813053f, +27.187624f}},
				{{+0.757202f, +0.690552f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.755385f, +0.655282f, -0.000000f, 0.0f}, {-6.307110f, +1.000593f}},
				{{+0.000000f, +0.125000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +1.000000f, +0.000000f, 0.0f}, {+0.000000f, +4.921260f}},
				{{+0.748657f, +0.125000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +1.000000f, +0.000000f, 0.0f}, {+6.110260f, +29.476780f}},
				{{+0.000000f, +0.125000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +1.000000f, +0.000000f, 0.0f}, {+6.110260f, +4.921260f}},
				{{+1.000000f, +0.000000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+39.370079f, -0.000000f}},
				{{+0.000000f, +0.125000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+0.000000f, +4.921260f}},
				{{+0.000000f, +0.000000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+0.000000f, -0.000000f}},
				{{+0.748657f, +0.125000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+6.307110f, +29.476780f}},
				{{+0.757202f, +0.690552f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {-6.307110f, +1.000593f}},
				{{+0.813538f, +0.625610f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, -0.000000f, +1.000000f, 0.0f}, {+32.030487f, +24.631521f}},
				{{+0.885742f, +0.513672f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, -0.000000f, +1.000000f, 0.0f}, {-6.307110f, -1.909656f}},
				{{+0.941467f, +0.392639f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, -0.000000f, +1.000000f, 0.0f}, {+37.066185f, +15.459221f}},
				{{+0.979492f, +0.264954f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, -0.000000f, +1.000000f, 0.0f}, {+38.563992f, +10.432621f}},
				{{+0.999146f, +0.133179f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, -0.000000f, +1.000000f, 0.0f}, {-6.307110f, -0.610774f}},
				{{+0.641724f, +0.494812f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+25.265604f, +19.481798f}},
				{{+0.621704f, +0.524353f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, +1.000000f, 0.0f}, {-6.307110f, +31.468533f}},
				{{+0.739685f, +0.221741f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.987902f, -0.155082f, +0.000000f, 0.0f}, {+29.121994f, +8.731852f}},
				{{+0.748657f, +0.125000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.995727f, -0.092348f, +0.000000f, 0.0f}, {+6.110260f, +29.476780f}},
				{{+0.748657f, +0.125000f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.995727f, -0.092348f, +0.000000f, 0.0f}, {+6.307110f, +29.476780f}},
				{{+0.739685f, +0.221741f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.987902f, -0.155082f, +0.000000f, 0.0f}, {-29.121994f, +8.731852f}},
				{{+0.718567f, +0.316650f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.960566f, -0.278051f, +0.000000f, 0.0f}, {+28.291904f, +12.467815f}},
				{{+0.718567f, +0.316650f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.960566f, -0.278051f, +0.000000f, 0.0f}, {+6.110260f, +6.034519f}},
				{{+0.685730f, +0.408142f, +0.004944f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.918231f, -0.396046f, +0.000000f, 0.0f}, {+6.307110f, +6.009396f}},
				{{+0.685730f, +0.408142f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.918231f, -0.396045f, +0.000000f, 0.0f}, {-26.999634f, +16.070108f}},
			};
			#pragma endregion
			#pragma region Indices
			static uint16 const idxs[] =
			{
				19,  51,  17,  51,  19,  57,  11,  33,  9,  33,  11,  35,  5,  31,  29,  31,  5,  7,  4,  29,  28,  29,  4,  5,  15,  39,  13,  39,  15,  45,  17,  45,
				15,  45,  17,  51,  9,  31,  7,  31,  9,  33,  13,  35,  11,  35,  13,  39,  52,  20,  18,  20,  52,  58,  24,  66,  26,  66,  24,  64,  62,  24,  22,  24,
				62,  64,  30,  4,  28,  4,  30,  6,  46,  18,  16,  18,  46,  52,  6,  5,  4,  5,  6,  8,  5,  8,  7,  7,  8,  10,  7,  10,  9,  9,  10,  12,
				9,  12,  11,  11,  12,  14,  11,  14,  13,  13,  14,  16,  13,  16,  15,  15,  16,  18,  15,  18,  17,  17,  18,  20,  17,  20,  19,  19,  20,  22,  19,  22,
				21,  21,  22,  24,  21,  24,  23,  23,  24,  26,  23,  26,  25,  25,  26,  27,  32,  10,  8,  10,  32,  34,  23,  61,  21,  61,  23,  63,  23,  65,  63,  65,
				23,  25,  36,  14,  12,  14,  36,  40,  58,  22,  20,  22,  58,  62,  78,  37,  79,  37,  78,  55,  55,  78,  80,  55,  80,  81,  55,  81,  82,  55,  82,  56,
				56,  82,  83,  83,  82,  84,  84,  82,  85,  84,  85,  86,  86,  85,  87,  86,  87,  88,  86,  88,  89,  89,  88,  69,  90,  91,  92,  91,  90,  93,  91,  93,
				94,  94,  93,  95,  95,  93,  96,  95,  96,  79,  95,  79,  97,  97,  79,  98,  98,  79,  38,  38,  79,  37,  98,  38,  56,  98,  56,  99,  99,  56,  100,  100,
				56,  83,  25,  101,  65,  101,  25,  27,  34,  12,  10,  12,  34,  36,  40,  16,  14,  16,  40,  46,  27,  66,  101,  66,  27,  26,  32,  6,  30,  6,  32,  8,
				21,  57,  19,  57,  21,  61,  70,  73,  72,  73,  70,  71,  74,  77,  76,  77,  74,  75,  72,  75,  74,  75,  72,  73,  102,  0,  103,  0,  102,  1,  67,  71,
				70,  71,  67,  68,  59,  68,  67,  68,  59,  60,  3,  104,  105,  104,  3,  2,  106,  41,  42,  41,  106,  107,  108,  109,  110,  109,  108,  43,  43,  108,  47,  47,
				108,  49,  49,  108,  53,  53,  111,  112,  111,  53,  113,  113,  53,  108,  113,  108,  114,  113,  114,  115,  113,  115,  116,  113,  116,  117,  113,  117,  118,  119,  60,  59,
				60,  119,  120,  121,  122,  123,  122,  121,  54,  124,  125,  126,  125,  124,  127,  127,  124,  128,  128,  124,  129,  129,  124,  130,  130,  124,  131,  131,  124,  132,  132,  124,
				133,  134,  128,  135,  128,  134,  44,  128,  44,  48,  128,  48,  50,  128,  50,  127,  136,  137,  138,  137,  136,  139,  140,  139,  136,  139,  140,  141,  142,  141,  140,  141,
				142,  143,  42,  143,  142,  143,  42,  41, 
			};
			#pragma endregion
			#pragma region BoundingBox
			static BBox const bbox = {{+0.500000f, +0.452950f, +0.000000f, 1.0f}, {+0.500000f, +0.452950f, +0.155201f, 0.0f}};
			#pragma endregion
		}
		namespace ScaleGizmo
		{
			#pragma region Verts
			static pr::rdr::Vert const verts[] =
			{
				{{-0.174072f, +0.000000f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.983270f, -0.000132f, -0.182156f, 0.0f}, {-6.796443f, +27.434067f}},
				{{-0.168152f, -0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.949585f, -0.254463f, -0.183132f, 0.0f}, {-4.604716f, +30.904716f}},
				{{-0.168152f, +0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.949569f, +0.254595f, -0.183031f, 0.0f}, {-8.061837f, +29.149759f}},
				{{-0.167786f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.901760f, -0.000288f, -0.432237f, 0.0f}, {-0.249304f, +6.855089f}},
				{{-0.162048f, -0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.870256f, -0.233317f, -0.433840f, 0.0f}, {-0.474391f, +5.145386f}},
				{{-0.162048f, +0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.870094f, +0.233572f, -0.434027f, 0.0f}, {-8.094378f, +28.576199f}},
				{{-0.158264f, +0.000000f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.997357f, +0.000000f, +0.072663f, 0.0f}, {-6.714973f, +39.376526f}},
				{{-0.152832f, -0.040955f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {-4.523247f, +39.467968f}},
				{{-0.152832f, +0.040955f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.963237f, +0.258610f, +0.072775f, 0.0f}, {-8.143307f, +39.088818f}},
				{{-0.150757f, -0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.851292f, -0.491433f, -0.183833f, 0.0f}, {-2.815179f, +30.904716f}},
				{{-0.150757f, +0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.851293f, +0.491433f, -0.183833f, 0.0f}, {-8.716853f, +30.348911f}},
				{{-0.145264f, -0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.779614f, -0.450392f, -0.435143f, 0.0f}, {-1.134312f, +3.552197f}},
				{{-0.145264f, +0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.779614f, +0.450392f, -0.435142f, 0.0f}, {-9.818833f, +28.576199f}},
				{{-0.137024f, -0.079102f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+1.458949f, +3.739626f}},
				{{-0.137024f, +0.079102f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.863703f, +0.498702f, +0.072889f, 0.0f}, {-9.769905f, +39.088818f}},
				{{-0.123108f, -0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.694919f, -0.694899f, -0.184940f, 0.0f}, {-0.370625f, +26.606482f}},
				{{-0.123108f, +0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.695046f, +0.694811f, -0.184795f, 0.0f}, {-8.716853f, +31.293842f}},
				{{-0.118591f, -0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.635950f, -0.635950f, -0.437189f, 0.0f}, {-0.403166f, +26.032921f}},
				{{-0.118591f, +0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.636126f, +0.635614f, -0.437424f, 0.0f}, {-8.749394f, +30.720282f}},
				{{-0.111877f, -0.111877f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {-0.452095f, +39.515301f}},
				{{-0.111877f, +0.111877f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.705224f, +0.705224f, +0.072918f, 0.0f}, {-8.798323f, +38.729275f}},
				{{-0.087036f, -0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.491422f, -0.851294f, -0.183857f, 0.0f}, {+2.815179f, +30.904716f}},
				{{-0.087036f, +0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.491376f, +0.851366f, -0.183646f, 0.0f}, {-8.061837f, +32.347301f}},
				{{-0.083862f, -0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.450392f, -0.779614f, -0.435142f, 0.0f}, {-3.552197f, +1.134312f}},
				{{-0.083862f, +0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.450144f, +0.779562f, -0.435491f, 0.0f}, {-10.473850f, +30.720282f}},
				{{-0.079102f, -0.137024f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+2.078693f, +39.515301f}},
				{{-0.079102f, +0.137024f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {-8.143307f, +38.552620f}},
				{{-0.059998f, +0.000000f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.997793f, -0.066404f, +0.000000f, 0.0f}, {-7.382882f, -0.000000f}},
				{{-0.059998f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.210004f, +30.311646f}},
				{{-0.057922f, -0.015503f, -0.015503f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.947168f, -0.320737f, +0.000000f, 0.0f}, {-5.593345f, -0.611384f}},
				{{-0.057922f, -0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-4.573375f, +6.243706f}},
				{{-0.057922f, +0.015503f, +0.015503f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.980055f, +0.198724f, +0.000000f, 0.0f}, {-7.999541f, +0.611384f}},
				{{-0.057922f, +0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {-4.573375f, +7.466473f}},
				{{-0.051941f, -0.029968f, -0.029968f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.834821f, -0.550521f, +0.000000f, 0.0f}, {-1.573724f, -1.181102f}},
				{{-0.051941f, -0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-1.573724f, +30.311646f}},
				{{-0.051941f, +0.029968f, +0.029968f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.893932f, +0.448203f, +0.000000f, 0.0f}, {-9.264935f, +1.181102f}},
				{{-0.051941f, +0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-4.809360f, +8.036192f}},
				{{-0.045044f, -0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.254491f, -0.949567f, -0.183185f, 0.0f}, {+4.604716f, +30.904716f}},
				{{-0.045044f, +0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.254521f, +0.949600f, -0.182971f, 0.0f}, {-6.796443f, +33.291809f}},
				{{-0.043396f, -0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.233317f, -0.870256f, -0.433840f, 0.0f}, {+5.039446f, +26.860504f}},
				{{-0.043396f, +0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.233390f, +0.870087f, -0.434141f, 0.0f}, {-5.145386f, +13.235787f}},
				{{-0.042419f, -0.042419f, -0.042419f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.707107f, -0.707107f, +0.000000f, 0.0f}, {+0.957064f, -1.670331f}},
				{{-0.042419f, -0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-0.957064f, +30.311646f}},
				{{-0.042419f, +0.042419f, +0.042419f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.741318f, +0.671153f, +0.000000f, 0.0f}, {-9.303292f, +1.670331f}},
				{{-0.042419f, +0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-5.184758f, +8.525420f}},
				{{-0.040955f, -0.152832f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+4.523247f, +39.467968f}},
				{{-0.040955f, +0.152832f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {-6.877913f, +38.394234f}},
				{{-0.029968f, -0.051941f, -0.029968f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.550521f, -0.834821f, +0.000000f, 0.0f}, {+1.573724f, -1.181102f}},
				{{-0.029968f, -0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.499021f, -0.866590f, +0.000000f, 0.0f}, {-5.673987f, +4.809360f}},
				{{-0.029968f, +0.051941f, +0.051941f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.529831f, +0.848103f, +0.000000f, 0.0f}, {-8.648276f, +2.045729f}},
				{{-0.029968f, +0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {-5.673987f, +8.900819f}},
				{{-0.015503f, -0.057922f, -0.015503f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.320737f, -0.947168f, +0.000000f, 0.0f}, {+5.593345f, -0.611384f}},
				{{-0.015503f, -0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.259573f, -0.965724f, +0.000000f, 0.0f}, {-6.243706f, +4.573375f}},
				{{-0.015503f, +0.057922f, +0.057922f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.278041f, +0.960569f, +0.000000f, 0.0f}, {-7.382882f, +2.281714f}},
				{{-0.015503f, +0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-7.382882f, +30.311646f}},
				{{+0.000000f, -0.174072f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000096f, -0.983261f, -0.182204f, 0.0f}, {+6.796443f, +28.205254f}},
				{{+0.000000f, -0.167786f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000288f, -0.901760f, -0.432237f, 0.0f}, {-6.855089f, +0.249304f}},
				{{+0.000000f, -0.158264f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+6.714973f, +39.376526f}},
				{{+0.000000f, -0.059998f, +0.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.066404f, -0.997793f, +0.000000f, 0.0f}, {+7.382882f, -0.000000f}},
				{{+0.000000f, -0.059998f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, -1.000000f, +0.000000f, 0.0f}, {-6.855089f, +4.492885f}},
				{{+0.000000f, +0.059998f, +0.059998f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +1.000000f, +0.000000f, 0.0f}, {-7.999541f, +2.362205f}},
				{{+0.000000f, +0.059998f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.855089f, +9.217294f}},
				{{+0.000000f, +0.158264f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {+6.855089f, +13.086015f}},
				{{+0.000000f, +0.167786f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000288f, +0.901760f, -0.432237f, 0.0f}, {-8.553440f, +32.718246f}},
				{{+0.000000f, +0.174072f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000096f, +0.983261f, -0.182204f, 0.0f}, {-5.006906f, +34.062996f}},
				{{+0.015503f, -0.057922f, +0.015503f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.198724f, -0.980055f, +0.000000f, 0.0f}, {+7.999541f, +0.611384f}},
				{{+0.015503f, -0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.259572f, -0.965724f, +0.000000f, 0.0f}, {+7.999541f, +30.311646f}},
				{{+0.015503f, +0.057922f, +0.057922f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.278041f, +0.960569f, +0.000000f, 0.0f}, {-6.210004f, +2.281714f}},
				{{+0.015503f, +0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-7.466473f, +9.136804f}},
				{{+0.029968f, -0.051941f, +0.029968f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.448203f, -0.893932f, +0.000000f, 0.0f}, {+9.303292f, +1.181102f}},
				{{+0.029968f, -0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.499022f, -0.866590f, +0.000000f, 0.0f}, {+9.303292f, +30.311646f}},
				{{+0.029968f, +0.051941f, +0.051941f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.529831f, +0.848103f, +0.000000f, 0.0f}, {-0.957064f, +2.045729f}},
				{{+0.029968f, +0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {-8.036192f, +8.900819f}},
				{{+0.040955f, -0.152832f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {+8.504511f, +39.247204f}},
				{{+0.040955f, +0.152832f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {-2.896649f, +38.173470f}},
				{{+0.042419f, -0.042419f, +0.042419f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.671154f, -0.741318f, +0.000000f, 0.0f}, {+9.919951f, +1.670331f}},
				{{+0.042419f, -0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.707107f, -0.707107f, +0.000000f, 0.0f}, {-8.525420f, +5.184758f}},
				{{+0.042419f, +0.042419f, +0.042419f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.707107f, +0.707107f, +0.000000f, 0.0f}, {-1.573724f, +1.670331f}},
				{{+0.042419f, +0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.707107f, +0.707107f, +0.000000f, 0.0f}, {-8.525420f, +8.525420f}},
				{{+0.043396f, -0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.233390f, -0.870087f, -0.434141f, 0.0f}, {+8.553440f, +27.631691f}},
				{{+0.043396f, +0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.233317f, +0.870256f, -0.433840f, 0.0f}, {-8.564793f, +13.235787f}},
				{{+0.045044f, -0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.254521f, -0.949600f, -0.182971f, 0.0f}, {+8.585980f, +28.205254f}},
				{{+0.045044f, +0.168152f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.254491f, +0.949567f, -0.183185f, 0.0f}, {-2.815179f, +34.608307f}},
				{{+0.051941f, -0.029968f, +0.051941f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.848103f, -0.529831f, +0.000000f, 0.0f}, {+8.648276f, +2.045729f}},
				{{+0.051941f, -0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.866590f, -0.499021f, +0.000000f, 0.0f}, {+9.919951f, +30.311646f}},
				{{+0.051941f, +0.029968f, +0.051941f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.848103f, +0.529831f, +0.000000f, 0.0f}, {+4.018277f, +2.045729f}},
				{{+0.051941f, +0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.866590f, +0.499021f, +0.000000f, 0.0f}, {-8.900819f, +8.036192f}},
				{{+0.057922f, -0.015503f, +0.057922f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.960569f, -0.278041f, +0.000000f, 0.0f}, {+7.382882f, +2.281714f}},
				{{+0.057922f, -0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.965724f, -0.259573f, +0.000000f, 0.0f}, {-9.136804f, +6.243706f}},
				{{+0.057922f, +0.015503f, +0.057922f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.960569f, +0.278041f, +0.000000f, 0.0f}, {+3.401618f, +2.281714f}},
				{{+0.057922f, +0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.965724f, +0.259572f, +0.000000f, 0.0f}, {+6.210004f, +30.311646f}},
				{{+0.059998f, +0.000000f, +0.059998f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+1.000000f, +0.000000f, +0.000000f, 0.0f}, {+7.999541f, +2.362205f}},
				{{+0.059998f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+1.000000f, -0.000000f, +0.000000f, 0.0f}, {+7.999541f, +30.311646f}},
				{{+0.079102f, -0.137024f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {+9.970552f, +1.458949f}},
				{{+0.079102f, +0.137024f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {-4.523247f, +38.173470f}},
				{{+0.083862f, -0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.450144f, -0.779562f, -0.435491f, 0.0f}, {-10.157982f, +1.134312f}},
				{{+0.083862f, +0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.450392f, +0.779614f, -0.435142f, 0.0f}, {-10.157982f, +12.575867f}},
				{{+0.087036f, -0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.491376f, -0.851366f, -0.183646f, 0.0f}, {+8.716853f, +30.348911f}},
				{{+0.087036f, +0.150757f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.491422f, +0.851294f, -0.183857f, 0.0f}, {-4.604716f, +34.608307f}},
				{{+0.111877f, -0.111877f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {+11.261019f, +2.449159f}},
				{{+0.111877f, +0.111877f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {+11.261019f, +11.261019f}},
				{{+0.118591f, -0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.636126f, -0.635614f, -0.437424f, 0.0f}, {-11.526085f, +2.184094f}},
				{{+0.118591f, +0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.635950f, +0.635950f, -0.437189f, 0.0f}, {+2.127622f, +34.317020f}},
				{{+0.123108f, -0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.695046f, -0.694811f, -0.184795f, 0.0f}, {+8.716853f, +30.166023f}},
				{{+0.123108f, +0.123108f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.694919f, +0.694899f, -0.184940f, 0.0f}, {-2.160163f, +34.890579f}},
				{{+0.137024f, -0.079102f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {+12.251229f, +3.739626f}},
				{{+0.137024f, +0.079102f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {+0.452095f, +38.126133f}},
				{{+0.145264f, -0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.779614f, -0.450392f, -0.435143f, 0.0f}, {+10.473850f, +30.720282f}},
				{{+0.145264f, +0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.779614f, +0.450392f, -0.435142f, 0.0f}, {-12.575867f, +10.157982f}},
				{{+0.150757f, -0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.851292f, -0.491433f, -0.183833f, 0.0f}, {+8.061837f, +32.347301f}},
				{{+0.150757f, +0.087036f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.851292f, +0.491433f, -0.183833f, 0.0f}, {+0.370625f, +29.562883f}},
				{{+0.152832f, -0.040955f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {+12.873701f, +5.242407f}},
				{{+0.152832f, +0.040955f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {+12.873701f, +8.467772f}},
				{{+0.158264f, +0.000000f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, +0.000000f, +1.000000f, 0.0f}, {+5.088375f, +38.264912f}},
				{{+0.162048f, -0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.870256f, -0.233317f, -0.433840f, 0.0f}, {+9.818833f, +31.773741f}},
				{{+0.162048f, +0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.870094f, +0.233572f, -0.434027f, 0.0f}, {+6.763902f, +33.489433f}},
				{{+0.167786f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.901760f, -0.000288f, -0.432237f, 0.0f}, {+8.553440f, +32.718246f}},
				{{+0.168152f, -0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.949585f, -0.254463f, -0.183132f, 0.0f}, {+6.796443f, +29.830982f}},
				{{+0.168152f, +0.045044f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.949551f, +0.254628f, -0.183080f, 0.0f}, {+6.796443f, +29.701662f}},
				{{+0.174072f, +0.000000f, +0.783020f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.983261f, -0.000169f, -0.182204f, 0.0f}, {+8.585980f, +33.291809f}},
				{{-0.043396f, +0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-5.145386f, +13.235787f}},
				{{-0.083862f, +0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-10.473850f, +30.720282f}},
				{{+0.000000f, +0.167786f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.553440f, +32.718246f}},
				{{+0.043396f, +0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.564793f, +13.235787f}},
				{{+0.042419f, +0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.525420f, +8.525420f}},
				{{+0.051941f, +0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.900819f, +8.036192f}},
				{{+0.083862f, +0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-10.157982f, +12.575867f}},
				{{+0.057922f, +0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, -1.000000f, 0.0f}, {+6.210004f, +30.311646f}},
				{{+0.059998f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+7.999541f, +30.311646f}},
				{{+0.083862f, -0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-10.157982f, +1.134312f}},
				{{+0.118591f, -0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-11.526085f, +2.184094f}},
				{{+0.118591f, +0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+2.127622f, +34.317020f}},
				{{+0.145264f, -0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+10.473850f, +30.720282f}},
				{{+0.145264f, +0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-12.575867f, +10.157982f}},
				{{+0.162048f, -0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+9.818833f, +31.773741f}},
				{{+0.162048f, +0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+6.763902f, +33.489433f}},
				{{+0.167786f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+8.553440f, +32.718246f}},
				{{-0.162048f, +0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.094378f, +28.576199f}},
				{{-0.162048f, -0.043396f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-0.474391f, +5.145386f}},
				{{-0.167786f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000000f, -0.000000f, -1.000000f, 0.0f}, {-0.249304f, +6.855089f}},
				{{-0.145264f, -0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-1.134312f, +3.552197f}},
				{{-0.145264f, +0.083862f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-9.818833f, +28.576199f}},
				{{-0.118591f, -0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-0.403166f, +26.032921f}},
				{{-0.118591f, +0.118591f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.749394f, +30.720282f}},
				{{-0.083862f, -0.145264f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-3.552197f, +1.134312f}},
				{{-0.043396f, -0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+5.039446f, +26.860504f}},
				{{+0.000000f, -0.167786f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.855089f, +0.249304f}},
				{{-0.029968f, -0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-5.673987f, +4.809360f}},
				{{-0.015503f, -0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.243706f, +4.573375f}},
				{{+0.000000f, -0.059998f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-6.855089f, +4.492885f}},
				{{+0.015503f, -0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+7.999541f, +30.311646f}},
				{{+0.043396f, -0.162048f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+8.553440f, +27.631691f}},
				{{+0.029968f, -0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+9.303292f, +30.311646f}},
				{{+0.042419f, -0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-8.525420f, +5.184758f}},
				{{+0.051941f, -0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {+9.919951f, +30.311646f}},
				{{+0.057922f, -0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, -1.000000f, 0.0f}, {-9.136804f, +6.243706f}},
				{{-0.059998f, +0.000000f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-1.000000f, +0.000000f, +0.000000f, 0.0f}, {-6.210004f, +30.311646f}},
				{{-0.057922f, -0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.965724f, -0.259573f, +0.000000f, 0.0f}, {-4.573375f, +6.243706f}},
				{{-0.152832f, +0.040955f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {-8.143307f, +39.088818f}},
				{{-0.158264f, +0.000000f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, -0.000000f, +1.000000f, 0.0f}, {-6.714973f, +39.376526f}},
				{{-0.137024f, +0.079102f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {-9.769905f, +39.088818f}},
				{{-0.111877f, +0.111877f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +0.000000f, +1.000000f, 0.0f}, {-8.798323f, +38.729275f}},
				{{-0.040955f, +0.152832f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.258610f, +0.963237f, +0.072775f, 0.0f}, {-6.877913f, +38.394234f}},
				{{+0.000000f, +0.158264f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.000078f, +0.997349f, +0.072770f, 0.0f}, {+6.855089f, +13.086015f}},
				{{+0.040955f, +0.152832f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.258674f, +0.963210f, +0.072895f, 0.0f}, {-2.896649f, +38.173470f}},
				{{-0.079102f, -0.137024f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.498682f, -0.863711f, +0.072943f, 0.0f}, {+2.078693f, +39.515301f}},
				{{-0.111877f, -0.111877f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.705244f, -0.705201f, +0.072960f, 0.0f}, {-0.452095f, +39.515301f}},
				{{-0.137024f, -0.079102f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.863703f, -0.498702f, +0.072889f, 0.0f}, {+1.458949f, +3.739626f}},
				{{-0.152832f, -0.040955f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.963237f, -0.258610f, +0.072775f, 0.0f}, {-4.523247f, +39.467968f}},
				{{-0.079102f, +0.137024f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.498702f, +0.863703f, +0.072889f, 0.0f}, {-8.143307f, +38.552620f}},
				{{+0.079102f, +0.137024f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.498682f, +0.863711f, +0.072943f, 0.0f}, {-4.523247f, +38.173470f}},
				{{+0.137024f, -0.079102f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.863703f, -0.498702f, +0.072889f, 0.0f}, {+12.251229f, +3.739626f}},
				{{+0.152832f, -0.040955f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.963237f, -0.258610f, +0.072775f, 0.0f}, {+12.873701f, +5.242407f}},
				{{-0.040955f, -0.152832f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.258674f, -0.963210f, +0.072895f, 0.0f}, {+4.523247f, +39.467968f}},
				{{+0.079102f, -0.137024f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.498702f, -0.863703f, +0.072889f, 0.0f}, {+9.970552f, +1.458949f}},
				{{+0.040955f, -0.152832f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.258610f, -0.963237f, +0.072775f, 0.0f}, {+8.504511f, +39.247204f}},
				{{+0.158264f, +0.000000f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.997349f, -0.000078f, +0.072770f, 0.0f}, {+5.088375f, +38.264912f}},
				{{+0.152832f, +0.040955f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.963209f, +0.258683f, +0.072882f, 0.0f}, {+12.873701f, +8.467772f}},
				{{+0.111877f, -0.111877f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.705224f, -0.705224f, +0.072918f, 0.0f}, {+11.261019f, +2.449159f}},
				{{+0.000000f, -0.158264f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000078f, -0.997349f, +0.072770f, 0.0f}, {+6.714973f, +39.376526f}},
				{{+0.111877f, +0.111877f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.705244f, +0.705201f, +0.072960f, 0.0f}, {+11.261019f, +11.261019f}},
				{{+0.137024f, +0.079102f, +1.000000f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.863703f, +0.498702f, +0.072889f, 0.0f}, {+0.452095f, +38.126133f}},
				{{-0.051941f, -0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.866590f, -0.499021f, +0.000000f, 0.0f}, {-1.573724f, +30.311646f}},
				{{-0.057922f, +0.015503f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.965724f, +0.259572f, +0.000000f, 0.0f}, {-4.573375f, +7.466473f}},
				{{-0.051941f, +0.029968f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.866590f, +0.499021f, +0.000000f, 0.0f}, {-4.809360f, +8.036192f}},
				{{-0.042419f, +0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.707107f, +0.707107f, +0.000000f, 0.0f}, {-5.184758f, +8.525420f}},
				{{-0.029968f, +0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.499021f, +0.866590f, +0.000000f, 0.0f}, {-5.673987f, +8.900819f}},
				{{-0.015503f, +0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.259573f, +0.965724f, +0.000000f, 0.0f}, {-7.382882f, +30.311646f}},
				{{+0.000000f, +0.059998f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.000000f, +1.000000f, +0.000000f, 0.0f}, {-6.855089f, +9.217294f}},
				{{+0.015503f, +0.057922f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.259573f, +0.965724f, +0.000000f, 0.0f}, {-7.466473f, +9.136804f}},
				{{+0.029968f, +0.051941f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {+0.499021f, +0.866590f, +0.000000f, 0.0f}, {-8.036192f, +8.900819f}},
				{{-0.042419f, -0.042419f, +0.769897f, 1.0f}, {+1.000000f, +1.000000f, +1.000000f, +1.000000f}, {-0.707107f, -0.707107f, +0.000000f, 0.0f}, {-0.957064f, +30.311646f}},
			};
			#pragma endregion
			#pragma region Indices
			static uint16 const idxs[] =
			{
				38,  63,  40,  63,  38,  64,  22,  40,  24,  40,  22,  38,  21,  17,  23,  17,  21,  15,  1,  11,  9,  11,  1,  4,  0,  4,  1,  4,  0,  3,  9,  17,
				15,  17,  9,  11,  51,  48,  47,  48,  51,  52,  103,  95,  101,  95,  103,  97,  83,  88,  84,  88,  83,  87,  89,  92,  91,  92,  89,  90,  89,  86,  90,  86,
				89,  85,  98,  102,  96,  102,  98,  104,  114,  119,  117,  119,  114,  116,  81,  56,  79,  56,  81,  55,  55,  39,  56,  39,  55,  37,  69,  66,  65,  66,  69,  70,
				75,  70,  69,  70,  75,  76,  75,  84,  76,  84,  75,  83,  97,  79,  95,  79,  97,  81,  87,  92,  88,  92,  87,  91,  107,  117,  109,  117,  107,  114,  116,  118,
				119,  118,  116,  115,  102,  110,  108,  110,  102,  104,  65,  59,  58,  59,  65,  66,  108,  118,  115,  118,  108,  110,  85,  78,  86,  78,  85,  77,  101,  109,  103,  109,
				101,  107,  37,  23,  39,  23,  37,  21,  82,  96,  80,  96,  82,  98,  64,  80,  63,  80,  64,  82,  2,  3,  0,  3,  2,  5,  10,  18,  12,  18,  10,  16,
				2,  12,  5,  12,  2,  10,  16,  24,  18,  24,  16,  22,  120,  28,  121,  28,  120,  32,  32,  120,  36,  36,  120,  44,  44,  120,  122,  44,  122,  50,  50,  122,
				54,  54,  122,  61,  61,  122,  68,  68,  122,  123,  68,  123,  72,  72,  123,  124,  124,  123,  125,  125,  123,  126,  125,  126,  127,  127,  126,  128,  128,  126,  129,  129,
				126,  130,  130,  126,  131,  130,  131,  132,  132,  131,  133,  132,  133,  134,  134,  133,  135,  134,  135,  136,  137,  138,  139,  138,  137,  140,  140,  137,  141,  140,  141,  142,
				142,  141,  143,  142,  143,  144,  144,  143,  121,  144,  121,  145,  145,  121,  28,  145,  28,  30,  145,  30,  34,  145,  34,  42,  145,  42,  146,  146,  42,  147,  146,  147,
				148,  146,  148,  149,  146,  149,  150,  146,  150,  151,  151,  150,  152,  151,  152,  153,  151,  153,  154,  151,  154,  129,  129,  154,  155,  129,  155,  128,  156,  29,  157,  29,
				156,  27,  20,  10,  14,  10,  20,  16,  8,  0,  6,  0,  8,  2,  7,  158,  159,  158,  7,  160,  160,  7,  13,  160,  13,  161,  161,  13,  19,  161,  19,  26,
				26,  19,  25,  26,  25,  45,  26,  45,  46,  46,  45,  62,  62,  45,  57,  62,  57,  74,  74,  57,  73,  74,  73,  93,  74,  93,  94,  94,  93,  99,  94,  99,
				100,  100,  99,  106,  106,  99,  105,  106,  105,  111,  106,  111,  112,  112,  111,  113,  14,  2,  8,  2,  14,  10,  162,  64,  38,  64,  162,  163,  163,  82,  64,  82,
				163,  164,  165,  15,  21,  15,  165,  166,  167,  1,  9,  1,  167,  168,  20,  22,  16,  22,  20,  169,  164,  98,  82,  98,  164,  170,  117,  171,  109,  171,  117,  172,
				168,  0,  1,  0,  168,  6,  173,  21,  37,  21,  173,  165,  174,  81,  97,  81,  174,  175,  118,  176,  119,  176,  118,  177,  109,  178,  103,  178,  109,  171,  119,  172,
				117,  172,  119,  176,  169,  38,  22,  38,  169,  162,  179,  37,  55,  37,  179,  173,  178,  97,  103,  97,  178,  174,  170,  104,  98,  104,  170,  180,  166,  9,  15,  9,
				166,  167,  175,  55,  81,  55,  175,  179,  118,  181,  177,  181,  118,  110,  110,  180,  181,  180,  110,  104,  58,  52,  51,  52,  58,  59,  157,  33,  182,  33,  157,  29,
				156,  31,  27,  31,  156,  183,  183,  35,  31,  35,  183,  184,  185,  35,  184,  35,  185,  43,  185,  49,  43,  49,  185,  186,  186,  53,  49,  53,  186,  187,  187,  60,
				53,  60,  187,  188,  60,  189,  67,  189,  60,  188,  67,  190,  71,  190,  67,  189,  71,  78,  77,  78,  71,  190,  47,  191,  41,  191,  47,  48,  182,  41,  191,  41,
				182,  33, 
			};
			#pragma endregion
			#pragma region BoundingBox
			static BBox const bbox = {{+0.000000f, +0.000000f, +0.478787f, 1.0f}, {+0.174119f, +0.174119f, +0.521213f, 0.0f}};
			#pragma endregion
		}
		struct
		{
			char const* name;
			std::size_t vcount, icount;
			pr::rdr::Vert const* vdata;
			uint16 const* idata;
			BBox const* bbox;
		}
		GizmoModelData[3] = 
		{
			{"gizmo translation", _countof(TranslateGizmo::verts), _countof(TranslateGizmo::idxs), TranslateGizmo::verts, TranslateGizmo::idxs, &TranslateGizmo::bbox},
			{"gizmo rotation"   , _countof(RotateGizmo   ::verts), _countof(RotateGizmo   ::idxs), RotateGizmo   ::verts, RotateGizmo   ::idxs, &RotateGizmo   ::bbox},
			{"gizmo scale"      , _countof(ScaleGizmo    ::verts), _countof(ScaleGizmo    ::idxs), ScaleGizmo    ::verts, ScaleGizmo    ::idxs, &ScaleGizmo    ::bbox},
		};
		#pragma endregion

		LdrGizmo::LdrGizmo(Renderer& rdr, EMode mode, m4x4 const& o2w)
			:m_attached_ref()
			,m_attached_ptr()
			,m_rdr(&rdr)
			,m_mode(static_cast<EMode>(-1))
			,m_gfx()
			,m_scale(1.0f)
			,m_offset(m4x4Identity)
			,m_ref_pt()
			,m_col_hover(0xFFBBBB00U)
			,m_col_manip(0xFFFFFF00U)
			,m_last_hit(EComponent::None)
			,m_component(EComponent::None)
			,m_manipulating(false)
			,m_impl_enabled(true)
		{
			// Create graphics for the gizmo, and set that model as the first
			// matrix to be controlled by the gizmo thus moving itself.
			m_attached_ptr.push_back(nullptr);
			m_attached_ref.push_back(m4x4Identity);
			Mode(mode);
			O2W(o2w);
		}

		// Get/Set the mode the gizmo is in
		bool LdrGizmo::Enabled() const
		{
			return m_impl_enabled;
		}
		void LdrGizmo::Enabled(bool enabled)
		{
			Revert();
			m_impl_enabled = enabled;
		}

		// True while manipulation is in progress
		bool LdrGizmo::Manipulating() const
		{
			return m_manipulating;
		}

		// Get/Set the mode the gizmo is in
		LdrGizmo::EMode LdrGizmo::Mode() const
		{
			return m_mode;
		}
		void LdrGizmo::Mode(EMode mode)
		{
			using namespace pr::rdr;
			using namespace pr::geometry;
			if (m_mode == mode) return;
			m_mode = mode;

			auto& data = GizmoModelData[int(mode)];
			
			// Create the model
			MdlSettings s(VBufferDesc(data.vcount, data.vdata), IBufferDesc(data.icount, data.idata), *data.bbox, data.name);
			m_gfx.m_model = m_rdr->m_mdl_mgr.CreateModel(s);

			// Create render nuggets for the model.
			// We render the gizmo in multiple passes because we
			// need it to draw "through" other objects in the scene.
			{
				// On the first pass, draw after all opaques with inverted Z test
				NuggetProps nugget(pr::rdr::EPrim::TriList, Vert::GeomMask);
				nugget.m_sort_key.Group(ESortGroup::PostOpaques);
				nugget.m_rsb.Set(ERS::CullMode, D3D11_CULL_BACK);
				nugget.m_dsb.Set(EDS::DepthFunc, D3D11_COMPARISON_GREATER);
				nugget.m_tex_diffuse = m_rdr->m_tex_mgr.FindTexture<Texture2D>(RdrId(EStockTexture::Gray));
				m_gfx.m_model->CreateNugget(nugget);
			}
			{
				// On the second pass, draw the gizmo normally
				NuggetProps nugget(pr::rdr::EPrim::TriList, Vert::GeomMask);
				nugget.m_rsb.Set(ERS::CullMode, D3D11_CULL_BACK);
				nugget.m_sort_key.Group(static_cast<ESortGroup>(int(ESortGroup::PostOpaques) + 1));
				nugget.m_range_overlaps = true;
				m_gfx.m_model->CreateNugget(nugget);
			}

			// Initialise the instances
			for (int i = 0; i != 3; ++i)
			{
				m_gfx.m_axis[i].m_model = m_gfx.m_model;
			}
			SetAxisColour(EComponent::None);

			// Update the matrix for this graphics object in m_attached
			m_attached_ptr[0] = &m_gfx.m_o2w;
			m_attached_ref[0] = m_gfx.m_o2w;
			m_offset = m4x4Identity;
		}

		// Get/Set the gizmo object to world transform
		m4x4 const& LdrGizmo::O2W() const
		{
			// The gizmo is always the first entry
			return *m_attached_ptr[0];
		}
		void LdrGizmo::O2W(m4x4 const& o2w)
		{
			*m_attached_ptr[0] = o2w;
			if (!m_manipulating)
				m_attached_ref[0] = o2w;

			m_offset = m4x4Identity;
		}

		// Attach/Detach objects by reference to their transform what will be moved as the gizmo moves
		void LdrGizmo::Attach(m4x4& o2w)
		{
			m_attached_ptr.push_back(&o2w);
			m_attached_ref.push_back(o2w);
		}
		void LdrGizmo::Detach(m4x4 const& o2w)
		{
			for (size_t i = 0, iend = m_attached_ptr.size(); i != iend; ++i)
			{
				if (m_attached_ptr[i] != &o2w) continue;
				m_attached_ptr.erase_fast(std::begin(m_attached_ptr) + i);
				m_attached_ref.erase_fast(std::begin(m_attached_ref) + i);
			}
		}

		// Attach/Detach a callback that will be called whenever the gizmo moves
		void LdrGizmo::Attach(LdrGizmoCB::Func func, void* ctx)
		{
			m_callbacks.push_back(LdrGizmoCB(func, ctx));
		}
		void LdrGizmo::Detach(LdrGizmoCB::Func func)
		{
			pr::erase_if(m_callbacks, [=](LdrGizmoCB& cb){ return cb.m_func == func; });
		}

		// Record the current matrices as the reference
		void LdrGizmo::Reference(v2 const& nss_point)
		{
			m_ref_pt = nss_point;

			// Set all references equal to the new transforms
			for (size_t i = 0, iend = m_attached_ptr.size(); i != iend; ++i)
				m_attached_ref[i] = *m_attached_ptr[i];

			m_offset = m4x4Identity;
		}

		// Reset all attached objects back to the reference position and end manipulation
		void LdrGizmo::Revert()
		{
			// Reset all the transforms back to the reference
			for (size_t i = 0, iend = m_attached_ptr.size(); i != iend; ++i)
				*m_attached_ptr[i] = m_attached_ref[i];

			m_manipulating = false;
			m_offset = m4x4Identity;

			// Call after reverting transforms so that callee's can Detach() after
			// their transforms have been changed (if they decided to Attach on StartManip)
			auto args = Evt_Gizmo(*this, ELdrGizmoEvent::Revert);
			for (auto& cb : m_callbacks) cb(args);
			pr::events::Send(args);
		}

		// Set the ref matrices equal to the controlled matrices
		void LdrGizmo::Commit()
		{
			// Scale is a special case for the gizmo, we don't want to actually
			// scale the gizmo, so restore the transform before committing
			if (Mode() != EMode::Scale)
				m_attached_ref[0] = *m_attached_ptr[0];
			else
				*m_attached_ptr[0] = m_attached_ref[0];

			// Set all references equal to the new transforms
			for (size_t i = 1, iend = m_attached_ptr.size(); i < iend; ++i)
				m_attached_ref[i] = *m_attached_ptr[i];

			m_offset = m4x4Identity;

			// Call after committing transforms so that callee's can Detach() after
			// their transforms have been changed (if they decided to Attach on StartManip)
			auto args = Evt_Gizmo(*this, ELdrGizmoEvent::Commit);
			for (auto& cb : m_callbacks) cb(args);
			pr::events::Send(args);
		}

		// Returns the transform offset between the position when
		// manipulating started and the current gizmo position
		m4x4 LdrGizmo::Offset() const
		{
			return m_offset;
		}

		// Interact with the gizmo based on mouse movement.
		// 'nss_point' should be normalised. i.e. x=[-1, -1], y=[-1,1] with (-1,-1) == (left,bottom). i.e. normal Cartesian axes
		// The start of a mouse movement is indicated by 'btn_state' being non-zero
		// The end of the mouse movement is indicated by 'btn_state' being zero
		// 'nav_op' is a navigation/manipulation verb
		// 'ref_point' should be true on the mouse down/up event, false while mouse moving
		// Returns true if the gizmo has moved or changed colour
		bool LdrGizmo::MouseControl(Camera& camera, v2 const& nss_point, pr::camera::ENavOp nav_op, bool ref_point)
		{
			// Not enabled? ignore mouse input
			if (!Enabled())
				return false;

			// On LMouse down or up, start or stop manipulating
			if (ref_point)
			{
				// On left mouse down, if we're not currently manipulating an axis, hit test to see if we should start
				auto lbtn = pr::camera::ENavOp::Rotate;
				if (nav_op == lbtn && m_component == EComponent::None)
				{
					auto hit = HitTest(camera, nss_point);
					SetAxisColour(hit, m_col_manip);
					if (hit != EComponent::None)
					{
						// Send the initial moving event before 'Reference' so that watchers
						// can attach themselves to the gizmo for the duration of the manipulation
						auto args = Evt_Gizmo(*this, ELdrGizmoEvent::StartManip);
						for (auto& cb : m_callbacks) cb(args);
						pr::events::Send(args);

						Reference(nss_point);
						m_component = hit;
						m_manipulating = true;
					}
					m_last_hit = hit;
					return true;
				}

				// If mouse up, end manipulating
				if (nav_op != lbtn && m_component != EComponent::None)
				{
					Commit();
					auto hit = HitTest(camera, nss_point);
					SetAxisColour(hit, m_col_hover);
					m_component = EComponent::None;
					m_manipulating = false;
					m_last_hit = hit;
					return true;
				}
			}

			// If a manipulation is in progress, continue it while the mouse is moving
			if (m_manipulating)
			{
				switch (m_mode)
				{
				default: throw std::exception("Unknown gizmo mode");
				case EMode::Translate: DoTranslation(camera, nss_point); break;
				case EMode::Rotate:    DoRotation(camera, nss_point); break;
				case EMode::Scale:     DoScale(camera, nss_point); break;
				}

				auto args = Evt_Gizmo(*this, ELdrGizmoEvent::Moving);
				for (auto& cb : m_callbacks) cb(args);
				pr::events::Send(args);
				return true;
			}

			// If we're not currently manipulating, check for mouse hover over the gizmo
			if (nav_op == pr::camera::ENavOp::None)
			{
				auto hit = HitTest(camera, nss_point);
				if (hit != m_last_hit)
				{
					SetAxisColour(hit, m_col_hover);
					m_last_hit = hit;
					return true;
				}
			}
			return false;
		}

		// Perform a hit test given a normalised screen-space point
		LdrGizmo::EComponent LdrGizmo::HitTest(Camera& camera, v2 const& nss_point)
		{
			auto hit = EComponent::None;

			// Cast a ray into the scene to get a line in world space
			v4 p, d;
			camera.NSSPointToWSRay(v4(nss_point, 1.0f, 0.0f), p, d);

			// Then transform the ray from world space to gizmo space (note, it might be scaled)
			auto w2o = Invert(O2W() * m4x4::Scale(m_scale, v4Origin));
			p = (w2o * p).w1();
			d = (w2o * d).w0();

			// Test for intersection of the ray with the gizmo
			// Since the ray is in gizmo space, we're testing against the X,Y,Z unit basis axes
			switch (m_mode)
			{
			default: throw std::exception("Unknown gizmo mode");
			case EMode::Translate:
			case EMode::Scale:
				{
					float const threshold_sq = Sqr(0.25f);
					float const t_min = 0.05f, t_max = 0.85f;
					float t0,t1,dist_sq,min_dist_sq = threshold_sq;
					
					// Close to the X axis? Closest pt in the range [0.25,1] on the XAxis
					// and within the threshold distance. Also, on the positive side of the ray
					ClosestPoint_LineSegmentToInfiniteLine(v4Origin, v4XAxis.w1(), p, d, t0, t1, dist_sq);
					if (t0 > t_min && t0 <= t_max && dist_sq < min_dist_sq && t1 > 0.0f)
					{
						hit = EComponent::X;
						min_dist_sq = dist_sq;
					}
					ClosestPoint_LineSegmentToInfiniteLine(v4Origin, v4YAxis.w1(), p, d, t0, t1, dist_sq);
					if (t0 > t_min && t0 <= t_max && dist_sq < min_dist_sq && t1 > 0.0f)
					{
						hit = EComponent::Y;
						min_dist_sq = dist_sq;
					}
					ClosestPoint_LineSegmentToInfiniteLine(v4Origin, v4ZAxis.w1(), p, d, t0, t1, dist_sq);
					if (t0 > t_min && t0 <= t_max && dist_sq < min_dist_sq && t1 > 0.0f)
					{
						hit = EComponent::Z;
						min_dist_sq = dist_sq;
					}
					break;
				}
			case EMode::Rotate:
				{
					float t, t_min = pr::maths::float_max;
					
					// Intersect YZ plane for rotation about X? Closest pt in the range [0.25,1] on the XAxis
					// and within the threshold distance. Also, on the positive side of the ray
					if (Intersect_LineToTriangle(p, p+d, v4Origin, v4YAxis*1.2f, v4ZAxis*1.2f, &t) && t > 0 && t < t_min)
					{
						hit = EComponent::X;
						t_min = t;
					}
					if (Intersect_LineToTriangle(p, p+d, v4Origin, v4ZAxis*1.2f, v4XAxis*1.2f, &t) && t > 0 && t < t_min)
					{
						hit = EComponent::Y;
						t_min = t;
					}
					if (Intersect_LineToTriangle(p, p+d, v4Origin, v4XAxis*1.2f, v4YAxis*1.2f, &t) && t > 0 && t < t_min)
					{
						hit = EComponent::Z;
						t_min = t;
					}
					break;
				}
			}

			return hit;
		}

		// Resets the other axes to the base colour and sets 'cp' to 'colour'
		void LdrGizmo::SetAxisColour(EComponent cp, Colour const& colour)
		{
			// Reset all to origin colours
			m_gfx.m_axis[0].m_colour = Colour32Red;
			m_gfx.m_axis[1].m_colour = Colour32Green;
			m_gfx.m_axis[2].m_colour = Colour32Blue;
			
			// Highlight the axis the mouse is over
			if (cp != EComponent::None)
			{
				m_gfx.m_axis[int(cp) - 1].m_colour = colour;
			}
		}

		// Add this gizmo to a scene
		void LdrGizmo::AddToScene(pr::rdr::Scene& scene)
		{
			auto scale = m4x4::Scale(m_scale, v4Origin);

			m_gfx.m_axis[0].m_i2w = m_gfx.m_o2w * m4x4::Transform(0, float(pr::maths::tau_by_4), float(pr::maths::tau_by_4), v4Origin) * scale;
			m_gfx.m_axis[1].m_i2w = m_gfx.m_o2w * m4x4::Transform(-float(pr::maths::tau_by_4), -float(pr::maths::tau_by_4), 0, v4Origin) * scale;
			m_gfx.m_axis[2].m_i2w = m_gfx.m_o2w * m4x4::Transform(0,0,0, v4Origin) * scale;

			scene.AddInstance(m_gfx.m_axis[0]);
			scene.AddInstance(m_gfx.m_axis[1]);
			scene.AddInstance(m_gfx.m_axis[2]);
		}

		// Perform translation
		void LdrGizmo::DoTranslation(Camera& camera, v2 const& nss_point)
		{
			auto k = (int)m_component - 1;
			auto p = m_attached_ref[0].pos;
			auto d = m_attached_ref[0][k];
			auto c2w = camera.CameraToWorld();
			if (FEql(Length3Sq(d), 0.0f))
			{
				// If 'd' is zero, try construct it from the other two axes
				d = Cross3(m_attached_ref[0][(k+1)%3], m_attached_ref[0][(k+2)%3]);
				if (FEql(Length3Sq(d), 0.0f))
					return; // Still zero... give up
			}

			// Get the WS ray for 'm_ref_pt'
			v4 p0, dir0;
			camera.NSSPointToWSRay(v4(m_ref_pt, c2w.pos.z - p.z,1.0f), p0, dir0);

			// Get the WS ray for 'nss_point'
			v4 p1, dir1;
			camera.NSSPointToWSRay(v4(nss_point, c2w.pos.z - p.z,1.0f), p1, dir1);

			// Find the nearest points on 'd' for 'dir0' and 'dir1'
			float t0, t1, tdummy;
			ClosestPoint_InfiniteLineToInfiniteLine(p, d, p0, dir0, t0, tdummy);
			ClosestPoint_InfiniteLineToInfiniteLine(p, d, p1, dir1, t1, tdummy);

			// Move to the nearest point
			m_offset = m4x4::Translation(((t1 - t0)*d).w1()); // world space translation (since axis is in world space)

			// Translate attached objects by d * the component axis
			for (int i = 0, iend = int(m_attached_ptr.size()); i != iend; ++i)
				*m_attached_ptr[i] = m_offset * m_attached_ref[i];
		}

		// Perform rotation
		void LdrGizmo::DoRotation(Camera& camera, v2 const& nss_point)
		{
			auto k = (int)m_component - 1;
			auto p = m_attached_ref[0].pos;
			auto d = m_attached_ref[0][k];

			// Get the axis of rotation from the gizmo and normalised it
			auto axis = d;
			auto axis_lensq = Length3Sq(axis);
			if (axis_lensq < pr::maths::tiny) return;
			axis /= sqrt(axis_lensq);

			// Project the component axis back into normalised screen space
			auto p0 = camera.WSPointToNSSPoint(p);
			auto p1 = camera.WSPointToNSSPoint(p + d);
			auto s  = Sign(p1.z - p0.z);
			auto a  = Normalise2(m_ref_pt - p0.xy, v2Zero);
			auto b  = Rotate90CCW(a);
			auto c  = nss_point - p0.xy;
			auto t  = s * ATan2(Dot2(c,b), Dot2(c,a));

			m_offset = m4x4::Translation(p) * m4x4::Transform(axis, t, v4Origin) * m4x4::Translation((-p).w1()); // World space rotation about 'axis'

			// Rotate attached objects by t radians about the component axis
			for (int i = 0, iend = int(m_attached_ptr.size()); i != iend; ++i)
				m_attached_ptr[i]->rot = m_offset.rot * m_attached_ref[i].rot;
		}

		// Perform scale
		void LdrGizmo::DoScale(Camera& camera, v2 const& nss_point)
		{
			auto k = (int)m_component - 1;
			auto p = m_attached_ref[0].pos;
			auto d = m_attached_ref[0][k];
			auto c2w = camera.CameraToWorld();
			if (FEql(Length3Sq(d), 0.0f))
			{
				// If 'd' is zero, try construct it from the other two axes
				d = Cross3(m_attached_ref[0][(k+1)%3], m_attached_ref[0][(k+2)%3]);
				if (FEql(Length3Sq(d), 0.0f))
					return; // Still zero... give up
			}

			// Get the WS ray for 'm_ref_pt'
			v4 p0, dir0;
			camera.NSSPointToWSRay(v4(m_ref_pt, c2w.pos.z - p.z,1.0f), p0, dir0);

			// Get the WS ray for 'nss_point'
			v4 p1, dir1;
			camera.NSSPointToWSRay(v4(nss_point, c2w.pos.z - p.z,1.0f), p1, dir1);

			// Find the nearest points on 'd' for 'dir0' and 'dir1'
			float t0, t1, tdummy;
			ClosestPoint_InfiniteLineToInfiniteLine(p, d, p0, dir0, t0, tdummy);
			ClosestPoint_InfiniteLineToInfiniteLine(p, d, p1, dir1, t1, tdummy);
			if (FEql(t0, 0.0f))
				return;

			// Scale
			float t[3] = {1.0f, 1.0f, 1.0f};
			t[k] = t1 / t0;

			auto& giz2w = m_attached_ref[0];
			auto  w2giz = Invert(giz2w);
			w2giz.x.w = 0.0f; // Have to fix up the w components because 'Invert'
			w2giz.y.w = 0.0f; // is only an approximate matrix inverse
			w2giz.z.w = 0.0f;
			w2giz.w.w = 1.0f;

			m_offset = giz2w * m4x4::Scale(t[0], t[1], t[2], v4Origin) * w2giz;

			// Scale attached objects in their local space, but by a scale
			// matrix with the same orientation as the gizmo.
			for (int i = 1, iend = int(m_attached_ptr.size()); i < iend; ++i)
				m_attached_ptr[i]->rot = m_offset.rot * m_attached_ref[i].rot;

			// Special case the gizmo transform, since we don't want to scale the gizmo
			t[k] = t[k] > 1.0f ? 1.05f : 0.95f;
			m_attached_ptr[0]->rot = giz2w.rot * m3x4::Scale(t[0], t[1], t[2]);
		}
	}
}
